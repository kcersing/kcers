// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/member"
	"kcers/biz/dal/db/mysql/ent/memberproduct"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"kcers/biz/dal/db/mysql/ent/user"
	"kcers/biz/dal/db/mysql/ent/venue"
	"kcers/biz/dal/db/mysql/ent/venueentry"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueEntryUpdate is the builder for updating VenueEntry entities.
type VenueEntryUpdate struct {
	config
	hooks     []Hook
	mutation  *VenueEntryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VenueEntryUpdate builder.
func (veu *VenueEntryUpdate) Where(ps ...predicate.VenueEntry) *VenueEntryUpdate {
	veu.mutation.Where(ps...)
	return veu
}

// SetUpdatedAt sets the "updated_at" field.
func (veu *VenueEntryUpdate) SetUpdatedAt(t time.Time) *VenueEntryUpdate {
	veu.mutation.SetUpdatedAt(t)
	return veu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (veu *VenueEntryUpdate) ClearUpdatedAt() *VenueEntryUpdate {
	veu.mutation.ClearUpdatedAt()
	return veu
}

// SetDelete sets the "delete" field.
func (veu *VenueEntryUpdate) SetDelete(i int64) *VenueEntryUpdate {
	veu.mutation.ResetDelete()
	veu.mutation.SetDelete(i)
	return veu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableDelete(i *int64) *VenueEntryUpdate {
	if i != nil {
		veu.SetDelete(*i)
	}
	return veu
}

// AddDelete adds i to the "delete" field.
func (veu *VenueEntryUpdate) AddDelete(i int64) *VenueEntryUpdate {
	veu.mutation.AddDelete(i)
	return veu
}

// ClearDelete clears the value of the "delete" field.
func (veu *VenueEntryUpdate) ClearDelete() *VenueEntryUpdate {
	veu.mutation.ClearDelete()
	return veu
}

// SetCreatedID sets the "created_id" field.
func (veu *VenueEntryUpdate) SetCreatedID(i int64) *VenueEntryUpdate {
	veu.mutation.ResetCreatedID()
	veu.mutation.SetCreatedID(i)
	return veu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableCreatedID(i *int64) *VenueEntryUpdate {
	if i != nil {
		veu.SetCreatedID(*i)
	}
	return veu
}

// AddCreatedID adds i to the "created_id" field.
func (veu *VenueEntryUpdate) AddCreatedID(i int64) *VenueEntryUpdate {
	veu.mutation.AddCreatedID(i)
	return veu
}

// ClearCreatedID clears the value of the "created_id" field.
func (veu *VenueEntryUpdate) ClearCreatedID() *VenueEntryUpdate {
	veu.mutation.ClearCreatedID()
	return veu
}

// SetMemberID sets the "member_id" field.
func (veu *VenueEntryUpdate) SetMemberID(i int64) *VenueEntryUpdate {
	veu.mutation.SetMemberID(i)
	return veu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableMemberID(i *int64) *VenueEntryUpdate {
	if i != nil {
		veu.SetMemberID(*i)
	}
	return veu
}

// ClearMemberID clears the value of the "member_id" field.
func (veu *VenueEntryUpdate) ClearMemberID() *VenueEntryUpdate {
	veu.mutation.ClearMemberID()
	return veu
}

// SetUserID sets the "user_id" field.
func (veu *VenueEntryUpdate) SetUserID(i int64) *VenueEntryUpdate {
	veu.mutation.SetUserID(i)
	return veu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableUserID(i *int64) *VenueEntryUpdate {
	if i != nil {
		veu.SetUserID(*i)
	}
	return veu
}

// ClearUserID clears the value of the "user_id" field.
func (veu *VenueEntryUpdate) ClearUserID() *VenueEntryUpdate {
	veu.mutation.ClearUserID()
	return veu
}

// SetVenueID sets the "venue_id" field.
func (veu *VenueEntryUpdate) SetVenueID(i int64) *VenueEntryUpdate {
	veu.mutation.SetVenueID(i)
	return veu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableVenueID(i *int64) *VenueEntryUpdate {
	if i != nil {
		veu.SetVenueID(*i)
	}
	return veu
}

// ClearVenueID clears the value of the "venue_id" field.
func (veu *VenueEntryUpdate) ClearVenueID() *VenueEntryUpdate {
	veu.mutation.ClearVenueID()
	return veu
}

// SetMemberProductID sets the "member_product_id" field.
func (veu *VenueEntryUpdate) SetMemberProductID(i int64) *VenueEntryUpdate {
	veu.mutation.SetMemberProductID(i)
	return veu
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableMemberProductID(i *int64) *VenueEntryUpdate {
	if i != nil {
		veu.SetMemberProductID(*i)
	}
	return veu
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (veu *VenueEntryUpdate) ClearMemberProductID() *VenueEntryUpdate {
	veu.mutation.ClearMemberProductID()
	return veu
}

// SetMemberPropertyID sets the "member_property_id" field.
func (veu *VenueEntryUpdate) SetMemberPropertyID(i int64) *VenueEntryUpdate {
	veu.mutation.ResetMemberPropertyID()
	veu.mutation.SetMemberPropertyID(i)
	return veu
}

// SetNillableMemberPropertyID sets the "member_property_id" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableMemberPropertyID(i *int64) *VenueEntryUpdate {
	if i != nil {
		veu.SetMemberPropertyID(*i)
	}
	return veu
}

// AddMemberPropertyID adds i to the "member_property_id" field.
func (veu *VenueEntryUpdate) AddMemberPropertyID(i int64) *VenueEntryUpdate {
	veu.mutation.AddMemberPropertyID(i)
	return veu
}

// ClearMemberPropertyID clears the value of the "member_property_id" field.
func (veu *VenueEntryUpdate) ClearMemberPropertyID() *VenueEntryUpdate {
	veu.mutation.ClearMemberPropertyID()
	return veu
}

// SetEntryAt sets the "entry_at" field.
func (veu *VenueEntryUpdate) SetEntryAt(t time.Time) *VenueEntryUpdate {
	veu.mutation.SetEntryAt(t)
	return veu
}

// SetNillableEntryAt sets the "entry_at" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableEntryAt(t *time.Time) *VenueEntryUpdate {
	if t != nil {
		veu.SetEntryAt(*t)
	}
	return veu
}

// ClearEntryAt clears the value of the "entry_at" field.
func (veu *VenueEntryUpdate) ClearEntryAt() *VenueEntryUpdate {
	veu.mutation.ClearEntryAt()
	return veu
}

// SetLeavingAt sets the "leaving_at" field.
func (veu *VenueEntryUpdate) SetLeavingAt(t time.Time) *VenueEntryUpdate {
	veu.mutation.SetLeavingAt(t)
	return veu
}

// SetNillableLeavingAt sets the "leaving_at" field if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableLeavingAt(t *time.Time) *VenueEntryUpdate {
	if t != nil {
		veu.SetLeavingAt(*t)
	}
	return veu
}

// ClearLeavingAt clears the value of the "leaving_at" field.
func (veu *VenueEntryUpdate) ClearLeavingAt() *VenueEntryUpdate {
	veu.mutation.ClearLeavingAt()
	return veu
}

// SetVenuesID sets the "venues" edge to the Venue entity by ID.
func (veu *VenueEntryUpdate) SetVenuesID(id int64) *VenueEntryUpdate {
	veu.mutation.SetVenuesID(id)
	return veu
}

// SetNillableVenuesID sets the "venues" edge to the Venue entity by ID if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableVenuesID(id *int64) *VenueEntryUpdate {
	if id != nil {
		veu = veu.SetVenuesID(*id)
	}
	return veu
}

// SetVenues sets the "venues" edge to the Venue entity.
func (veu *VenueEntryUpdate) SetVenues(v *Venue) *VenueEntryUpdate {
	return veu.SetVenuesID(v.ID)
}

// SetMembersID sets the "members" edge to the Member entity by ID.
func (veu *VenueEntryUpdate) SetMembersID(id int64) *VenueEntryUpdate {
	veu.mutation.SetMembersID(id)
	return veu
}

// SetNillableMembersID sets the "members" edge to the Member entity by ID if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableMembersID(id *int64) *VenueEntryUpdate {
	if id != nil {
		veu = veu.SetMembersID(*id)
	}
	return veu
}

// SetMembers sets the "members" edge to the Member entity.
func (veu *VenueEntryUpdate) SetMembers(m *Member) *VenueEntryUpdate {
	return veu.SetMembersID(m.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (veu *VenueEntryUpdate) SetUsersID(id int64) *VenueEntryUpdate {
	veu.mutation.SetUsersID(id)
	return veu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableUsersID(id *int64) *VenueEntryUpdate {
	if id != nil {
		veu = veu.SetUsersID(*id)
	}
	return veu
}

// SetUsers sets the "users" edge to the User entity.
func (veu *VenueEntryUpdate) SetUsers(u *User) *VenueEntryUpdate {
	return veu.SetUsersID(u.ID)
}

// SetMemberProductsID sets the "member_products" edge to the MemberProduct entity by ID.
func (veu *VenueEntryUpdate) SetMemberProductsID(id int64) *VenueEntryUpdate {
	veu.mutation.SetMemberProductsID(id)
	return veu
}

// SetNillableMemberProductsID sets the "member_products" edge to the MemberProduct entity by ID if the given value is not nil.
func (veu *VenueEntryUpdate) SetNillableMemberProductsID(id *int64) *VenueEntryUpdate {
	if id != nil {
		veu = veu.SetMemberProductsID(*id)
	}
	return veu
}

// SetMemberProducts sets the "member_products" edge to the MemberProduct entity.
func (veu *VenueEntryUpdate) SetMemberProducts(m *MemberProduct) *VenueEntryUpdate {
	return veu.SetMemberProductsID(m.ID)
}

// Mutation returns the VenueEntryMutation object of the builder.
func (veu *VenueEntryUpdate) Mutation() *VenueEntryMutation {
	return veu.mutation
}

// ClearVenues clears the "venues" edge to the Venue entity.
func (veu *VenueEntryUpdate) ClearVenues() *VenueEntryUpdate {
	veu.mutation.ClearVenues()
	return veu
}

// ClearMembers clears the "members" edge to the Member entity.
func (veu *VenueEntryUpdate) ClearMembers() *VenueEntryUpdate {
	veu.mutation.ClearMembers()
	return veu
}

// ClearUsers clears the "users" edge to the User entity.
func (veu *VenueEntryUpdate) ClearUsers() *VenueEntryUpdate {
	veu.mutation.ClearUsers()
	return veu
}

// ClearMemberProducts clears the "member_products" edge to the MemberProduct entity.
func (veu *VenueEntryUpdate) ClearMemberProducts() *VenueEntryUpdate {
	veu.mutation.ClearMemberProducts()
	return veu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (veu *VenueEntryUpdate) Save(ctx context.Context) (int, error) {
	veu.defaults()
	return withHooks(ctx, veu.sqlSave, veu.mutation, veu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (veu *VenueEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := veu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (veu *VenueEntryUpdate) Exec(ctx context.Context) error {
	_, err := veu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (veu *VenueEntryUpdate) ExecX(ctx context.Context) {
	if err := veu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (veu *VenueEntryUpdate) defaults() {
	if _, ok := veu.mutation.UpdatedAt(); !ok && !veu.mutation.UpdatedAtCleared() {
		v := venueentry.UpdateDefaultUpdatedAt()
		veu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (veu *VenueEntryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VenueEntryUpdate {
	veu.modifiers = append(veu.modifiers, modifiers...)
	return veu
}

func (veu *VenueEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(venueentry.Table, venueentry.Columns, sqlgraph.NewFieldSpec(venueentry.FieldID, field.TypeInt64))
	if ps := veu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if veu.mutation.CreatedAtCleared() {
		_spec.ClearField(venueentry.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := veu.mutation.UpdatedAt(); ok {
		_spec.SetField(venueentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if veu.mutation.UpdatedAtCleared() {
		_spec.ClearField(venueentry.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := veu.mutation.Delete(); ok {
		_spec.SetField(venueentry.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := veu.mutation.AddedDelete(); ok {
		_spec.AddField(venueentry.FieldDelete, field.TypeInt64, value)
	}
	if veu.mutation.DeleteCleared() {
		_spec.ClearField(venueentry.FieldDelete, field.TypeInt64)
	}
	if value, ok := veu.mutation.CreatedID(); ok {
		_spec.SetField(venueentry.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := veu.mutation.AddedCreatedID(); ok {
		_spec.AddField(venueentry.FieldCreatedID, field.TypeInt64, value)
	}
	if veu.mutation.CreatedIDCleared() {
		_spec.ClearField(venueentry.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := veu.mutation.MemberPropertyID(); ok {
		_spec.SetField(venueentry.FieldMemberPropertyID, field.TypeInt64, value)
	}
	if value, ok := veu.mutation.AddedMemberPropertyID(); ok {
		_spec.AddField(venueentry.FieldMemberPropertyID, field.TypeInt64, value)
	}
	if veu.mutation.MemberPropertyIDCleared() {
		_spec.ClearField(venueentry.FieldMemberPropertyID, field.TypeInt64)
	}
	if value, ok := veu.mutation.EntryAt(); ok {
		_spec.SetField(venueentry.FieldEntryAt, field.TypeTime, value)
	}
	if veu.mutation.EntryAtCleared() {
		_spec.ClearField(venueentry.FieldEntryAt, field.TypeTime)
	}
	if value, ok := veu.mutation.LeavingAt(); ok {
		_spec.SetField(venueentry.FieldLeavingAt, field.TypeTime, value)
	}
	if veu.mutation.LeavingAtCleared() {
		_spec.ClearField(venueentry.FieldLeavingAt, field.TypeTime)
	}
	if veu.mutation.VenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.VenuesTable,
			Columns: []string{venueentry.VenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veu.mutation.VenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.VenuesTable,
			Columns: []string{venueentry.VenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if veu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MembersTable,
			Columns: []string{venueentry.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MembersTable,
			Columns: []string{venueentry.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if veu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.UsersTable,
			Columns: []string{venueentry.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.UsersTable,
			Columns: []string{venueentry.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if veu.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MemberProductsTable,
			Columns: []string{venueentry.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veu.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MemberProductsTable,
			Columns: []string{venueentry.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(veu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, veu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venueentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	veu.mutation.done = true
	return n, nil
}

// VenueEntryUpdateOne is the builder for updating a single VenueEntry entity.
type VenueEntryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VenueEntryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (veuo *VenueEntryUpdateOne) SetUpdatedAt(t time.Time) *VenueEntryUpdateOne {
	veuo.mutation.SetUpdatedAt(t)
	return veuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (veuo *VenueEntryUpdateOne) ClearUpdatedAt() *VenueEntryUpdateOne {
	veuo.mutation.ClearUpdatedAt()
	return veuo
}

// SetDelete sets the "delete" field.
func (veuo *VenueEntryUpdateOne) SetDelete(i int64) *VenueEntryUpdateOne {
	veuo.mutation.ResetDelete()
	veuo.mutation.SetDelete(i)
	return veuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableDelete(i *int64) *VenueEntryUpdateOne {
	if i != nil {
		veuo.SetDelete(*i)
	}
	return veuo
}

// AddDelete adds i to the "delete" field.
func (veuo *VenueEntryUpdateOne) AddDelete(i int64) *VenueEntryUpdateOne {
	veuo.mutation.AddDelete(i)
	return veuo
}

// ClearDelete clears the value of the "delete" field.
func (veuo *VenueEntryUpdateOne) ClearDelete() *VenueEntryUpdateOne {
	veuo.mutation.ClearDelete()
	return veuo
}

// SetCreatedID sets the "created_id" field.
func (veuo *VenueEntryUpdateOne) SetCreatedID(i int64) *VenueEntryUpdateOne {
	veuo.mutation.ResetCreatedID()
	veuo.mutation.SetCreatedID(i)
	return veuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableCreatedID(i *int64) *VenueEntryUpdateOne {
	if i != nil {
		veuo.SetCreatedID(*i)
	}
	return veuo
}

// AddCreatedID adds i to the "created_id" field.
func (veuo *VenueEntryUpdateOne) AddCreatedID(i int64) *VenueEntryUpdateOne {
	veuo.mutation.AddCreatedID(i)
	return veuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (veuo *VenueEntryUpdateOne) ClearCreatedID() *VenueEntryUpdateOne {
	veuo.mutation.ClearCreatedID()
	return veuo
}

// SetMemberID sets the "member_id" field.
func (veuo *VenueEntryUpdateOne) SetMemberID(i int64) *VenueEntryUpdateOne {
	veuo.mutation.SetMemberID(i)
	return veuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableMemberID(i *int64) *VenueEntryUpdateOne {
	if i != nil {
		veuo.SetMemberID(*i)
	}
	return veuo
}

// ClearMemberID clears the value of the "member_id" field.
func (veuo *VenueEntryUpdateOne) ClearMemberID() *VenueEntryUpdateOne {
	veuo.mutation.ClearMemberID()
	return veuo
}

// SetUserID sets the "user_id" field.
func (veuo *VenueEntryUpdateOne) SetUserID(i int64) *VenueEntryUpdateOne {
	veuo.mutation.SetUserID(i)
	return veuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableUserID(i *int64) *VenueEntryUpdateOne {
	if i != nil {
		veuo.SetUserID(*i)
	}
	return veuo
}

// ClearUserID clears the value of the "user_id" field.
func (veuo *VenueEntryUpdateOne) ClearUserID() *VenueEntryUpdateOne {
	veuo.mutation.ClearUserID()
	return veuo
}

// SetVenueID sets the "venue_id" field.
func (veuo *VenueEntryUpdateOne) SetVenueID(i int64) *VenueEntryUpdateOne {
	veuo.mutation.SetVenueID(i)
	return veuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableVenueID(i *int64) *VenueEntryUpdateOne {
	if i != nil {
		veuo.SetVenueID(*i)
	}
	return veuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (veuo *VenueEntryUpdateOne) ClearVenueID() *VenueEntryUpdateOne {
	veuo.mutation.ClearVenueID()
	return veuo
}

// SetMemberProductID sets the "member_product_id" field.
func (veuo *VenueEntryUpdateOne) SetMemberProductID(i int64) *VenueEntryUpdateOne {
	veuo.mutation.SetMemberProductID(i)
	return veuo
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableMemberProductID(i *int64) *VenueEntryUpdateOne {
	if i != nil {
		veuo.SetMemberProductID(*i)
	}
	return veuo
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (veuo *VenueEntryUpdateOne) ClearMemberProductID() *VenueEntryUpdateOne {
	veuo.mutation.ClearMemberProductID()
	return veuo
}

// SetMemberPropertyID sets the "member_property_id" field.
func (veuo *VenueEntryUpdateOne) SetMemberPropertyID(i int64) *VenueEntryUpdateOne {
	veuo.mutation.ResetMemberPropertyID()
	veuo.mutation.SetMemberPropertyID(i)
	return veuo
}

// SetNillableMemberPropertyID sets the "member_property_id" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableMemberPropertyID(i *int64) *VenueEntryUpdateOne {
	if i != nil {
		veuo.SetMemberPropertyID(*i)
	}
	return veuo
}

// AddMemberPropertyID adds i to the "member_property_id" field.
func (veuo *VenueEntryUpdateOne) AddMemberPropertyID(i int64) *VenueEntryUpdateOne {
	veuo.mutation.AddMemberPropertyID(i)
	return veuo
}

// ClearMemberPropertyID clears the value of the "member_property_id" field.
func (veuo *VenueEntryUpdateOne) ClearMemberPropertyID() *VenueEntryUpdateOne {
	veuo.mutation.ClearMemberPropertyID()
	return veuo
}

// SetEntryAt sets the "entry_at" field.
func (veuo *VenueEntryUpdateOne) SetEntryAt(t time.Time) *VenueEntryUpdateOne {
	veuo.mutation.SetEntryAt(t)
	return veuo
}

// SetNillableEntryAt sets the "entry_at" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableEntryAt(t *time.Time) *VenueEntryUpdateOne {
	if t != nil {
		veuo.SetEntryAt(*t)
	}
	return veuo
}

// ClearEntryAt clears the value of the "entry_at" field.
func (veuo *VenueEntryUpdateOne) ClearEntryAt() *VenueEntryUpdateOne {
	veuo.mutation.ClearEntryAt()
	return veuo
}

// SetLeavingAt sets the "leaving_at" field.
func (veuo *VenueEntryUpdateOne) SetLeavingAt(t time.Time) *VenueEntryUpdateOne {
	veuo.mutation.SetLeavingAt(t)
	return veuo
}

// SetNillableLeavingAt sets the "leaving_at" field if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableLeavingAt(t *time.Time) *VenueEntryUpdateOne {
	if t != nil {
		veuo.SetLeavingAt(*t)
	}
	return veuo
}

// ClearLeavingAt clears the value of the "leaving_at" field.
func (veuo *VenueEntryUpdateOne) ClearLeavingAt() *VenueEntryUpdateOne {
	veuo.mutation.ClearLeavingAt()
	return veuo
}

// SetVenuesID sets the "venues" edge to the Venue entity by ID.
func (veuo *VenueEntryUpdateOne) SetVenuesID(id int64) *VenueEntryUpdateOne {
	veuo.mutation.SetVenuesID(id)
	return veuo
}

// SetNillableVenuesID sets the "venues" edge to the Venue entity by ID if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableVenuesID(id *int64) *VenueEntryUpdateOne {
	if id != nil {
		veuo = veuo.SetVenuesID(*id)
	}
	return veuo
}

// SetVenues sets the "venues" edge to the Venue entity.
func (veuo *VenueEntryUpdateOne) SetVenues(v *Venue) *VenueEntryUpdateOne {
	return veuo.SetVenuesID(v.ID)
}

// SetMembersID sets the "members" edge to the Member entity by ID.
func (veuo *VenueEntryUpdateOne) SetMembersID(id int64) *VenueEntryUpdateOne {
	veuo.mutation.SetMembersID(id)
	return veuo
}

// SetNillableMembersID sets the "members" edge to the Member entity by ID if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableMembersID(id *int64) *VenueEntryUpdateOne {
	if id != nil {
		veuo = veuo.SetMembersID(*id)
	}
	return veuo
}

// SetMembers sets the "members" edge to the Member entity.
func (veuo *VenueEntryUpdateOne) SetMembers(m *Member) *VenueEntryUpdateOne {
	return veuo.SetMembersID(m.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (veuo *VenueEntryUpdateOne) SetUsersID(id int64) *VenueEntryUpdateOne {
	veuo.mutation.SetUsersID(id)
	return veuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableUsersID(id *int64) *VenueEntryUpdateOne {
	if id != nil {
		veuo = veuo.SetUsersID(*id)
	}
	return veuo
}

// SetUsers sets the "users" edge to the User entity.
func (veuo *VenueEntryUpdateOne) SetUsers(u *User) *VenueEntryUpdateOne {
	return veuo.SetUsersID(u.ID)
}

// SetMemberProductsID sets the "member_products" edge to the MemberProduct entity by ID.
func (veuo *VenueEntryUpdateOne) SetMemberProductsID(id int64) *VenueEntryUpdateOne {
	veuo.mutation.SetMemberProductsID(id)
	return veuo
}

// SetNillableMemberProductsID sets the "member_products" edge to the MemberProduct entity by ID if the given value is not nil.
func (veuo *VenueEntryUpdateOne) SetNillableMemberProductsID(id *int64) *VenueEntryUpdateOne {
	if id != nil {
		veuo = veuo.SetMemberProductsID(*id)
	}
	return veuo
}

// SetMemberProducts sets the "member_products" edge to the MemberProduct entity.
func (veuo *VenueEntryUpdateOne) SetMemberProducts(m *MemberProduct) *VenueEntryUpdateOne {
	return veuo.SetMemberProductsID(m.ID)
}

// Mutation returns the VenueEntryMutation object of the builder.
func (veuo *VenueEntryUpdateOne) Mutation() *VenueEntryMutation {
	return veuo.mutation
}

// ClearVenues clears the "venues" edge to the Venue entity.
func (veuo *VenueEntryUpdateOne) ClearVenues() *VenueEntryUpdateOne {
	veuo.mutation.ClearVenues()
	return veuo
}

// ClearMembers clears the "members" edge to the Member entity.
func (veuo *VenueEntryUpdateOne) ClearMembers() *VenueEntryUpdateOne {
	veuo.mutation.ClearMembers()
	return veuo
}

// ClearUsers clears the "users" edge to the User entity.
func (veuo *VenueEntryUpdateOne) ClearUsers() *VenueEntryUpdateOne {
	veuo.mutation.ClearUsers()
	return veuo
}

// ClearMemberProducts clears the "member_products" edge to the MemberProduct entity.
func (veuo *VenueEntryUpdateOne) ClearMemberProducts() *VenueEntryUpdateOne {
	veuo.mutation.ClearMemberProducts()
	return veuo
}

// Where appends a list predicates to the VenueEntryUpdate builder.
func (veuo *VenueEntryUpdateOne) Where(ps ...predicate.VenueEntry) *VenueEntryUpdateOne {
	veuo.mutation.Where(ps...)
	return veuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (veuo *VenueEntryUpdateOne) Select(field string, fields ...string) *VenueEntryUpdateOne {
	veuo.fields = append([]string{field}, fields...)
	return veuo
}

// Save executes the query and returns the updated VenueEntry entity.
func (veuo *VenueEntryUpdateOne) Save(ctx context.Context) (*VenueEntry, error) {
	veuo.defaults()
	return withHooks(ctx, veuo.sqlSave, veuo.mutation, veuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (veuo *VenueEntryUpdateOne) SaveX(ctx context.Context) *VenueEntry {
	node, err := veuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (veuo *VenueEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := veuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (veuo *VenueEntryUpdateOne) ExecX(ctx context.Context) {
	if err := veuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (veuo *VenueEntryUpdateOne) defaults() {
	if _, ok := veuo.mutation.UpdatedAt(); !ok && !veuo.mutation.UpdatedAtCleared() {
		v := venueentry.UpdateDefaultUpdatedAt()
		veuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (veuo *VenueEntryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VenueEntryUpdateOne {
	veuo.modifiers = append(veuo.modifiers, modifiers...)
	return veuo
}

func (veuo *VenueEntryUpdateOne) sqlSave(ctx context.Context) (_node *VenueEntry, err error) {
	_spec := sqlgraph.NewUpdateSpec(venueentry.Table, venueentry.Columns, sqlgraph.NewFieldSpec(venueentry.FieldID, field.TypeInt64))
	id, ok := veuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VenueEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := veuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venueentry.FieldID)
		for _, f := range fields {
			if !venueentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != venueentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := veuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if veuo.mutation.CreatedAtCleared() {
		_spec.ClearField(venueentry.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := veuo.mutation.UpdatedAt(); ok {
		_spec.SetField(venueentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if veuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(venueentry.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := veuo.mutation.Delete(); ok {
		_spec.SetField(venueentry.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := veuo.mutation.AddedDelete(); ok {
		_spec.AddField(venueentry.FieldDelete, field.TypeInt64, value)
	}
	if veuo.mutation.DeleteCleared() {
		_spec.ClearField(venueentry.FieldDelete, field.TypeInt64)
	}
	if value, ok := veuo.mutation.CreatedID(); ok {
		_spec.SetField(venueentry.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := veuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(venueentry.FieldCreatedID, field.TypeInt64, value)
	}
	if veuo.mutation.CreatedIDCleared() {
		_spec.ClearField(venueentry.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := veuo.mutation.MemberPropertyID(); ok {
		_spec.SetField(venueentry.FieldMemberPropertyID, field.TypeInt64, value)
	}
	if value, ok := veuo.mutation.AddedMemberPropertyID(); ok {
		_spec.AddField(venueentry.FieldMemberPropertyID, field.TypeInt64, value)
	}
	if veuo.mutation.MemberPropertyIDCleared() {
		_spec.ClearField(venueentry.FieldMemberPropertyID, field.TypeInt64)
	}
	if value, ok := veuo.mutation.EntryAt(); ok {
		_spec.SetField(venueentry.FieldEntryAt, field.TypeTime, value)
	}
	if veuo.mutation.EntryAtCleared() {
		_spec.ClearField(venueentry.FieldEntryAt, field.TypeTime)
	}
	if value, ok := veuo.mutation.LeavingAt(); ok {
		_spec.SetField(venueentry.FieldLeavingAt, field.TypeTime, value)
	}
	if veuo.mutation.LeavingAtCleared() {
		_spec.ClearField(venueentry.FieldLeavingAt, field.TypeTime)
	}
	if veuo.mutation.VenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.VenuesTable,
			Columns: []string{venueentry.VenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veuo.mutation.VenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.VenuesTable,
			Columns: []string{venueentry.VenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if veuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MembersTable,
			Columns: []string{venueentry.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MembersTable,
			Columns: []string{venueentry.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if veuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.UsersTable,
			Columns: []string{venueentry.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.UsersTable,
			Columns: []string{venueentry.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if veuo.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MemberProductsTable,
			Columns: []string{venueentry.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veuo.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MemberProductsTable,
			Columns: []string{venueentry.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(veuo.modifiers...)
	_node = &VenueEntry{config: veuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, veuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venueentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	veuo.mutation.done = true
	return _node, nil
}
