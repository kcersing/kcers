// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"kcers/biz/dal/db/mysql/ent/smslog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SmsLogUpdate is the builder for updating SmsLog entities.
type SmsLogUpdate struct {
	config
	hooks     []Hook
	mutation  *SmsLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SmsLogUpdate builder.
func (slu *SmsLogUpdate) Where(ps ...predicate.SmsLog) *SmsLogUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetUpdatedAt sets the "updated_at" field.
func (slu *SmsLogUpdate) SetUpdatedAt(t time.Time) *SmsLogUpdate {
	slu.mutation.SetUpdatedAt(t)
	return slu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (slu *SmsLogUpdate) ClearUpdatedAt() *SmsLogUpdate {
	slu.mutation.ClearUpdatedAt()
	return slu
}

// SetDelete sets the "delete" field.
func (slu *SmsLogUpdate) SetDelete(i int64) *SmsLogUpdate {
	slu.mutation.ResetDelete()
	slu.mutation.SetDelete(i)
	return slu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableDelete(i *int64) *SmsLogUpdate {
	if i != nil {
		slu.SetDelete(*i)
	}
	return slu
}

// AddDelete adds i to the "delete" field.
func (slu *SmsLogUpdate) AddDelete(i int64) *SmsLogUpdate {
	slu.mutation.AddDelete(i)
	return slu
}

// ClearDelete clears the value of the "delete" field.
func (slu *SmsLogUpdate) ClearDelete() *SmsLogUpdate {
	slu.mutation.ClearDelete()
	return slu
}

// SetCreatedID sets the "created_id" field.
func (slu *SmsLogUpdate) SetCreatedID(i int64) *SmsLogUpdate {
	slu.mutation.ResetCreatedID()
	slu.mutation.SetCreatedID(i)
	return slu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableCreatedID(i *int64) *SmsLogUpdate {
	if i != nil {
		slu.SetCreatedID(*i)
	}
	return slu
}

// AddCreatedID adds i to the "created_id" field.
func (slu *SmsLogUpdate) AddCreatedID(i int64) *SmsLogUpdate {
	slu.mutation.AddCreatedID(i)
	return slu
}

// ClearCreatedID clears the value of the "created_id" field.
func (slu *SmsLogUpdate) ClearCreatedID() *SmsLogUpdate {
	slu.mutation.ClearCreatedID()
	return slu
}

// SetStatus sets the "status" field.
func (slu *SmsLogUpdate) SetStatus(i int64) *SmsLogUpdate {
	slu.mutation.ResetStatus()
	slu.mutation.SetStatus(i)
	return slu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableStatus(i *int64) *SmsLogUpdate {
	if i != nil {
		slu.SetStatus(*i)
	}
	return slu
}

// AddStatus adds i to the "status" field.
func (slu *SmsLogUpdate) AddStatus(i int64) *SmsLogUpdate {
	slu.mutation.AddStatus(i)
	return slu
}

// ClearStatus clears the value of the "status" field.
func (slu *SmsLogUpdate) ClearStatus() *SmsLogUpdate {
	slu.mutation.ClearStatus()
	return slu
}

// SetMobile sets the "mobile" field.
func (slu *SmsLogUpdate) SetMobile(s string) *SmsLogUpdate {
	slu.mutation.SetMobile(s)
	return slu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableMobile(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetMobile(*s)
	}
	return slu
}

// SetBizID sets the "biz_id" field.
func (slu *SmsLogUpdate) SetBizID(s string) *SmsLogUpdate {
	slu.mutation.SetBizID(s)
	return slu
}

// SetNillableBizID sets the "biz_id" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableBizID(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetBizID(*s)
	}
	return slu
}

// SetCode sets the "code" field.
func (slu *SmsLogUpdate) SetCode(s string) *SmsLogUpdate {
	slu.mutation.SetCode(s)
	return slu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableCode(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetCode(*s)
	}
	return slu
}

// SetContent sets the "content" field.
func (slu *SmsLogUpdate) SetContent(s string) *SmsLogUpdate {
	slu.mutation.SetContent(s)
	return slu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableContent(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetContent(*s)
	}
	return slu
}

// SetNotifyType sets the "notify_type" field.
func (slu *SmsLogUpdate) SetNotifyType(i int64) *SmsLogUpdate {
	slu.mutation.ResetNotifyType()
	slu.mutation.SetNotifyType(i)
	return slu
}

// SetNillableNotifyType sets the "notify_type" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableNotifyType(i *int64) *SmsLogUpdate {
	if i != nil {
		slu.SetNotifyType(*i)
	}
	return slu
}

// AddNotifyType adds i to the "notify_type" field.
func (slu *SmsLogUpdate) AddNotifyType(i int64) *SmsLogUpdate {
	slu.mutation.AddNotifyType(i)
	return slu
}

// ClearNotifyType clears the value of the "notify_type" field.
func (slu *SmsLogUpdate) ClearNotifyType() *SmsLogUpdate {
	slu.mutation.ClearNotifyType()
	return slu
}

// SetTemplate sets the "template" field.
func (slu *SmsLogUpdate) SetTemplate(s string) *SmsLogUpdate {
	slu.mutation.SetTemplate(s)
	return slu
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableTemplate(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetTemplate(*s)
	}
	return slu
}

// Mutation returns the SmsLogMutation object of the builder.
func (slu *SmsLogUpdate) Mutation() *SmsLogMutation {
	return slu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SmsLogUpdate) Save(ctx context.Context) (int, error) {
	slu.defaults()
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SmsLogUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SmsLogUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SmsLogUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *SmsLogUpdate) defaults() {
	if _, ok := slu.mutation.UpdatedAt(); !ok && !slu.mutation.UpdatedAtCleared() {
		v := smslog.UpdateDefaultUpdatedAt()
		slu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (slu *SmsLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SmsLogUpdate {
	slu.modifiers = append(slu.modifiers, modifiers...)
	return slu
}

func (slu *SmsLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(smslog.Table, smslog.Columns, sqlgraph.NewFieldSpec(smslog.FieldID, field.TypeInt64))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if slu.mutation.CreatedAtCleared() {
		_spec.ClearField(smslog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := slu.mutation.UpdatedAt(); ok {
		_spec.SetField(smslog.FieldUpdatedAt, field.TypeTime, value)
	}
	if slu.mutation.UpdatedAtCleared() {
		_spec.ClearField(smslog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := slu.mutation.Delete(); ok {
		_spec.SetField(smslog.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := slu.mutation.AddedDelete(); ok {
		_spec.AddField(smslog.FieldDelete, field.TypeInt64, value)
	}
	if slu.mutation.DeleteCleared() {
		_spec.ClearField(smslog.FieldDelete, field.TypeInt64)
	}
	if value, ok := slu.mutation.CreatedID(); ok {
		_spec.SetField(smslog.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := slu.mutation.AddedCreatedID(); ok {
		_spec.AddField(smslog.FieldCreatedID, field.TypeInt64, value)
	}
	if slu.mutation.CreatedIDCleared() {
		_spec.ClearField(smslog.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := slu.mutation.Status(); ok {
		_spec.SetField(smslog.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := slu.mutation.AddedStatus(); ok {
		_spec.AddField(smslog.FieldStatus, field.TypeInt64, value)
	}
	if slu.mutation.StatusCleared() {
		_spec.ClearField(smslog.FieldStatus, field.TypeInt64)
	}
	if value, ok := slu.mutation.Mobile(); ok {
		_spec.SetField(smslog.FieldMobile, field.TypeString, value)
	}
	if value, ok := slu.mutation.BizID(); ok {
		_spec.SetField(smslog.FieldBizID, field.TypeString, value)
	}
	if value, ok := slu.mutation.Code(); ok {
		_spec.SetField(smslog.FieldCode, field.TypeString, value)
	}
	if value, ok := slu.mutation.Content(); ok {
		_spec.SetField(smslog.FieldContent, field.TypeString, value)
	}
	if value, ok := slu.mutation.NotifyType(); ok {
		_spec.SetField(smslog.FieldNotifyType, field.TypeInt64, value)
	}
	if value, ok := slu.mutation.AddedNotifyType(); ok {
		_spec.AddField(smslog.FieldNotifyType, field.TypeInt64, value)
	}
	if slu.mutation.NotifyTypeCleared() {
		_spec.ClearField(smslog.FieldNotifyType, field.TypeInt64)
	}
	if value, ok := slu.mutation.Template(); ok {
		_spec.SetField(smslog.FieldTemplate, field.TypeString, value)
	}
	_spec.AddModifiers(slu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// SmsLogUpdateOne is the builder for updating a single SmsLog entity.
type SmsLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SmsLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sluo *SmsLogUpdateOne) SetUpdatedAt(t time.Time) *SmsLogUpdateOne {
	sluo.mutation.SetUpdatedAt(t)
	return sluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sluo *SmsLogUpdateOne) ClearUpdatedAt() *SmsLogUpdateOne {
	sluo.mutation.ClearUpdatedAt()
	return sluo
}

// SetDelete sets the "delete" field.
func (sluo *SmsLogUpdateOne) SetDelete(i int64) *SmsLogUpdateOne {
	sluo.mutation.ResetDelete()
	sluo.mutation.SetDelete(i)
	return sluo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableDelete(i *int64) *SmsLogUpdateOne {
	if i != nil {
		sluo.SetDelete(*i)
	}
	return sluo
}

// AddDelete adds i to the "delete" field.
func (sluo *SmsLogUpdateOne) AddDelete(i int64) *SmsLogUpdateOne {
	sluo.mutation.AddDelete(i)
	return sluo
}

// ClearDelete clears the value of the "delete" field.
func (sluo *SmsLogUpdateOne) ClearDelete() *SmsLogUpdateOne {
	sluo.mutation.ClearDelete()
	return sluo
}

// SetCreatedID sets the "created_id" field.
func (sluo *SmsLogUpdateOne) SetCreatedID(i int64) *SmsLogUpdateOne {
	sluo.mutation.ResetCreatedID()
	sluo.mutation.SetCreatedID(i)
	return sluo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableCreatedID(i *int64) *SmsLogUpdateOne {
	if i != nil {
		sluo.SetCreatedID(*i)
	}
	return sluo
}

// AddCreatedID adds i to the "created_id" field.
func (sluo *SmsLogUpdateOne) AddCreatedID(i int64) *SmsLogUpdateOne {
	sluo.mutation.AddCreatedID(i)
	return sluo
}

// ClearCreatedID clears the value of the "created_id" field.
func (sluo *SmsLogUpdateOne) ClearCreatedID() *SmsLogUpdateOne {
	sluo.mutation.ClearCreatedID()
	return sluo
}

// SetStatus sets the "status" field.
func (sluo *SmsLogUpdateOne) SetStatus(i int64) *SmsLogUpdateOne {
	sluo.mutation.ResetStatus()
	sluo.mutation.SetStatus(i)
	return sluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableStatus(i *int64) *SmsLogUpdateOne {
	if i != nil {
		sluo.SetStatus(*i)
	}
	return sluo
}

// AddStatus adds i to the "status" field.
func (sluo *SmsLogUpdateOne) AddStatus(i int64) *SmsLogUpdateOne {
	sluo.mutation.AddStatus(i)
	return sluo
}

// ClearStatus clears the value of the "status" field.
func (sluo *SmsLogUpdateOne) ClearStatus() *SmsLogUpdateOne {
	sluo.mutation.ClearStatus()
	return sluo
}

// SetMobile sets the "mobile" field.
func (sluo *SmsLogUpdateOne) SetMobile(s string) *SmsLogUpdateOne {
	sluo.mutation.SetMobile(s)
	return sluo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableMobile(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetMobile(*s)
	}
	return sluo
}

// SetBizID sets the "biz_id" field.
func (sluo *SmsLogUpdateOne) SetBizID(s string) *SmsLogUpdateOne {
	sluo.mutation.SetBizID(s)
	return sluo
}

// SetNillableBizID sets the "biz_id" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableBizID(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetBizID(*s)
	}
	return sluo
}

// SetCode sets the "code" field.
func (sluo *SmsLogUpdateOne) SetCode(s string) *SmsLogUpdateOne {
	sluo.mutation.SetCode(s)
	return sluo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableCode(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetCode(*s)
	}
	return sluo
}

// SetContent sets the "content" field.
func (sluo *SmsLogUpdateOne) SetContent(s string) *SmsLogUpdateOne {
	sluo.mutation.SetContent(s)
	return sluo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableContent(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetContent(*s)
	}
	return sluo
}

// SetNotifyType sets the "notify_type" field.
func (sluo *SmsLogUpdateOne) SetNotifyType(i int64) *SmsLogUpdateOne {
	sluo.mutation.ResetNotifyType()
	sluo.mutation.SetNotifyType(i)
	return sluo
}

// SetNillableNotifyType sets the "notify_type" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableNotifyType(i *int64) *SmsLogUpdateOne {
	if i != nil {
		sluo.SetNotifyType(*i)
	}
	return sluo
}

// AddNotifyType adds i to the "notify_type" field.
func (sluo *SmsLogUpdateOne) AddNotifyType(i int64) *SmsLogUpdateOne {
	sluo.mutation.AddNotifyType(i)
	return sluo
}

// ClearNotifyType clears the value of the "notify_type" field.
func (sluo *SmsLogUpdateOne) ClearNotifyType() *SmsLogUpdateOne {
	sluo.mutation.ClearNotifyType()
	return sluo
}

// SetTemplate sets the "template" field.
func (sluo *SmsLogUpdateOne) SetTemplate(s string) *SmsLogUpdateOne {
	sluo.mutation.SetTemplate(s)
	return sluo
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableTemplate(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetTemplate(*s)
	}
	return sluo
}

// Mutation returns the SmsLogMutation object of the builder.
func (sluo *SmsLogUpdateOne) Mutation() *SmsLogMutation {
	return sluo.mutation
}

// Where appends a list predicates to the SmsLogUpdate builder.
func (sluo *SmsLogUpdateOne) Where(ps ...predicate.SmsLog) *SmsLogUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SmsLogUpdateOne) Select(field string, fields ...string) *SmsLogUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SmsLog entity.
func (sluo *SmsLogUpdateOne) Save(ctx context.Context) (*SmsLog, error) {
	sluo.defaults()
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SmsLogUpdateOne) SaveX(ctx context.Context) *SmsLog {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SmsLogUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SmsLogUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *SmsLogUpdateOne) defaults() {
	if _, ok := sluo.mutation.UpdatedAt(); !ok && !sluo.mutation.UpdatedAtCleared() {
		v := smslog.UpdateDefaultUpdatedAt()
		sluo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sluo *SmsLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SmsLogUpdateOne {
	sluo.modifiers = append(sluo.modifiers, modifiers...)
	return sluo
}

func (sluo *SmsLogUpdateOne) sqlSave(ctx context.Context) (_node *SmsLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(smslog.Table, smslog.Columns, sqlgraph.NewFieldSpec(smslog.FieldID, field.TypeInt64))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SmsLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smslog.FieldID)
		for _, f := range fields {
			if !smslog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != smslog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sluo.mutation.CreatedAtCleared() {
		_spec.ClearField(smslog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sluo.mutation.UpdatedAt(); ok {
		_spec.SetField(smslog.FieldUpdatedAt, field.TypeTime, value)
	}
	if sluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(smslog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sluo.mutation.Delete(); ok {
		_spec.SetField(smslog.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := sluo.mutation.AddedDelete(); ok {
		_spec.AddField(smslog.FieldDelete, field.TypeInt64, value)
	}
	if sluo.mutation.DeleteCleared() {
		_spec.ClearField(smslog.FieldDelete, field.TypeInt64)
	}
	if value, ok := sluo.mutation.CreatedID(); ok {
		_spec.SetField(smslog.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := sluo.mutation.AddedCreatedID(); ok {
		_spec.AddField(smslog.FieldCreatedID, field.TypeInt64, value)
	}
	if sluo.mutation.CreatedIDCleared() {
		_spec.ClearField(smslog.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := sluo.mutation.Status(); ok {
		_spec.SetField(smslog.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := sluo.mutation.AddedStatus(); ok {
		_spec.AddField(smslog.FieldStatus, field.TypeInt64, value)
	}
	if sluo.mutation.StatusCleared() {
		_spec.ClearField(smslog.FieldStatus, field.TypeInt64)
	}
	if value, ok := sluo.mutation.Mobile(); ok {
		_spec.SetField(smslog.FieldMobile, field.TypeString, value)
	}
	if value, ok := sluo.mutation.BizID(); ok {
		_spec.SetField(smslog.FieldBizID, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Code(); ok {
		_spec.SetField(smslog.FieldCode, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Content(); ok {
		_spec.SetField(smslog.FieldContent, field.TypeString, value)
	}
	if value, ok := sluo.mutation.NotifyType(); ok {
		_spec.SetField(smslog.FieldNotifyType, field.TypeInt64, value)
	}
	if value, ok := sluo.mutation.AddedNotifyType(); ok {
		_spec.AddField(smslog.FieldNotifyType, field.TypeInt64, value)
	}
	if sluo.mutation.NotifyTypeCleared() {
		_spec.ClearField(smslog.FieldNotifyType, field.TypeInt64)
	}
	if value, ok := sluo.mutation.Template(); ok {
		_spec.SetField(smslog.FieldTemplate, field.TypeString, value)
	}
	_spec.AddModifiers(sluo.modifiers...)
	_node = &SmsLog{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
