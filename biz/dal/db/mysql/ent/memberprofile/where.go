// Code generated by ent, DO NOT EDIT.

package memberprofile

import (
	"kcers/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldCreatedID, v))
}

// Intention applies equality check predicate on the "intention" field. It's identical to IntentionEQ.
func Intention(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldIntention, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldSource, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldMemberID, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldGender, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldBirthday, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldEmail, v))
}

// Wecom applies equality check predicate on the "wecom" field. It's identical to WecomEQ.
func Wecom(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldWecom, v))
}

// RelationMid applies equality check predicate on the "relation_mid" field. It's identical to RelationMidEQ.
func RelationMid(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldRelationMid, v))
}

// RelationMame applies equality check predicate on the "relation_mame" field. It's identical to RelationMameEQ.
func RelationMame(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldRelationMame, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldCreatedID))
}

// IntentionEQ applies the EQ predicate on the "intention" field.
func IntentionEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldIntention, v))
}

// IntentionNEQ applies the NEQ predicate on the "intention" field.
func IntentionNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldIntention, v))
}

// IntentionIn applies the In predicate on the "intention" field.
func IntentionIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldIntention, vs...))
}

// IntentionNotIn applies the NotIn predicate on the "intention" field.
func IntentionNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldIntention, vs...))
}

// IntentionGT applies the GT predicate on the "intention" field.
func IntentionGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldIntention, v))
}

// IntentionGTE applies the GTE predicate on the "intention" field.
func IntentionGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldIntention, v))
}

// IntentionLT applies the LT predicate on the "intention" field.
func IntentionLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldIntention, v))
}

// IntentionLTE applies the LTE predicate on the "intention" field.
func IntentionLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldIntention, v))
}

// IntentionIsNil applies the IsNil predicate on the "intention" field.
func IntentionIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldIntention))
}

// IntentionNotNil applies the NotNil predicate on the "intention" field.
func IntentionNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldIntention))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldSource))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldMemberID))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldGender))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldBirthday, v))
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldBirthday))
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldBirthday))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContainsFold(FieldEmail, v))
}

// WecomEQ applies the EQ predicate on the "wecom" field.
func WecomEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldWecom, v))
}

// WecomNEQ applies the NEQ predicate on the "wecom" field.
func WecomNEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldWecom, v))
}

// WecomIn applies the In predicate on the "wecom" field.
func WecomIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldWecom, vs...))
}

// WecomNotIn applies the NotIn predicate on the "wecom" field.
func WecomNotIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldWecom, vs...))
}

// WecomGT applies the GT predicate on the "wecom" field.
func WecomGT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldWecom, v))
}

// WecomGTE applies the GTE predicate on the "wecom" field.
func WecomGTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldWecom, v))
}

// WecomLT applies the LT predicate on the "wecom" field.
func WecomLT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldWecom, v))
}

// WecomLTE applies the LTE predicate on the "wecom" field.
func WecomLTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldWecom, v))
}

// WecomContains applies the Contains predicate on the "wecom" field.
func WecomContains(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContains(FieldWecom, v))
}

// WecomHasPrefix applies the HasPrefix predicate on the "wecom" field.
func WecomHasPrefix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasPrefix(FieldWecom, v))
}

// WecomHasSuffix applies the HasSuffix predicate on the "wecom" field.
func WecomHasSuffix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasSuffix(FieldWecom, v))
}

// WecomIsNil applies the IsNil predicate on the "wecom" field.
func WecomIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldWecom))
}

// WecomNotNil applies the NotNil predicate on the "wecom" field.
func WecomNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldWecom))
}

// WecomEqualFold applies the EqualFold predicate on the "wecom" field.
func WecomEqualFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEqualFold(FieldWecom, v))
}

// WecomContainsFold applies the ContainsFold predicate on the "wecom" field.
func WecomContainsFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContainsFold(FieldWecom, v))
}

// RelationMidEQ applies the EQ predicate on the "relation_mid" field.
func RelationMidEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldRelationMid, v))
}

// RelationMidNEQ applies the NEQ predicate on the "relation_mid" field.
func RelationMidNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldRelationMid, v))
}

// RelationMidIn applies the In predicate on the "relation_mid" field.
func RelationMidIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldRelationMid, vs...))
}

// RelationMidNotIn applies the NotIn predicate on the "relation_mid" field.
func RelationMidNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldRelationMid, vs...))
}

// RelationMidGT applies the GT predicate on the "relation_mid" field.
func RelationMidGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldRelationMid, v))
}

// RelationMidGTE applies the GTE predicate on the "relation_mid" field.
func RelationMidGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldRelationMid, v))
}

// RelationMidLT applies the LT predicate on the "relation_mid" field.
func RelationMidLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldRelationMid, v))
}

// RelationMidLTE applies the LTE predicate on the "relation_mid" field.
func RelationMidLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldRelationMid, v))
}

// RelationMidIsNil applies the IsNil predicate on the "relation_mid" field.
func RelationMidIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldRelationMid))
}

// RelationMidNotNil applies the NotNil predicate on the "relation_mid" field.
func RelationMidNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldRelationMid))
}

// RelationMameEQ applies the EQ predicate on the "relation_mame" field.
func RelationMameEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldRelationMame, v))
}

// RelationMameNEQ applies the NEQ predicate on the "relation_mame" field.
func RelationMameNEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldRelationMame, v))
}

// RelationMameIn applies the In predicate on the "relation_mame" field.
func RelationMameIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldRelationMame, vs...))
}

// RelationMameNotIn applies the NotIn predicate on the "relation_mame" field.
func RelationMameNotIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldRelationMame, vs...))
}

// RelationMameGT applies the GT predicate on the "relation_mame" field.
func RelationMameGT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldRelationMame, v))
}

// RelationMameGTE applies the GTE predicate on the "relation_mame" field.
func RelationMameGTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldRelationMame, v))
}

// RelationMameLT applies the LT predicate on the "relation_mame" field.
func RelationMameLT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldRelationMame, v))
}

// RelationMameLTE applies the LTE predicate on the "relation_mame" field.
func RelationMameLTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldRelationMame, v))
}

// RelationMameContains applies the Contains predicate on the "relation_mame" field.
func RelationMameContains(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContains(FieldRelationMame, v))
}

// RelationMameHasPrefix applies the HasPrefix predicate on the "relation_mame" field.
func RelationMameHasPrefix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasPrefix(FieldRelationMame, v))
}

// RelationMameHasSuffix applies the HasSuffix predicate on the "relation_mame" field.
func RelationMameHasSuffix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasSuffix(FieldRelationMame, v))
}

// RelationMameIsNil applies the IsNil predicate on the "relation_mame" field.
func RelationMameIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldRelationMame))
}

// RelationMameNotNil applies the NotNil predicate on the "relation_mame" field.
func RelationMameNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldRelationMame))
}

// RelationMameEqualFold applies the EqualFold predicate on the "relation_mame" field.
func RelationMameEqualFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEqualFold(FieldRelationMame, v))
}

// RelationMameContainsFold applies the ContainsFold predicate on the "relation_mame" field.
func RelationMameContainsFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContainsFold(FieldRelationMame, v))
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.MemberProfile {
	return predicate.MemberProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.MemberProfile {
	return predicate.MemberProfile(func(s *sql.Selector) {
		step := newMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberProfile) predicate.MemberProfile {
	return predicate.MemberProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberProfile) predicate.MemberProfile {
	return predicate.MemberProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberProfile) predicate.MemberProfile {
	return predicate.MemberProfile(sql.NotPredicates(p))
}
