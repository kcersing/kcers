// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/member"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"kcers/biz/dal/db/mysql/ent/venuemember"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueMemberUpdate is the builder for updating VenueMember entities.
type VenueMemberUpdate struct {
	config
	hooks     []Hook
	mutation  *VenueMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VenueMemberUpdate builder.
func (vmu *VenueMemberUpdate) Where(ps ...predicate.VenueMember) *VenueMemberUpdate {
	vmu.mutation.Where(ps...)
	return vmu
}

// SetUpdatedAt sets the "updated_at" field.
func (vmu *VenueMemberUpdate) SetUpdatedAt(t time.Time) *VenueMemberUpdate {
	vmu.mutation.SetUpdatedAt(t)
	return vmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vmu *VenueMemberUpdate) ClearUpdatedAt() *VenueMemberUpdate {
	vmu.mutation.ClearUpdatedAt()
	return vmu
}

// SetDelete sets the "delete" field.
func (vmu *VenueMemberUpdate) SetDelete(i int64) *VenueMemberUpdate {
	vmu.mutation.ResetDelete()
	vmu.mutation.SetDelete(i)
	return vmu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableDelete(i *int64) *VenueMemberUpdate {
	if i != nil {
		vmu.SetDelete(*i)
	}
	return vmu
}

// AddDelete adds i to the "delete" field.
func (vmu *VenueMemberUpdate) AddDelete(i int64) *VenueMemberUpdate {
	vmu.mutation.AddDelete(i)
	return vmu
}

// ClearDelete clears the value of the "delete" field.
func (vmu *VenueMemberUpdate) ClearDelete() *VenueMemberUpdate {
	vmu.mutation.ClearDelete()
	return vmu
}

// SetCreatedID sets the "created_id" field.
func (vmu *VenueMemberUpdate) SetCreatedID(i int64) *VenueMemberUpdate {
	vmu.mutation.ResetCreatedID()
	vmu.mutation.SetCreatedID(i)
	return vmu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableCreatedID(i *int64) *VenueMemberUpdate {
	if i != nil {
		vmu.SetCreatedID(*i)
	}
	return vmu
}

// AddCreatedID adds i to the "created_id" field.
func (vmu *VenueMemberUpdate) AddCreatedID(i int64) *VenueMemberUpdate {
	vmu.mutation.AddCreatedID(i)
	return vmu
}

// ClearCreatedID clears the value of the "created_id" field.
func (vmu *VenueMemberUpdate) ClearCreatedID() *VenueMemberUpdate {
	vmu.mutation.ClearCreatedID()
	return vmu
}

// SetMemberID sets the "member_id" field.
func (vmu *VenueMemberUpdate) SetMemberID(i int64) *VenueMemberUpdate {
	vmu.mutation.SetMemberID(i)
	return vmu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableMemberID(i *int64) *VenueMemberUpdate {
	if i != nil {
		vmu.SetMemberID(*i)
	}
	return vmu
}

// ClearMemberID clears the value of the "member_id" field.
func (vmu *VenueMemberUpdate) ClearMemberID() *VenueMemberUpdate {
	vmu.mutation.ClearMemberID()
	return vmu
}

// SetVenueID sets the "venue_id" field.
func (vmu *VenueMemberUpdate) SetVenueID(i int64) *VenueMemberUpdate {
	vmu.mutation.ResetVenueID()
	vmu.mutation.SetVenueID(i)
	return vmu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableVenueID(i *int64) *VenueMemberUpdate {
	if i != nil {
		vmu.SetVenueID(*i)
	}
	return vmu
}

// AddVenueID adds i to the "venue_id" field.
func (vmu *VenueMemberUpdate) AddVenueID(i int64) *VenueMemberUpdate {
	vmu.mutation.AddVenueID(i)
	return vmu
}

// ClearVenueID clears the value of the "venue_id" field.
func (vmu *VenueMemberUpdate) ClearVenueID() *VenueMemberUpdate {
	vmu.mutation.ClearVenueID()
	return vmu
}

// SetMoneySum sets the "money_sum" field.
func (vmu *VenueMemberUpdate) SetMoneySum(f float64) *VenueMemberUpdate {
	vmu.mutation.ResetMoneySum()
	vmu.mutation.SetMoneySum(f)
	return vmu
}

// SetNillableMoneySum sets the "money_sum" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableMoneySum(f *float64) *VenueMemberUpdate {
	if f != nil {
		vmu.SetMoneySum(*f)
	}
	return vmu
}

// AddMoneySum adds f to the "money_sum" field.
func (vmu *VenueMemberUpdate) AddMoneySum(f float64) *VenueMemberUpdate {
	vmu.mutation.AddMoneySum(f)
	return vmu
}

// ClearMoneySum clears the value of the "money_sum" field.
func (vmu *VenueMemberUpdate) ClearMoneySum() *VenueMemberUpdate {
	vmu.mutation.ClearMoneySum()
	return vmu
}

// SetProductID sets the "product_id" field.
func (vmu *VenueMemberUpdate) SetProductID(i int64) *VenueMemberUpdate {
	vmu.mutation.ResetProductID()
	vmu.mutation.SetProductID(i)
	return vmu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableProductID(i *int64) *VenueMemberUpdate {
	if i != nil {
		vmu.SetProductID(*i)
	}
	return vmu
}

// AddProductID adds i to the "product_id" field.
func (vmu *VenueMemberUpdate) AddProductID(i int64) *VenueMemberUpdate {
	vmu.mutation.AddProductID(i)
	return vmu
}

// ClearProductID clears the value of the "product_id" field.
func (vmu *VenueMemberUpdate) ClearProductID() *VenueMemberUpdate {
	vmu.mutation.ClearProductID()
	return vmu
}

// SetProductName sets the "product_name" field.
func (vmu *VenueMemberUpdate) SetProductName(s string) *VenueMemberUpdate {
	vmu.mutation.SetProductName(s)
	return vmu
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableProductName(s *string) *VenueMemberUpdate {
	if s != nil {
		vmu.SetProductName(*s)
	}
	return vmu
}

// ClearProductName clears the value of the "product_name" field.
func (vmu *VenueMemberUpdate) ClearProductName() *VenueMemberUpdate {
	vmu.mutation.ClearProductName()
	return vmu
}

// SetEntrySum sets the "entry_sum" field.
func (vmu *VenueMemberUpdate) SetEntrySum(i int64) *VenueMemberUpdate {
	vmu.mutation.ResetEntrySum()
	vmu.mutation.SetEntrySum(i)
	return vmu
}

// SetNillableEntrySum sets the "entry_sum" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableEntrySum(i *int64) *VenueMemberUpdate {
	if i != nil {
		vmu.SetEntrySum(*i)
	}
	return vmu
}

// AddEntrySum adds i to the "entry_sum" field.
func (vmu *VenueMemberUpdate) AddEntrySum(i int64) *VenueMemberUpdate {
	vmu.mutation.AddEntrySum(i)
	return vmu
}

// ClearEntrySum clears the value of the "entry_sum" field.
func (vmu *VenueMemberUpdate) ClearEntrySum() *VenueMemberUpdate {
	vmu.mutation.ClearEntrySum()
	return vmu
}

// SetEntryLastAt sets the "entry_last_at" field.
func (vmu *VenueMemberUpdate) SetEntryLastAt(t time.Time) *VenueMemberUpdate {
	vmu.mutation.SetEntryLastAt(t)
	return vmu
}

// SetNillableEntryLastAt sets the "entry_last_at" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableEntryLastAt(t *time.Time) *VenueMemberUpdate {
	if t != nil {
		vmu.SetEntryLastAt(*t)
	}
	return vmu
}

// ClearEntryLastAt clears the value of the "entry_last_at" field.
func (vmu *VenueMemberUpdate) ClearEntryLastAt() *VenueMemberUpdate {
	vmu.mutation.ClearEntryLastAt()
	return vmu
}

// SetEntryDeadlineAt sets the "entry_deadline_at" field.
func (vmu *VenueMemberUpdate) SetEntryDeadlineAt(t time.Time) *VenueMemberUpdate {
	vmu.mutation.SetEntryDeadlineAt(t)
	return vmu
}

// SetNillableEntryDeadlineAt sets the "entry_deadline_at" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableEntryDeadlineAt(t *time.Time) *VenueMemberUpdate {
	if t != nil {
		vmu.SetEntryDeadlineAt(*t)
	}
	return vmu
}

// ClearEntryDeadlineAt clears the value of the "entry_deadline_at" field.
func (vmu *VenueMemberUpdate) ClearEntryDeadlineAt() *VenueMemberUpdate {
	vmu.mutation.ClearEntryDeadlineAt()
	return vmu
}

// SetClassLastAt sets the "class_last_at" field.
func (vmu *VenueMemberUpdate) SetClassLastAt(t time.Time) *VenueMemberUpdate {
	vmu.mutation.SetClassLastAt(t)
	return vmu
}

// SetNillableClassLastAt sets the "class_last_at" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableClassLastAt(t *time.Time) *VenueMemberUpdate {
	if t != nil {
		vmu.SetClassLastAt(*t)
	}
	return vmu
}

// ClearClassLastAt clears the value of the "class_last_at" field.
func (vmu *VenueMemberUpdate) ClearClassLastAt() *VenueMemberUpdate {
	vmu.mutation.ClearClassLastAt()
	return vmu
}

// SetRelationUID sets the "relation_uid" field.
func (vmu *VenueMemberUpdate) SetRelationUID(i int64) *VenueMemberUpdate {
	vmu.mutation.ResetRelationUID()
	vmu.mutation.SetRelationUID(i)
	return vmu
}

// SetNillableRelationUID sets the "relation_uid" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableRelationUID(i *int64) *VenueMemberUpdate {
	if i != nil {
		vmu.SetRelationUID(*i)
	}
	return vmu
}

// AddRelationUID adds i to the "relation_uid" field.
func (vmu *VenueMemberUpdate) AddRelationUID(i int64) *VenueMemberUpdate {
	vmu.mutation.AddRelationUID(i)
	return vmu
}

// ClearRelationUID clears the value of the "relation_uid" field.
func (vmu *VenueMemberUpdate) ClearRelationUID() *VenueMemberUpdate {
	vmu.mutation.ClearRelationUID()
	return vmu
}

// SetRelationUname sets the "relation_uname" field.
func (vmu *VenueMemberUpdate) SetRelationUname(s string) *VenueMemberUpdate {
	vmu.mutation.SetRelationUname(s)
	return vmu
}

// SetNillableRelationUname sets the "relation_uname" field if the given value is not nil.
func (vmu *VenueMemberUpdate) SetNillableRelationUname(s *string) *VenueMemberUpdate {
	if s != nil {
		vmu.SetRelationUname(*s)
	}
	return vmu
}

// ClearRelationUname clears the value of the "relation_uname" field.
func (vmu *VenueMemberUpdate) ClearRelationUname() *VenueMemberUpdate {
	vmu.mutation.ClearRelationUname()
	return vmu
}

// SetMember sets the "member" edge to the Member entity.
func (vmu *VenueMemberUpdate) SetMember(m *Member) *VenueMemberUpdate {
	return vmu.SetMemberID(m.ID)
}

// Mutation returns the VenueMemberMutation object of the builder.
func (vmu *VenueMemberUpdate) Mutation() *VenueMemberMutation {
	return vmu.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (vmu *VenueMemberUpdate) ClearMember() *VenueMemberUpdate {
	vmu.mutation.ClearMember()
	return vmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmu *VenueMemberUpdate) Save(ctx context.Context) (int, error) {
	vmu.defaults()
	return withHooks(ctx, vmu.sqlSave, vmu.mutation, vmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmu *VenueMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := vmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmu *VenueMemberUpdate) Exec(ctx context.Context) error {
	_, err := vmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmu *VenueMemberUpdate) ExecX(ctx context.Context) {
	if err := vmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmu *VenueMemberUpdate) defaults() {
	if _, ok := vmu.mutation.UpdatedAt(); !ok && !vmu.mutation.UpdatedAtCleared() {
		v := venuemember.UpdateDefaultUpdatedAt()
		vmu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vmu *VenueMemberUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VenueMemberUpdate {
	vmu.modifiers = append(vmu.modifiers, modifiers...)
	return vmu
}

func (vmu *VenueMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(venuemember.Table, venuemember.Columns, sqlgraph.NewFieldSpec(venuemember.FieldID, field.TypeInt64))
	if ps := vmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vmu.mutation.CreatedAtCleared() {
		_spec.ClearField(venuemember.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vmu.mutation.UpdatedAt(); ok {
		_spec.SetField(venuemember.FieldUpdatedAt, field.TypeTime, value)
	}
	if vmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(venuemember.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := vmu.mutation.Delete(); ok {
		_spec.SetField(venuemember.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := vmu.mutation.AddedDelete(); ok {
		_spec.AddField(venuemember.FieldDelete, field.TypeInt64, value)
	}
	if vmu.mutation.DeleteCleared() {
		_spec.ClearField(venuemember.FieldDelete, field.TypeInt64)
	}
	if value, ok := vmu.mutation.CreatedID(); ok {
		_spec.SetField(venuemember.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := vmu.mutation.AddedCreatedID(); ok {
		_spec.AddField(venuemember.FieldCreatedID, field.TypeInt64, value)
	}
	if vmu.mutation.CreatedIDCleared() {
		_spec.ClearField(venuemember.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := vmu.mutation.VenueID(); ok {
		_spec.SetField(venuemember.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := vmu.mutation.AddedVenueID(); ok {
		_spec.AddField(venuemember.FieldVenueID, field.TypeInt64, value)
	}
	if vmu.mutation.VenueIDCleared() {
		_spec.ClearField(venuemember.FieldVenueID, field.TypeInt64)
	}
	if value, ok := vmu.mutation.MoneySum(); ok {
		_spec.SetField(venuemember.FieldMoneySum, field.TypeFloat64, value)
	}
	if value, ok := vmu.mutation.AddedMoneySum(); ok {
		_spec.AddField(venuemember.FieldMoneySum, field.TypeFloat64, value)
	}
	if vmu.mutation.MoneySumCleared() {
		_spec.ClearField(venuemember.FieldMoneySum, field.TypeFloat64)
	}
	if value, ok := vmu.mutation.ProductID(); ok {
		_spec.SetField(venuemember.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := vmu.mutation.AddedProductID(); ok {
		_spec.AddField(venuemember.FieldProductID, field.TypeInt64, value)
	}
	if vmu.mutation.ProductIDCleared() {
		_spec.ClearField(venuemember.FieldProductID, field.TypeInt64)
	}
	if value, ok := vmu.mutation.ProductName(); ok {
		_spec.SetField(venuemember.FieldProductName, field.TypeString, value)
	}
	if vmu.mutation.ProductNameCleared() {
		_spec.ClearField(venuemember.FieldProductName, field.TypeString)
	}
	if value, ok := vmu.mutation.EntrySum(); ok {
		_spec.SetField(venuemember.FieldEntrySum, field.TypeInt64, value)
	}
	if value, ok := vmu.mutation.AddedEntrySum(); ok {
		_spec.AddField(venuemember.FieldEntrySum, field.TypeInt64, value)
	}
	if vmu.mutation.EntrySumCleared() {
		_spec.ClearField(venuemember.FieldEntrySum, field.TypeInt64)
	}
	if value, ok := vmu.mutation.EntryLastAt(); ok {
		_spec.SetField(venuemember.FieldEntryLastAt, field.TypeTime, value)
	}
	if vmu.mutation.EntryLastAtCleared() {
		_spec.ClearField(venuemember.FieldEntryLastAt, field.TypeTime)
	}
	if value, ok := vmu.mutation.EntryDeadlineAt(); ok {
		_spec.SetField(venuemember.FieldEntryDeadlineAt, field.TypeTime, value)
	}
	if vmu.mutation.EntryDeadlineAtCleared() {
		_spec.ClearField(venuemember.FieldEntryDeadlineAt, field.TypeTime)
	}
	if value, ok := vmu.mutation.ClassLastAt(); ok {
		_spec.SetField(venuemember.FieldClassLastAt, field.TypeTime, value)
	}
	if vmu.mutation.ClassLastAtCleared() {
		_spec.ClearField(venuemember.FieldClassLastAt, field.TypeTime)
	}
	if value, ok := vmu.mutation.RelationUID(); ok {
		_spec.SetField(venuemember.FieldRelationUID, field.TypeInt64, value)
	}
	if value, ok := vmu.mutation.AddedRelationUID(); ok {
		_spec.AddField(venuemember.FieldRelationUID, field.TypeInt64, value)
	}
	if vmu.mutation.RelationUIDCleared() {
		_spec.ClearField(venuemember.FieldRelationUID, field.TypeInt64)
	}
	if value, ok := vmu.mutation.RelationUname(); ok {
		_spec.SetField(venuemember.FieldRelationUname, field.TypeString, value)
	}
	if vmu.mutation.RelationUnameCleared() {
		_spec.ClearField(venuemember.FieldRelationUname, field.TypeString)
	}
	if vmu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuemember.MemberTable,
			Columns: []string{venuemember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuemember.MemberTable,
			Columns: []string{venuemember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venuemember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vmu.mutation.done = true
	return n, nil
}

// VenueMemberUpdateOne is the builder for updating a single VenueMember entity.
type VenueMemberUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VenueMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vmuo *VenueMemberUpdateOne) SetUpdatedAt(t time.Time) *VenueMemberUpdateOne {
	vmuo.mutation.SetUpdatedAt(t)
	return vmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vmuo *VenueMemberUpdateOne) ClearUpdatedAt() *VenueMemberUpdateOne {
	vmuo.mutation.ClearUpdatedAt()
	return vmuo
}

// SetDelete sets the "delete" field.
func (vmuo *VenueMemberUpdateOne) SetDelete(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.ResetDelete()
	vmuo.mutation.SetDelete(i)
	return vmuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableDelete(i *int64) *VenueMemberUpdateOne {
	if i != nil {
		vmuo.SetDelete(*i)
	}
	return vmuo
}

// AddDelete adds i to the "delete" field.
func (vmuo *VenueMemberUpdateOne) AddDelete(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.AddDelete(i)
	return vmuo
}

// ClearDelete clears the value of the "delete" field.
func (vmuo *VenueMemberUpdateOne) ClearDelete() *VenueMemberUpdateOne {
	vmuo.mutation.ClearDelete()
	return vmuo
}

// SetCreatedID sets the "created_id" field.
func (vmuo *VenueMemberUpdateOne) SetCreatedID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.ResetCreatedID()
	vmuo.mutation.SetCreatedID(i)
	return vmuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableCreatedID(i *int64) *VenueMemberUpdateOne {
	if i != nil {
		vmuo.SetCreatedID(*i)
	}
	return vmuo
}

// AddCreatedID adds i to the "created_id" field.
func (vmuo *VenueMemberUpdateOne) AddCreatedID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.AddCreatedID(i)
	return vmuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (vmuo *VenueMemberUpdateOne) ClearCreatedID() *VenueMemberUpdateOne {
	vmuo.mutation.ClearCreatedID()
	return vmuo
}

// SetMemberID sets the "member_id" field.
func (vmuo *VenueMemberUpdateOne) SetMemberID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.SetMemberID(i)
	return vmuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableMemberID(i *int64) *VenueMemberUpdateOne {
	if i != nil {
		vmuo.SetMemberID(*i)
	}
	return vmuo
}

// ClearMemberID clears the value of the "member_id" field.
func (vmuo *VenueMemberUpdateOne) ClearMemberID() *VenueMemberUpdateOne {
	vmuo.mutation.ClearMemberID()
	return vmuo
}

// SetVenueID sets the "venue_id" field.
func (vmuo *VenueMemberUpdateOne) SetVenueID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.ResetVenueID()
	vmuo.mutation.SetVenueID(i)
	return vmuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableVenueID(i *int64) *VenueMemberUpdateOne {
	if i != nil {
		vmuo.SetVenueID(*i)
	}
	return vmuo
}

// AddVenueID adds i to the "venue_id" field.
func (vmuo *VenueMemberUpdateOne) AddVenueID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.AddVenueID(i)
	return vmuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (vmuo *VenueMemberUpdateOne) ClearVenueID() *VenueMemberUpdateOne {
	vmuo.mutation.ClearVenueID()
	return vmuo
}

// SetMoneySum sets the "money_sum" field.
func (vmuo *VenueMemberUpdateOne) SetMoneySum(f float64) *VenueMemberUpdateOne {
	vmuo.mutation.ResetMoneySum()
	vmuo.mutation.SetMoneySum(f)
	return vmuo
}

// SetNillableMoneySum sets the "money_sum" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableMoneySum(f *float64) *VenueMemberUpdateOne {
	if f != nil {
		vmuo.SetMoneySum(*f)
	}
	return vmuo
}

// AddMoneySum adds f to the "money_sum" field.
func (vmuo *VenueMemberUpdateOne) AddMoneySum(f float64) *VenueMemberUpdateOne {
	vmuo.mutation.AddMoneySum(f)
	return vmuo
}

// ClearMoneySum clears the value of the "money_sum" field.
func (vmuo *VenueMemberUpdateOne) ClearMoneySum() *VenueMemberUpdateOne {
	vmuo.mutation.ClearMoneySum()
	return vmuo
}

// SetProductID sets the "product_id" field.
func (vmuo *VenueMemberUpdateOne) SetProductID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.ResetProductID()
	vmuo.mutation.SetProductID(i)
	return vmuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableProductID(i *int64) *VenueMemberUpdateOne {
	if i != nil {
		vmuo.SetProductID(*i)
	}
	return vmuo
}

// AddProductID adds i to the "product_id" field.
func (vmuo *VenueMemberUpdateOne) AddProductID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.AddProductID(i)
	return vmuo
}

// ClearProductID clears the value of the "product_id" field.
func (vmuo *VenueMemberUpdateOne) ClearProductID() *VenueMemberUpdateOne {
	vmuo.mutation.ClearProductID()
	return vmuo
}

// SetProductName sets the "product_name" field.
func (vmuo *VenueMemberUpdateOne) SetProductName(s string) *VenueMemberUpdateOne {
	vmuo.mutation.SetProductName(s)
	return vmuo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableProductName(s *string) *VenueMemberUpdateOne {
	if s != nil {
		vmuo.SetProductName(*s)
	}
	return vmuo
}

// ClearProductName clears the value of the "product_name" field.
func (vmuo *VenueMemberUpdateOne) ClearProductName() *VenueMemberUpdateOne {
	vmuo.mutation.ClearProductName()
	return vmuo
}

// SetEntrySum sets the "entry_sum" field.
func (vmuo *VenueMemberUpdateOne) SetEntrySum(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.ResetEntrySum()
	vmuo.mutation.SetEntrySum(i)
	return vmuo
}

// SetNillableEntrySum sets the "entry_sum" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableEntrySum(i *int64) *VenueMemberUpdateOne {
	if i != nil {
		vmuo.SetEntrySum(*i)
	}
	return vmuo
}

// AddEntrySum adds i to the "entry_sum" field.
func (vmuo *VenueMemberUpdateOne) AddEntrySum(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.AddEntrySum(i)
	return vmuo
}

// ClearEntrySum clears the value of the "entry_sum" field.
func (vmuo *VenueMemberUpdateOne) ClearEntrySum() *VenueMemberUpdateOne {
	vmuo.mutation.ClearEntrySum()
	return vmuo
}

// SetEntryLastAt sets the "entry_last_at" field.
func (vmuo *VenueMemberUpdateOne) SetEntryLastAt(t time.Time) *VenueMemberUpdateOne {
	vmuo.mutation.SetEntryLastAt(t)
	return vmuo
}

// SetNillableEntryLastAt sets the "entry_last_at" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableEntryLastAt(t *time.Time) *VenueMemberUpdateOne {
	if t != nil {
		vmuo.SetEntryLastAt(*t)
	}
	return vmuo
}

// ClearEntryLastAt clears the value of the "entry_last_at" field.
func (vmuo *VenueMemberUpdateOne) ClearEntryLastAt() *VenueMemberUpdateOne {
	vmuo.mutation.ClearEntryLastAt()
	return vmuo
}

// SetEntryDeadlineAt sets the "entry_deadline_at" field.
func (vmuo *VenueMemberUpdateOne) SetEntryDeadlineAt(t time.Time) *VenueMemberUpdateOne {
	vmuo.mutation.SetEntryDeadlineAt(t)
	return vmuo
}

// SetNillableEntryDeadlineAt sets the "entry_deadline_at" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableEntryDeadlineAt(t *time.Time) *VenueMemberUpdateOne {
	if t != nil {
		vmuo.SetEntryDeadlineAt(*t)
	}
	return vmuo
}

// ClearEntryDeadlineAt clears the value of the "entry_deadline_at" field.
func (vmuo *VenueMemberUpdateOne) ClearEntryDeadlineAt() *VenueMemberUpdateOne {
	vmuo.mutation.ClearEntryDeadlineAt()
	return vmuo
}

// SetClassLastAt sets the "class_last_at" field.
func (vmuo *VenueMemberUpdateOne) SetClassLastAt(t time.Time) *VenueMemberUpdateOne {
	vmuo.mutation.SetClassLastAt(t)
	return vmuo
}

// SetNillableClassLastAt sets the "class_last_at" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableClassLastAt(t *time.Time) *VenueMemberUpdateOne {
	if t != nil {
		vmuo.SetClassLastAt(*t)
	}
	return vmuo
}

// ClearClassLastAt clears the value of the "class_last_at" field.
func (vmuo *VenueMemberUpdateOne) ClearClassLastAt() *VenueMemberUpdateOne {
	vmuo.mutation.ClearClassLastAt()
	return vmuo
}

// SetRelationUID sets the "relation_uid" field.
func (vmuo *VenueMemberUpdateOne) SetRelationUID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.ResetRelationUID()
	vmuo.mutation.SetRelationUID(i)
	return vmuo
}

// SetNillableRelationUID sets the "relation_uid" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableRelationUID(i *int64) *VenueMemberUpdateOne {
	if i != nil {
		vmuo.SetRelationUID(*i)
	}
	return vmuo
}

// AddRelationUID adds i to the "relation_uid" field.
func (vmuo *VenueMemberUpdateOne) AddRelationUID(i int64) *VenueMemberUpdateOne {
	vmuo.mutation.AddRelationUID(i)
	return vmuo
}

// ClearRelationUID clears the value of the "relation_uid" field.
func (vmuo *VenueMemberUpdateOne) ClearRelationUID() *VenueMemberUpdateOne {
	vmuo.mutation.ClearRelationUID()
	return vmuo
}

// SetRelationUname sets the "relation_uname" field.
func (vmuo *VenueMemberUpdateOne) SetRelationUname(s string) *VenueMemberUpdateOne {
	vmuo.mutation.SetRelationUname(s)
	return vmuo
}

// SetNillableRelationUname sets the "relation_uname" field if the given value is not nil.
func (vmuo *VenueMemberUpdateOne) SetNillableRelationUname(s *string) *VenueMemberUpdateOne {
	if s != nil {
		vmuo.SetRelationUname(*s)
	}
	return vmuo
}

// ClearRelationUname clears the value of the "relation_uname" field.
func (vmuo *VenueMemberUpdateOne) ClearRelationUname() *VenueMemberUpdateOne {
	vmuo.mutation.ClearRelationUname()
	return vmuo
}

// SetMember sets the "member" edge to the Member entity.
func (vmuo *VenueMemberUpdateOne) SetMember(m *Member) *VenueMemberUpdateOne {
	return vmuo.SetMemberID(m.ID)
}

// Mutation returns the VenueMemberMutation object of the builder.
func (vmuo *VenueMemberUpdateOne) Mutation() *VenueMemberMutation {
	return vmuo.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (vmuo *VenueMemberUpdateOne) ClearMember() *VenueMemberUpdateOne {
	vmuo.mutation.ClearMember()
	return vmuo
}

// Where appends a list predicates to the VenueMemberUpdate builder.
func (vmuo *VenueMemberUpdateOne) Where(ps ...predicate.VenueMember) *VenueMemberUpdateOne {
	vmuo.mutation.Where(ps...)
	return vmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmuo *VenueMemberUpdateOne) Select(field string, fields ...string) *VenueMemberUpdateOne {
	vmuo.fields = append([]string{field}, fields...)
	return vmuo
}

// Save executes the query and returns the updated VenueMember entity.
func (vmuo *VenueMemberUpdateOne) Save(ctx context.Context) (*VenueMember, error) {
	vmuo.defaults()
	return withHooks(ctx, vmuo.sqlSave, vmuo.mutation, vmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmuo *VenueMemberUpdateOne) SaveX(ctx context.Context) *VenueMember {
	node, err := vmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmuo *VenueMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := vmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmuo *VenueMemberUpdateOne) ExecX(ctx context.Context) {
	if err := vmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmuo *VenueMemberUpdateOne) defaults() {
	if _, ok := vmuo.mutation.UpdatedAt(); !ok && !vmuo.mutation.UpdatedAtCleared() {
		v := venuemember.UpdateDefaultUpdatedAt()
		vmuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vmuo *VenueMemberUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VenueMemberUpdateOne {
	vmuo.modifiers = append(vmuo.modifiers, modifiers...)
	return vmuo
}

func (vmuo *VenueMemberUpdateOne) sqlSave(ctx context.Context) (_node *VenueMember, err error) {
	_spec := sqlgraph.NewUpdateSpec(venuemember.Table, venuemember.Columns, sqlgraph.NewFieldSpec(venuemember.FieldID, field.TypeInt64))
	id, ok := vmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VenueMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venuemember.FieldID)
		for _, f := range fields {
			if !venuemember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != venuemember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(venuemember.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(venuemember.FieldUpdatedAt, field.TypeTime, value)
	}
	if vmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(venuemember.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := vmuo.mutation.Delete(); ok {
		_spec.SetField(venuemember.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := vmuo.mutation.AddedDelete(); ok {
		_spec.AddField(venuemember.FieldDelete, field.TypeInt64, value)
	}
	if vmuo.mutation.DeleteCleared() {
		_spec.ClearField(venuemember.FieldDelete, field.TypeInt64)
	}
	if value, ok := vmuo.mutation.CreatedID(); ok {
		_spec.SetField(venuemember.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := vmuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(venuemember.FieldCreatedID, field.TypeInt64, value)
	}
	if vmuo.mutation.CreatedIDCleared() {
		_spec.ClearField(venuemember.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := vmuo.mutation.VenueID(); ok {
		_spec.SetField(venuemember.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := vmuo.mutation.AddedVenueID(); ok {
		_spec.AddField(venuemember.FieldVenueID, field.TypeInt64, value)
	}
	if vmuo.mutation.VenueIDCleared() {
		_spec.ClearField(venuemember.FieldVenueID, field.TypeInt64)
	}
	if value, ok := vmuo.mutation.MoneySum(); ok {
		_spec.SetField(venuemember.FieldMoneySum, field.TypeFloat64, value)
	}
	if value, ok := vmuo.mutation.AddedMoneySum(); ok {
		_spec.AddField(venuemember.FieldMoneySum, field.TypeFloat64, value)
	}
	if vmuo.mutation.MoneySumCleared() {
		_spec.ClearField(venuemember.FieldMoneySum, field.TypeFloat64)
	}
	if value, ok := vmuo.mutation.ProductID(); ok {
		_spec.SetField(venuemember.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := vmuo.mutation.AddedProductID(); ok {
		_spec.AddField(venuemember.FieldProductID, field.TypeInt64, value)
	}
	if vmuo.mutation.ProductIDCleared() {
		_spec.ClearField(venuemember.FieldProductID, field.TypeInt64)
	}
	if value, ok := vmuo.mutation.ProductName(); ok {
		_spec.SetField(venuemember.FieldProductName, field.TypeString, value)
	}
	if vmuo.mutation.ProductNameCleared() {
		_spec.ClearField(venuemember.FieldProductName, field.TypeString)
	}
	if value, ok := vmuo.mutation.EntrySum(); ok {
		_spec.SetField(venuemember.FieldEntrySum, field.TypeInt64, value)
	}
	if value, ok := vmuo.mutation.AddedEntrySum(); ok {
		_spec.AddField(venuemember.FieldEntrySum, field.TypeInt64, value)
	}
	if vmuo.mutation.EntrySumCleared() {
		_spec.ClearField(venuemember.FieldEntrySum, field.TypeInt64)
	}
	if value, ok := vmuo.mutation.EntryLastAt(); ok {
		_spec.SetField(venuemember.FieldEntryLastAt, field.TypeTime, value)
	}
	if vmuo.mutation.EntryLastAtCleared() {
		_spec.ClearField(venuemember.FieldEntryLastAt, field.TypeTime)
	}
	if value, ok := vmuo.mutation.EntryDeadlineAt(); ok {
		_spec.SetField(venuemember.FieldEntryDeadlineAt, field.TypeTime, value)
	}
	if vmuo.mutation.EntryDeadlineAtCleared() {
		_spec.ClearField(venuemember.FieldEntryDeadlineAt, field.TypeTime)
	}
	if value, ok := vmuo.mutation.ClassLastAt(); ok {
		_spec.SetField(venuemember.FieldClassLastAt, field.TypeTime, value)
	}
	if vmuo.mutation.ClassLastAtCleared() {
		_spec.ClearField(venuemember.FieldClassLastAt, field.TypeTime)
	}
	if value, ok := vmuo.mutation.RelationUID(); ok {
		_spec.SetField(venuemember.FieldRelationUID, field.TypeInt64, value)
	}
	if value, ok := vmuo.mutation.AddedRelationUID(); ok {
		_spec.AddField(venuemember.FieldRelationUID, field.TypeInt64, value)
	}
	if vmuo.mutation.RelationUIDCleared() {
		_spec.ClearField(venuemember.FieldRelationUID, field.TypeInt64)
	}
	if value, ok := vmuo.mutation.RelationUname(); ok {
		_spec.SetField(venuemember.FieldRelationUname, field.TypeString, value)
	}
	if vmuo.mutation.RelationUnameCleared() {
		_spec.ClearField(venuemember.FieldRelationUname, field.TypeString)
	}
	if vmuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuemember.MemberTable,
			Columns: []string{venuemember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuemember.MemberTable,
			Columns: []string{venuemember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vmuo.modifiers...)
	_node = &VenueMember{config: vmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venuemember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vmuo.mutation.done = true
	return _node, nil
}
