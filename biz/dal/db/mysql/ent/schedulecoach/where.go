// Code generated by ent, DO NOT EDIT.

package schedulecoach

import (
	"kcers/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldCreatedID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldStatus, v))
}

// VenueID applies equality check predicate on the "venue_id" field. It's identical to VenueIDEQ.
func VenueID(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldVenueID, v))
}

// CoachID applies equality check predicate on the "coach_id" field. It's identical to CoachIDEQ.
func CoachID(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldCoachID, v))
}

// ScheduleID applies equality check predicate on the "schedule_id" field. It's identical to ScheduleIDEQ.
func ScheduleID(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldScheduleID, v))
}

// ScheduleName applies equality check predicate on the "schedule_name" field. It's identical to ScheduleNameEQ.
func ScheduleName(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldScheduleName, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldProductID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldType, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldDate, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldEndAt, v))
}

// SignStartAt applies equality check predicate on the "sign_start_at" field. It's identical to SignStartAtEQ.
func SignStartAt(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldSignStartAt, v))
}

// SignEndAt applies equality check predicate on the "sign_end_at" field. It's identical to SignEndAtEQ.
func SignEndAt(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldSignEndAt, v))
}

// CoachName applies equality check predicate on the "coach_name" field. It's identical to CoachNameEQ.
func CoachName(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldCoachName, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldCreatedID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldStatus))
}

// VenueIDEQ applies the EQ predicate on the "venue_id" field.
func VenueIDEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldVenueID, v))
}

// VenueIDNEQ applies the NEQ predicate on the "venue_id" field.
func VenueIDNEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldVenueID, v))
}

// VenueIDIn applies the In predicate on the "venue_id" field.
func VenueIDIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldVenueID, vs...))
}

// VenueIDNotIn applies the NotIn predicate on the "venue_id" field.
func VenueIDNotIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldVenueID, vs...))
}

// VenueIDGT applies the GT predicate on the "venue_id" field.
func VenueIDGT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldVenueID, v))
}

// VenueIDGTE applies the GTE predicate on the "venue_id" field.
func VenueIDGTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldVenueID, v))
}

// VenueIDLT applies the LT predicate on the "venue_id" field.
func VenueIDLT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldVenueID, v))
}

// VenueIDLTE applies the LTE predicate on the "venue_id" field.
func VenueIDLTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldVenueID, v))
}

// VenueIDIsNil applies the IsNil predicate on the "venue_id" field.
func VenueIDIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldVenueID))
}

// VenueIDNotNil applies the NotNil predicate on the "venue_id" field.
func VenueIDNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldVenueID))
}

// CoachIDEQ applies the EQ predicate on the "coach_id" field.
func CoachIDEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldCoachID, v))
}

// CoachIDNEQ applies the NEQ predicate on the "coach_id" field.
func CoachIDNEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldCoachID, v))
}

// CoachIDIn applies the In predicate on the "coach_id" field.
func CoachIDIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldCoachID, vs...))
}

// CoachIDNotIn applies the NotIn predicate on the "coach_id" field.
func CoachIDNotIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldCoachID, vs...))
}

// CoachIDGT applies the GT predicate on the "coach_id" field.
func CoachIDGT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldCoachID, v))
}

// CoachIDGTE applies the GTE predicate on the "coach_id" field.
func CoachIDGTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldCoachID, v))
}

// CoachIDLT applies the LT predicate on the "coach_id" field.
func CoachIDLT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldCoachID, v))
}

// CoachIDLTE applies the LTE predicate on the "coach_id" field.
func CoachIDLTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldCoachID, v))
}

// CoachIDIsNil applies the IsNil predicate on the "coach_id" field.
func CoachIDIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldCoachID))
}

// CoachIDNotNil applies the NotNil predicate on the "coach_id" field.
func CoachIDNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldCoachID))
}

// ScheduleIDEQ applies the EQ predicate on the "schedule_id" field.
func ScheduleIDEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldScheduleID, v))
}

// ScheduleIDNEQ applies the NEQ predicate on the "schedule_id" field.
func ScheduleIDNEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldScheduleID, v))
}

// ScheduleIDIn applies the In predicate on the "schedule_id" field.
func ScheduleIDIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldScheduleID, vs...))
}

// ScheduleIDNotIn applies the NotIn predicate on the "schedule_id" field.
func ScheduleIDNotIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldScheduleID, vs...))
}

// ScheduleIDIsNil applies the IsNil predicate on the "schedule_id" field.
func ScheduleIDIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldScheduleID))
}

// ScheduleIDNotNil applies the NotNil predicate on the "schedule_id" field.
func ScheduleIDNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldScheduleID))
}

// ScheduleNameEQ applies the EQ predicate on the "schedule_name" field.
func ScheduleNameEQ(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldScheduleName, v))
}

// ScheduleNameNEQ applies the NEQ predicate on the "schedule_name" field.
func ScheduleNameNEQ(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldScheduleName, v))
}

// ScheduleNameIn applies the In predicate on the "schedule_name" field.
func ScheduleNameIn(vs ...string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldScheduleName, vs...))
}

// ScheduleNameNotIn applies the NotIn predicate on the "schedule_name" field.
func ScheduleNameNotIn(vs ...string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldScheduleName, vs...))
}

// ScheduleNameGT applies the GT predicate on the "schedule_name" field.
func ScheduleNameGT(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldScheduleName, v))
}

// ScheduleNameGTE applies the GTE predicate on the "schedule_name" field.
func ScheduleNameGTE(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldScheduleName, v))
}

// ScheduleNameLT applies the LT predicate on the "schedule_name" field.
func ScheduleNameLT(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldScheduleName, v))
}

// ScheduleNameLTE applies the LTE predicate on the "schedule_name" field.
func ScheduleNameLTE(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldScheduleName, v))
}

// ScheduleNameContains applies the Contains predicate on the "schedule_name" field.
func ScheduleNameContains(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldContains(FieldScheduleName, v))
}

// ScheduleNameHasPrefix applies the HasPrefix predicate on the "schedule_name" field.
func ScheduleNameHasPrefix(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldHasPrefix(FieldScheduleName, v))
}

// ScheduleNameHasSuffix applies the HasSuffix predicate on the "schedule_name" field.
func ScheduleNameHasSuffix(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldHasSuffix(FieldScheduleName, v))
}

// ScheduleNameIsNil applies the IsNil predicate on the "schedule_name" field.
func ScheduleNameIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldScheduleName))
}

// ScheduleNameNotNil applies the NotNil predicate on the "schedule_name" field.
func ScheduleNameNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldScheduleName))
}

// ScheduleNameEqualFold applies the EqualFold predicate on the "schedule_name" field.
func ScheduleNameEqualFold(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEqualFold(FieldScheduleName, v))
}

// ScheduleNameContainsFold applies the ContainsFold predicate on the "schedule_name" field.
func ScheduleNameContainsFold(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldContainsFold(FieldScheduleName, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldProductID))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldContainsFold(FieldType, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldDate, v))
}

// DateIsNil applies the IsNil predicate on the "date" field.
func DateIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldDate))
}

// DateNotNil applies the NotNil predicate on the "date" field.
func DateNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldDate))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldEndAt))
}

// SignStartAtEQ applies the EQ predicate on the "sign_start_at" field.
func SignStartAtEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldSignStartAt, v))
}

// SignStartAtNEQ applies the NEQ predicate on the "sign_start_at" field.
func SignStartAtNEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldSignStartAt, v))
}

// SignStartAtIn applies the In predicate on the "sign_start_at" field.
func SignStartAtIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldSignStartAt, vs...))
}

// SignStartAtNotIn applies the NotIn predicate on the "sign_start_at" field.
func SignStartAtNotIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldSignStartAt, vs...))
}

// SignStartAtGT applies the GT predicate on the "sign_start_at" field.
func SignStartAtGT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldSignStartAt, v))
}

// SignStartAtGTE applies the GTE predicate on the "sign_start_at" field.
func SignStartAtGTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldSignStartAt, v))
}

// SignStartAtLT applies the LT predicate on the "sign_start_at" field.
func SignStartAtLT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldSignStartAt, v))
}

// SignStartAtLTE applies the LTE predicate on the "sign_start_at" field.
func SignStartAtLTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldSignStartAt, v))
}

// SignStartAtIsNil applies the IsNil predicate on the "sign_start_at" field.
func SignStartAtIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldSignStartAt))
}

// SignStartAtNotNil applies the NotNil predicate on the "sign_start_at" field.
func SignStartAtNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldSignStartAt))
}

// SignEndAtEQ applies the EQ predicate on the "sign_end_at" field.
func SignEndAtEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldSignEndAt, v))
}

// SignEndAtNEQ applies the NEQ predicate on the "sign_end_at" field.
func SignEndAtNEQ(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldSignEndAt, v))
}

// SignEndAtIn applies the In predicate on the "sign_end_at" field.
func SignEndAtIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldSignEndAt, vs...))
}

// SignEndAtNotIn applies the NotIn predicate on the "sign_end_at" field.
func SignEndAtNotIn(vs ...time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldSignEndAt, vs...))
}

// SignEndAtGT applies the GT predicate on the "sign_end_at" field.
func SignEndAtGT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldSignEndAt, v))
}

// SignEndAtGTE applies the GTE predicate on the "sign_end_at" field.
func SignEndAtGTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldSignEndAt, v))
}

// SignEndAtLT applies the LT predicate on the "sign_end_at" field.
func SignEndAtLT(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldSignEndAt, v))
}

// SignEndAtLTE applies the LTE predicate on the "sign_end_at" field.
func SignEndAtLTE(v time.Time) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldSignEndAt, v))
}

// SignEndAtIsNil applies the IsNil predicate on the "sign_end_at" field.
func SignEndAtIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldSignEndAt))
}

// SignEndAtNotNil applies the NotNil predicate on the "sign_end_at" field.
func SignEndAtNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldSignEndAt))
}

// CoachNameEQ applies the EQ predicate on the "coach_name" field.
func CoachNameEQ(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldCoachName, v))
}

// CoachNameNEQ applies the NEQ predicate on the "coach_name" field.
func CoachNameNEQ(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldCoachName, v))
}

// CoachNameIn applies the In predicate on the "coach_name" field.
func CoachNameIn(vs ...string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldCoachName, vs...))
}

// CoachNameNotIn applies the NotIn predicate on the "coach_name" field.
func CoachNameNotIn(vs ...string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldCoachName, vs...))
}

// CoachNameGT applies the GT predicate on the "coach_name" field.
func CoachNameGT(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldCoachName, v))
}

// CoachNameGTE applies the GTE predicate on the "coach_name" field.
func CoachNameGTE(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldCoachName, v))
}

// CoachNameLT applies the LT predicate on the "coach_name" field.
func CoachNameLT(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldCoachName, v))
}

// CoachNameLTE applies the LTE predicate on the "coach_name" field.
func CoachNameLTE(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldCoachName, v))
}

// CoachNameContains applies the Contains predicate on the "coach_name" field.
func CoachNameContains(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldContains(FieldCoachName, v))
}

// CoachNameHasPrefix applies the HasPrefix predicate on the "coach_name" field.
func CoachNameHasPrefix(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldHasPrefix(FieldCoachName, v))
}

// CoachNameHasSuffix applies the HasSuffix predicate on the "coach_name" field.
func CoachNameHasSuffix(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldHasSuffix(FieldCoachName, v))
}

// CoachNameIsNil applies the IsNil predicate on the "coach_name" field.
func CoachNameIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldCoachName))
}

// CoachNameNotNil applies the NotNil predicate on the "coach_name" field.
func CoachNameNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldCoachName))
}

// CoachNameEqualFold applies the EqualFold predicate on the "coach_name" field.
func CoachNameEqualFold(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEqualFold(FieldCoachName, v))
}

// CoachNameContainsFold applies the ContainsFold predicate on the "coach_name" field.
func CoachNameContainsFold(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldContainsFold(FieldCoachName, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.FieldContainsFold(FieldRemark, v))
}

// HasSchedule applies the HasEdge predicate on the "schedule" edge.
func HasSchedule() predicate.ScheduleCoach {
	return predicate.ScheduleCoach(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleWith applies the HasEdge predicate on the "schedule" edge with a given conditions (other predicates).
func HasScheduleWith(preds ...predicate.Schedule) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(func(s *sql.Selector) {
		step := newScheduleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheduleCoach) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheduleCoach) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheduleCoach) predicate.ScheduleCoach {
	return predicate.ScheduleCoach(sql.NotPredicates(p))
}
