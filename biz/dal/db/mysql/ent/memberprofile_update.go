// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/member"
	"kcers/biz/dal/db/mysql/ent/memberprofile"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProfileUpdate is the builder for updating MemberProfile entities.
type MemberProfileUpdate struct {
	config
	hooks     []Hook
	mutation  *MemberProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MemberProfileUpdate builder.
func (mpu *MemberProfileUpdate) Where(ps ...predicate.MemberProfile) *MemberProfileUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpu *MemberProfileUpdate) SetUpdatedAt(t time.Time) *MemberProfileUpdate {
	mpu.mutation.SetUpdatedAt(t)
	return mpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mpu *MemberProfileUpdate) ClearUpdatedAt() *MemberProfileUpdate {
	mpu.mutation.ClearUpdatedAt()
	return mpu
}

// SetDelete sets the "delete" field.
func (mpu *MemberProfileUpdate) SetDelete(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetDelete()
	mpu.mutation.SetDelete(i)
	return mpu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableDelete(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetDelete(*i)
	}
	return mpu
}

// AddDelete adds i to the "delete" field.
func (mpu *MemberProfileUpdate) AddDelete(i int64) *MemberProfileUpdate {
	mpu.mutation.AddDelete(i)
	return mpu
}

// ClearDelete clears the value of the "delete" field.
func (mpu *MemberProfileUpdate) ClearDelete() *MemberProfileUpdate {
	mpu.mutation.ClearDelete()
	return mpu
}

// SetCreatedID sets the "created_id" field.
func (mpu *MemberProfileUpdate) SetCreatedID(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetCreatedID()
	mpu.mutation.SetCreatedID(i)
	return mpu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableCreatedID(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetCreatedID(*i)
	}
	return mpu
}

// AddCreatedID adds i to the "created_id" field.
func (mpu *MemberProfileUpdate) AddCreatedID(i int64) *MemberProfileUpdate {
	mpu.mutation.AddCreatedID(i)
	return mpu
}

// ClearCreatedID clears the value of the "created_id" field.
func (mpu *MemberProfileUpdate) ClearCreatedID() *MemberProfileUpdate {
	mpu.mutation.ClearCreatedID()
	return mpu
}

// SetIntention sets the "intention" field.
func (mpu *MemberProfileUpdate) SetIntention(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetIntention()
	mpu.mutation.SetIntention(i)
	return mpu
}

// SetNillableIntention sets the "intention" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableIntention(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetIntention(*i)
	}
	return mpu
}

// AddIntention adds i to the "intention" field.
func (mpu *MemberProfileUpdate) AddIntention(i int64) *MemberProfileUpdate {
	mpu.mutation.AddIntention(i)
	return mpu
}

// ClearIntention clears the value of the "intention" field.
func (mpu *MemberProfileUpdate) ClearIntention() *MemberProfileUpdate {
	mpu.mutation.ClearIntention()
	return mpu
}

// SetSource sets the "source" field.
func (mpu *MemberProfileUpdate) SetSource(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetSource()
	mpu.mutation.SetSource(i)
	return mpu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableSource(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetSource(*i)
	}
	return mpu
}

// AddSource adds i to the "source" field.
func (mpu *MemberProfileUpdate) AddSource(i int64) *MemberProfileUpdate {
	mpu.mutation.AddSource(i)
	return mpu
}

// ClearSource clears the value of the "source" field.
func (mpu *MemberProfileUpdate) ClearSource() *MemberProfileUpdate {
	mpu.mutation.ClearSource()
	return mpu
}

// SetMemberID sets the "member_id" field.
func (mpu *MemberProfileUpdate) SetMemberID(i int64) *MemberProfileUpdate {
	mpu.mutation.SetMemberID(i)
	return mpu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableMemberID(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetMemberID(*i)
	}
	return mpu
}

// ClearMemberID clears the value of the "member_id" field.
func (mpu *MemberProfileUpdate) ClearMemberID() *MemberProfileUpdate {
	mpu.mutation.ClearMemberID()
	return mpu
}

// SetGender sets the "gender" field.
func (mpu *MemberProfileUpdate) SetGender(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetGender()
	mpu.mutation.SetGender(i)
	return mpu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableGender(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetGender(*i)
	}
	return mpu
}

// AddGender adds i to the "gender" field.
func (mpu *MemberProfileUpdate) AddGender(i int64) *MemberProfileUpdate {
	mpu.mutation.AddGender(i)
	return mpu
}

// ClearGender clears the value of the "gender" field.
func (mpu *MemberProfileUpdate) ClearGender() *MemberProfileUpdate {
	mpu.mutation.ClearGender()
	return mpu
}

// SetBirthday sets the "birthday" field.
func (mpu *MemberProfileUpdate) SetBirthday(t time.Time) *MemberProfileUpdate {
	mpu.mutation.SetBirthday(t)
	return mpu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableBirthday(t *time.Time) *MemberProfileUpdate {
	if t != nil {
		mpu.SetBirthday(*t)
	}
	return mpu
}

// ClearBirthday clears the value of the "birthday" field.
func (mpu *MemberProfileUpdate) ClearBirthday() *MemberProfileUpdate {
	mpu.mutation.ClearBirthday()
	return mpu
}

// SetEmail sets the "email" field.
func (mpu *MemberProfileUpdate) SetEmail(s string) *MemberProfileUpdate {
	mpu.mutation.SetEmail(s)
	return mpu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableEmail(s *string) *MemberProfileUpdate {
	if s != nil {
		mpu.SetEmail(*s)
	}
	return mpu
}

// ClearEmail clears the value of the "email" field.
func (mpu *MemberProfileUpdate) ClearEmail() *MemberProfileUpdate {
	mpu.mutation.ClearEmail()
	return mpu
}

// SetWecom sets the "wecom" field.
func (mpu *MemberProfileUpdate) SetWecom(s string) *MemberProfileUpdate {
	mpu.mutation.SetWecom(s)
	return mpu
}

// SetNillableWecom sets the "wecom" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableWecom(s *string) *MemberProfileUpdate {
	if s != nil {
		mpu.SetWecom(*s)
	}
	return mpu
}

// ClearWecom clears the value of the "wecom" field.
func (mpu *MemberProfileUpdate) ClearWecom() *MemberProfileUpdate {
	mpu.mutation.ClearWecom()
	return mpu
}

// SetRelationMid sets the "relation_mid" field.
func (mpu *MemberProfileUpdate) SetRelationMid(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetRelationMid()
	mpu.mutation.SetRelationMid(i)
	return mpu
}

// SetNillableRelationMid sets the "relation_mid" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableRelationMid(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetRelationMid(*i)
	}
	return mpu
}

// AddRelationMid adds i to the "relation_mid" field.
func (mpu *MemberProfileUpdate) AddRelationMid(i int64) *MemberProfileUpdate {
	mpu.mutation.AddRelationMid(i)
	return mpu
}

// ClearRelationMid clears the value of the "relation_mid" field.
func (mpu *MemberProfileUpdate) ClearRelationMid() *MemberProfileUpdate {
	mpu.mutation.ClearRelationMid()
	return mpu
}

// SetRelationMame sets the "relation_mame" field.
func (mpu *MemberProfileUpdate) SetRelationMame(s string) *MemberProfileUpdate {
	mpu.mutation.SetRelationMame(s)
	return mpu
}

// SetNillableRelationMame sets the "relation_mame" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableRelationMame(s *string) *MemberProfileUpdate {
	if s != nil {
		mpu.SetRelationMame(*s)
	}
	return mpu
}

// ClearRelationMame clears the value of the "relation_mame" field.
func (mpu *MemberProfileUpdate) ClearRelationMame() *MemberProfileUpdate {
	mpu.mutation.ClearRelationMame()
	return mpu
}

// SetRelationUID sets the "relation_uid" field.
func (mpu *MemberProfileUpdate) SetRelationUID(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetRelationUID()
	mpu.mutation.SetRelationUID(i)
	return mpu
}

// SetNillableRelationUID sets the "relation_uid" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableRelationUID(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetRelationUID(*i)
	}
	return mpu
}

// AddRelationUID adds i to the "relation_uid" field.
func (mpu *MemberProfileUpdate) AddRelationUID(i int64) *MemberProfileUpdate {
	mpu.mutation.AddRelationUID(i)
	return mpu
}

// ClearRelationUID clears the value of the "relation_uid" field.
func (mpu *MemberProfileUpdate) ClearRelationUID() *MemberProfileUpdate {
	mpu.mutation.ClearRelationUID()
	return mpu
}

// SetRelationUname sets the "relation_uname" field.
func (mpu *MemberProfileUpdate) SetRelationUname(s string) *MemberProfileUpdate {
	mpu.mutation.SetRelationUname(s)
	return mpu
}

// SetNillableRelationUname sets the "relation_uname" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableRelationUname(s *string) *MemberProfileUpdate {
	if s != nil {
		mpu.SetRelationUname(*s)
	}
	return mpu
}

// ClearRelationUname clears the value of the "relation_uname" field.
func (mpu *MemberProfileUpdate) ClearRelationUname() *MemberProfileUpdate {
	mpu.mutation.ClearRelationUname()
	return mpu
}

// SetMember sets the "member" edge to the Member entity.
func (mpu *MemberProfileUpdate) SetMember(m *Member) *MemberProfileUpdate {
	return mpu.SetMemberID(m.ID)
}

// Mutation returns the MemberProfileMutation object of the builder.
func (mpu *MemberProfileUpdate) Mutation() *MemberProfileMutation {
	return mpu.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (mpu *MemberProfileUpdate) ClearMember() *MemberProfileUpdate {
	mpu.mutation.ClearMember()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MemberProfileUpdate) Save(ctx context.Context) (int, error) {
	mpu.defaults()
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MemberProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MemberProfileUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MemberProfileUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpu *MemberProfileUpdate) defaults() {
	if _, ok := mpu.mutation.UpdatedAt(); !ok && !mpu.mutation.UpdatedAtCleared() {
		v := memberprofile.UpdateDefaultUpdatedAt()
		mpu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpu *MemberProfileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MemberProfileUpdate {
	mpu.modifiers = append(mpu.modifiers, modifiers...)
	return mpu
}

func (mpu *MemberProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberprofile.Table, memberprofile.Columns, sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpu.mutation.CreatedAtCleared() {
		_spec.ClearField(memberprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.UpdatedAt(); ok {
		_spec.SetField(memberprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberprofile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.Delete(); ok {
		_spec.SetField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedDelete(); ok {
		_spec.AddField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if mpu.mutation.DeleteCleared() {
		_spec.ClearField(memberprofile.FieldDelete, field.TypeInt64)
	}
	if value, ok := mpu.mutation.CreatedID(); ok {
		_spec.SetField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if mpu.mutation.CreatedIDCleared() {
		_spec.ClearField(memberprofile.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Intention(); ok {
		_spec.SetField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedIntention(); ok {
		_spec.AddField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if mpu.mutation.IntentionCleared() {
		_spec.ClearField(memberprofile.FieldIntention, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Source(); ok {
		_spec.SetField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedSource(); ok {
		_spec.AddField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if mpu.mutation.SourceCleared() {
		_spec.ClearField(memberprofile.FieldSource, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Gender(); ok {
		_spec.SetField(memberprofile.FieldGender, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedGender(); ok {
		_spec.AddField(memberprofile.FieldGender, field.TypeInt64, value)
	}
	if mpu.mutation.GenderCleared() {
		_spec.ClearField(memberprofile.FieldGender, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Birthday(); ok {
		_spec.SetField(memberprofile.FieldBirthday, field.TypeTime, value)
	}
	if mpu.mutation.BirthdayCleared() {
		_spec.ClearField(memberprofile.FieldBirthday, field.TypeTime)
	}
	if value, ok := mpu.mutation.Email(); ok {
		_spec.SetField(memberprofile.FieldEmail, field.TypeString, value)
	}
	if mpu.mutation.EmailCleared() {
		_spec.ClearField(memberprofile.FieldEmail, field.TypeString)
	}
	if value, ok := mpu.mutation.Wecom(); ok {
		_spec.SetField(memberprofile.FieldWecom, field.TypeString, value)
	}
	if mpu.mutation.WecomCleared() {
		_spec.ClearField(memberprofile.FieldWecom, field.TypeString)
	}
	if value, ok := mpu.mutation.RelationMid(); ok {
		_spec.SetField(memberprofile.FieldRelationMid, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedRelationMid(); ok {
		_spec.AddField(memberprofile.FieldRelationMid, field.TypeInt64, value)
	}
	if mpu.mutation.RelationMidCleared() {
		_spec.ClearField(memberprofile.FieldRelationMid, field.TypeInt64)
	}
	if value, ok := mpu.mutation.RelationMame(); ok {
		_spec.SetField(memberprofile.FieldRelationMame, field.TypeString, value)
	}
	if mpu.mutation.RelationMameCleared() {
		_spec.ClearField(memberprofile.FieldRelationMame, field.TypeString)
	}
	if value, ok := mpu.mutation.RelationUID(); ok {
		_spec.SetField(memberprofile.FieldRelationUID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedRelationUID(); ok {
		_spec.AddField(memberprofile.FieldRelationUID, field.TypeInt64, value)
	}
	if mpu.mutation.RelationUIDCleared() {
		_spec.ClearField(memberprofile.FieldRelationUID, field.TypeInt64)
	}
	if value, ok := mpu.mutation.RelationUname(); ok {
		_spec.SetField(memberprofile.FieldRelationUname, field.TypeString, value)
	}
	if mpu.mutation.RelationUnameCleared() {
		_spec.ClearField(memberprofile.FieldRelationUname, field.TypeString)
	}
	if mpu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.MemberTable,
			Columns: []string{memberprofile.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.MemberTable,
			Columns: []string{memberprofile.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MemberProfileUpdateOne is the builder for updating a single MemberProfile entity.
type MemberProfileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MemberProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuo *MemberProfileUpdateOne) SetUpdatedAt(t time.Time) *MemberProfileUpdateOne {
	mpuo.mutation.SetUpdatedAt(t)
	return mpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mpuo *MemberProfileUpdateOne) ClearUpdatedAt() *MemberProfileUpdateOne {
	mpuo.mutation.ClearUpdatedAt()
	return mpuo
}

// SetDelete sets the "delete" field.
func (mpuo *MemberProfileUpdateOne) SetDelete(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetDelete()
	mpuo.mutation.SetDelete(i)
	return mpuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableDelete(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetDelete(*i)
	}
	return mpuo
}

// AddDelete adds i to the "delete" field.
func (mpuo *MemberProfileUpdateOne) AddDelete(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddDelete(i)
	return mpuo
}

// ClearDelete clears the value of the "delete" field.
func (mpuo *MemberProfileUpdateOne) ClearDelete() *MemberProfileUpdateOne {
	mpuo.mutation.ClearDelete()
	return mpuo
}

// SetCreatedID sets the "created_id" field.
func (mpuo *MemberProfileUpdateOne) SetCreatedID(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetCreatedID()
	mpuo.mutation.SetCreatedID(i)
	return mpuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableCreatedID(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetCreatedID(*i)
	}
	return mpuo
}

// AddCreatedID adds i to the "created_id" field.
func (mpuo *MemberProfileUpdateOne) AddCreatedID(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddCreatedID(i)
	return mpuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (mpuo *MemberProfileUpdateOne) ClearCreatedID() *MemberProfileUpdateOne {
	mpuo.mutation.ClearCreatedID()
	return mpuo
}

// SetIntention sets the "intention" field.
func (mpuo *MemberProfileUpdateOne) SetIntention(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetIntention()
	mpuo.mutation.SetIntention(i)
	return mpuo
}

// SetNillableIntention sets the "intention" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableIntention(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetIntention(*i)
	}
	return mpuo
}

// AddIntention adds i to the "intention" field.
func (mpuo *MemberProfileUpdateOne) AddIntention(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddIntention(i)
	return mpuo
}

// ClearIntention clears the value of the "intention" field.
func (mpuo *MemberProfileUpdateOne) ClearIntention() *MemberProfileUpdateOne {
	mpuo.mutation.ClearIntention()
	return mpuo
}

// SetSource sets the "source" field.
func (mpuo *MemberProfileUpdateOne) SetSource(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetSource()
	mpuo.mutation.SetSource(i)
	return mpuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableSource(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetSource(*i)
	}
	return mpuo
}

// AddSource adds i to the "source" field.
func (mpuo *MemberProfileUpdateOne) AddSource(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddSource(i)
	return mpuo
}

// ClearSource clears the value of the "source" field.
func (mpuo *MemberProfileUpdateOne) ClearSource() *MemberProfileUpdateOne {
	mpuo.mutation.ClearSource()
	return mpuo
}

// SetMemberID sets the "member_id" field.
func (mpuo *MemberProfileUpdateOne) SetMemberID(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.SetMemberID(i)
	return mpuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableMemberID(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetMemberID(*i)
	}
	return mpuo
}

// ClearMemberID clears the value of the "member_id" field.
func (mpuo *MemberProfileUpdateOne) ClearMemberID() *MemberProfileUpdateOne {
	mpuo.mutation.ClearMemberID()
	return mpuo
}

// SetGender sets the "gender" field.
func (mpuo *MemberProfileUpdateOne) SetGender(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetGender()
	mpuo.mutation.SetGender(i)
	return mpuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableGender(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetGender(*i)
	}
	return mpuo
}

// AddGender adds i to the "gender" field.
func (mpuo *MemberProfileUpdateOne) AddGender(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddGender(i)
	return mpuo
}

// ClearGender clears the value of the "gender" field.
func (mpuo *MemberProfileUpdateOne) ClearGender() *MemberProfileUpdateOne {
	mpuo.mutation.ClearGender()
	return mpuo
}

// SetBirthday sets the "birthday" field.
func (mpuo *MemberProfileUpdateOne) SetBirthday(t time.Time) *MemberProfileUpdateOne {
	mpuo.mutation.SetBirthday(t)
	return mpuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableBirthday(t *time.Time) *MemberProfileUpdateOne {
	if t != nil {
		mpuo.SetBirthday(*t)
	}
	return mpuo
}

// ClearBirthday clears the value of the "birthday" field.
func (mpuo *MemberProfileUpdateOne) ClearBirthday() *MemberProfileUpdateOne {
	mpuo.mutation.ClearBirthday()
	return mpuo
}

// SetEmail sets the "email" field.
func (mpuo *MemberProfileUpdateOne) SetEmail(s string) *MemberProfileUpdateOne {
	mpuo.mutation.SetEmail(s)
	return mpuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableEmail(s *string) *MemberProfileUpdateOne {
	if s != nil {
		mpuo.SetEmail(*s)
	}
	return mpuo
}

// ClearEmail clears the value of the "email" field.
func (mpuo *MemberProfileUpdateOne) ClearEmail() *MemberProfileUpdateOne {
	mpuo.mutation.ClearEmail()
	return mpuo
}

// SetWecom sets the "wecom" field.
func (mpuo *MemberProfileUpdateOne) SetWecom(s string) *MemberProfileUpdateOne {
	mpuo.mutation.SetWecom(s)
	return mpuo
}

// SetNillableWecom sets the "wecom" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableWecom(s *string) *MemberProfileUpdateOne {
	if s != nil {
		mpuo.SetWecom(*s)
	}
	return mpuo
}

// ClearWecom clears the value of the "wecom" field.
func (mpuo *MemberProfileUpdateOne) ClearWecom() *MemberProfileUpdateOne {
	mpuo.mutation.ClearWecom()
	return mpuo
}

// SetRelationMid sets the "relation_mid" field.
func (mpuo *MemberProfileUpdateOne) SetRelationMid(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetRelationMid()
	mpuo.mutation.SetRelationMid(i)
	return mpuo
}

// SetNillableRelationMid sets the "relation_mid" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableRelationMid(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetRelationMid(*i)
	}
	return mpuo
}

// AddRelationMid adds i to the "relation_mid" field.
func (mpuo *MemberProfileUpdateOne) AddRelationMid(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddRelationMid(i)
	return mpuo
}

// ClearRelationMid clears the value of the "relation_mid" field.
func (mpuo *MemberProfileUpdateOne) ClearRelationMid() *MemberProfileUpdateOne {
	mpuo.mutation.ClearRelationMid()
	return mpuo
}

// SetRelationMame sets the "relation_mame" field.
func (mpuo *MemberProfileUpdateOne) SetRelationMame(s string) *MemberProfileUpdateOne {
	mpuo.mutation.SetRelationMame(s)
	return mpuo
}

// SetNillableRelationMame sets the "relation_mame" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableRelationMame(s *string) *MemberProfileUpdateOne {
	if s != nil {
		mpuo.SetRelationMame(*s)
	}
	return mpuo
}

// ClearRelationMame clears the value of the "relation_mame" field.
func (mpuo *MemberProfileUpdateOne) ClearRelationMame() *MemberProfileUpdateOne {
	mpuo.mutation.ClearRelationMame()
	return mpuo
}

// SetRelationUID sets the "relation_uid" field.
func (mpuo *MemberProfileUpdateOne) SetRelationUID(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetRelationUID()
	mpuo.mutation.SetRelationUID(i)
	return mpuo
}

// SetNillableRelationUID sets the "relation_uid" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableRelationUID(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetRelationUID(*i)
	}
	return mpuo
}

// AddRelationUID adds i to the "relation_uid" field.
func (mpuo *MemberProfileUpdateOne) AddRelationUID(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddRelationUID(i)
	return mpuo
}

// ClearRelationUID clears the value of the "relation_uid" field.
func (mpuo *MemberProfileUpdateOne) ClearRelationUID() *MemberProfileUpdateOne {
	mpuo.mutation.ClearRelationUID()
	return mpuo
}

// SetRelationUname sets the "relation_uname" field.
func (mpuo *MemberProfileUpdateOne) SetRelationUname(s string) *MemberProfileUpdateOne {
	mpuo.mutation.SetRelationUname(s)
	return mpuo
}

// SetNillableRelationUname sets the "relation_uname" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableRelationUname(s *string) *MemberProfileUpdateOne {
	if s != nil {
		mpuo.SetRelationUname(*s)
	}
	return mpuo
}

// ClearRelationUname clears the value of the "relation_uname" field.
func (mpuo *MemberProfileUpdateOne) ClearRelationUname() *MemberProfileUpdateOne {
	mpuo.mutation.ClearRelationUname()
	return mpuo
}

// SetMember sets the "member" edge to the Member entity.
func (mpuo *MemberProfileUpdateOne) SetMember(m *Member) *MemberProfileUpdateOne {
	return mpuo.SetMemberID(m.ID)
}

// Mutation returns the MemberProfileMutation object of the builder.
func (mpuo *MemberProfileUpdateOne) Mutation() *MemberProfileMutation {
	return mpuo.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (mpuo *MemberProfileUpdateOne) ClearMember() *MemberProfileUpdateOne {
	mpuo.mutation.ClearMember()
	return mpuo
}

// Where appends a list predicates to the MemberProfileUpdate builder.
func (mpuo *MemberProfileUpdateOne) Where(ps ...predicate.MemberProfile) *MemberProfileUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MemberProfileUpdateOne) Select(field string, fields ...string) *MemberProfileUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MemberProfile entity.
func (mpuo *MemberProfileUpdateOne) Save(ctx context.Context) (*MemberProfile, error) {
	mpuo.defaults()
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MemberProfileUpdateOne) SaveX(ctx context.Context) *MemberProfile {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MemberProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MemberProfileUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuo *MemberProfileUpdateOne) defaults() {
	if _, ok := mpuo.mutation.UpdatedAt(); !ok && !mpuo.mutation.UpdatedAtCleared() {
		v := memberprofile.UpdateDefaultUpdatedAt()
		mpuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpuo *MemberProfileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MemberProfileUpdateOne {
	mpuo.modifiers = append(mpuo.modifiers, modifiers...)
	return mpuo
}

func (mpuo *MemberProfileUpdateOne) sqlSave(ctx context.Context) (_node *MemberProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberprofile.Table, memberprofile.Columns, sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberprofile.FieldID)
		for _, f := range fields {
			if !memberprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(memberprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(memberprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberprofile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.Delete(); ok {
		_spec.SetField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedDelete(); ok {
		_spec.AddField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if mpuo.mutation.DeleteCleared() {
		_spec.ClearField(memberprofile.FieldDelete, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.CreatedID(); ok {
		_spec.SetField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if mpuo.mutation.CreatedIDCleared() {
		_spec.ClearField(memberprofile.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Intention(); ok {
		_spec.SetField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedIntention(); ok {
		_spec.AddField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if mpuo.mutation.IntentionCleared() {
		_spec.ClearField(memberprofile.FieldIntention, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Source(); ok {
		_spec.SetField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedSource(); ok {
		_spec.AddField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if mpuo.mutation.SourceCleared() {
		_spec.ClearField(memberprofile.FieldSource, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Gender(); ok {
		_spec.SetField(memberprofile.FieldGender, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedGender(); ok {
		_spec.AddField(memberprofile.FieldGender, field.TypeInt64, value)
	}
	if mpuo.mutation.GenderCleared() {
		_spec.ClearField(memberprofile.FieldGender, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Birthday(); ok {
		_spec.SetField(memberprofile.FieldBirthday, field.TypeTime, value)
	}
	if mpuo.mutation.BirthdayCleared() {
		_spec.ClearField(memberprofile.FieldBirthday, field.TypeTime)
	}
	if value, ok := mpuo.mutation.Email(); ok {
		_spec.SetField(memberprofile.FieldEmail, field.TypeString, value)
	}
	if mpuo.mutation.EmailCleared() {
		_spec.ClearField(memberprofile.FieldEmail, field.TypeString)
	}
	if value, ok := mpuo.mutation.Wecom(); ok {
		_spec.SetField(memberprofile.FieldWecom, field.TypeString, value)
	}
	if mpuo.mutation.WecomCleared() {
		_spec.ClearField(memberprofile.FieldWecom, field.TypeString)
	}
	if value, ok := mpuo.mutation.RelationMid(); ok {
		_spec.SetField(memberprofile.FieldRelationMid, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedRelationMid(); ok {
		_spec.AddField(memberprofile.FieldRelationMid, field.TypeInt64, value)
	}
	if mpuo.mutation.RelationMidCleared() {
		_spec.ClearField(memberprofile.FieldRelationMid, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.RelationMame(); ok {
		_spec.SetField(memberprofile.FieldRelationMame, field.TypeString, value)
	}
	if mpuo.mutation.RelationMameCleared() {
		_spec.ClearField(memberprofile.FieldRelationMame, field.TypeString)
	}
	if value, ok := mpuo.mutation.RelationUID(); ok {
		_spec.SetField(memberprofile.FieldRelationUID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedRelationUID(); ok {
		_spec.AddField(memberprofile.FieldRelationUID, field.TypeInt64, value)
	}
	if mpuo.mutation.RelationUIDCleared() {
		_spec.ClearField(memberprofile.FieldRelationUID, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.RelationUname(); ok {
		_spec.SetField(memberprofile.FieldRelationUname, field.TypeString, value)
	}
	if mpuo.mutation.RelationUnameCleared() {
		_spec.ClearField(memberprofile.FieldRelationUname, field.TypeString)
	}
	if mpuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.MemberTable,
			Columns: []string{memberprofile.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.MemberTable,
			Columns: []string{memberprofile.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mpuo.modifiers...)
	_node = &MemberProfile{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}
