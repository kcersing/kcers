// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// EdgeToken holds the string denoting the token edge name in mutations.
	EdgeToken = "token"
	// EdgeMemberProfile holds the string denoting the member_profile edge name in mutations.
	EdgeMemberProfile = "member_profile"
	// EdgeMemberDetails holds the string denoting the member_details edge name in mutations.
	EdgeMemberDetails = "member_details"
	// EdgeMemberNotes holds the string denoting the member_notes edge name in mutations.
	EdgeMemberNotes = "member_notes"
	// EdgeMemberOrders holds the string denoting the member_orders edge name in mutations.
	EdgeMemberOrders = "member_orders"
	// EdgeMemberProducts holds the string denoting the member_products edge name in mutations.
	EdgeMemberProducts = "member_products"
	// EdgeMemberEntry holds the string denoting the member_entry edge name in mutations.
	EdgeMemberEntry = "member_entry"
	// EdgeMemberContents holds the string denoting the member_contents edge name in mutations.
	EdgeMemberContents = "member_contents"
	// EdgeMemberFace holds the string denoting the member_face edge name in mutations.
	EdgeMemberFace = "member_face"
	// Table holds the table name of the member in the database.
	Table = "member"
	// TokenTable is the table that holds the token relation/edge.
	TokenTable = "member_token"
	// TokenInverseTable is the table name for the MemberToken entity.
	// It exists in this package in order to avoid circular dependency with the "membertoken" package.
	TokenInverseTable = "member_token"
	// TokenColumn is the table column denoting the token relation/edge.
	TokenColumn = "member_token"
	// MemberProfileTable is the table that holds the member_profile relation/edge.
	MemberProfileTable = "member_profile"
	// MemberProfileInverseTable is the table name for the MemberProfile entity.
	// It exists in this package in order to avoid circular dependency with the "memberprofile" package.
	MemberProfileInverseTable = "member_profile"
	// MemberProfileColumn is the table column denoting the member_profile relation/edge.
	MemberProfileColumn = "member_id"
	// MemberDetailsTable is the table that holds the member_details relation/edge.
	MemberDetailsTable = "member_details"
	// MemberDetailsInverseTable is the table name for the VenueMember entity.
	// It exists in this package in order to avoid circular dependency with the "venuemember" package.
	MemberDetailsInverseTable = "member_details"
	// MemberDetailsColumn is the table column denoting the member_details relation/edge.
	MemberDetailsColumn = "member_id"
	// MemberNotesTable is the table that holds the member_notes relation/edge.
	MemberNotesTable = "member_note"
	// MemberNotesInverseTable is the table name for the MemberNote entity.
	// It exists in this package in order to avoid circular dependency with the "membernote" package.
	MemberNotesInverseTable = "member_note"
	// MemberNotesColumn is the table column denoting the member_notes relation/edge.
	MemberNotesColumn = "member_id"
	// MemberOrdersTable is the table that holds the member_orders relation/edge.
	MemberOrdersTable = "order"
	// MemberOrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "entorder" package.
	MemberOrdersInverseTable = "order"
	// MemberOrdersColumn is the table column denoting the member_orders relation/edge.
	MemberOrdersColumn = "member_id"
	// MemberProductsTable is the table that holds the member_products relation/edge.
	MemberProductsTable = "member_product"
	// MemberProductsInverseTable is the table name for the MemberProduct entity.
	// It exists in this package in order to avoid circular dependency with the "memberproduct" package.
	MemberProductsInverseTable = "member_product"
	// MemberProductsColumn is the table column denoting the member_products relation/edge.
	MemberProductsColumn = "member_id"
	// MemberEntryTable is the table that holds the member_entry relation/edge.
	MemberEntryTable = "entry_logs"
	// MemberEntryInverseTable is the table name for the VenueEntry entity.
	// It exists in this package in order to avoid circular dependency with the "venueentry" package.
	MemberEntryInverseTable = "entry_logs"
	// MemberEntryColumn is the table column denoting the member_entry relation/edge.
	MemberEntryColumn = "member_id"
	// MemberContentsTable is the table that holds the member_contents relation/edge.
	MemberContentsTable = "member_contract"
	// MemberContentsInverseTable is the table name for the MemberContract entity.
	// It exists in this package in order to avoid circular dependency with the "membercontract" package.
	MemberContentsInverseTable = "member_contract"
	// MemberContentsColumn is the table column denoting the member_contents relation/edge.
	MemberContentsColumn = "member_id"
	// MemberFaceTable is the table that holds the member_face relation/edge.
	MemberFaceTable = "faces"
	// MemberFaceInverseTable is the table name for the Face entity.
	// It exists in this package in order to avoid circular dependency with the "face" package.
	MemberFaceInverseTable = "faces"
	// MemberFaceColumn is the table column denoting the member_face relation/edge.
	MemberFaceColumn = "member_id"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDelete,
	FieldCreatedID,
	FieldStatus,
	FieldPassword,
	FieldUsername,
	FieldMobile,
	FieldName,
	FieldAvatar,
	FieldCondition,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete int64
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
	// DefaultCondition holds the default value on creation for the "condition" field.
	DefaultCondition int64
)

// OrderOption defines the ordering options for the Member queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByTokenField orders the results by token field.
func ByTokenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokenStep(), sql.OrderByField(field, opts...))
	}
}

// ByMemberProfileCount orders the results by member_profile count.
func ByMemberProfileCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberProfileStep(), opts...)
	}
}

// ByMemberProfile orders the results by member_profile terms.
func ByMemberProfile(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberProfileStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberDetailsCount orders the results by member_details count.
func ByMemberDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberDetailsStep(), opts...)
	}
}

// ByMemberDetails orders the results by member_details terms.
func ByMemberDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberNotesCount orders the results by member_notes count.
func ByMemberNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberNotesStep(), opts...)
	}
}

// ByMemberNotes orders the results by member_notes terms.
func ByMemberNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberOrdersCount orders the results by member_orders count.
func ByMemberOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberOrdersStep(), opts...)
	}
}

// ByMemberOrders orders the results by member_orders terms.
func ByMemberOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberProductsCount orders the results by member_products count.
func ByMemberProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberProductsStep(), opts...)
	}
}

// ByMemberProducts orders the results by member_products terms.
func ByMemberProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberEntryCount orders the results by member_entry count.
func ByMemberEntryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberEntryStep(), opts...)
	}
}

// ByMemberEntry orders the results by member_entry terms.
func ByMemberEntry(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberEntryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberContentsCount orders the results by member_contents count.
func ByMemberContentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberContentsStep(), opts...)
	}
}

// ByMemberContents orders the results by member_contents terms.
func ByMemberContents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberContentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberFaceCount orders the results by member_face count.
func ByMemberFaceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberFaceStep(), opts...)
	}
}

// ByMemberFace orders the results by member_face terms.
func ByMemberFace(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberFaceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TokenTable, TokenColumn),
	)
}
func newMemberProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberProfileTable, MemberProfileColumn),
	)
}
func newMemberDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberDetailsTable, MemberDetailsColumn),
	)
}
func newMemberNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberNotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberNotesTable, MemberNotesColumn),
	)
}
func newMemberOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberOrdersTable, MemberOrdersColumn),
	)
}
func newMemberProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberProductsTable, MemberProductsColumn),
	)
}
func newMemberEntryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberEntryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberEntryTable, MemberEntryColumn),
	)
}
func newMemberContentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberContentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberContentsTable, MemberContentsColumn),
	)
}
func newMemberFaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberFaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberFaceTable, MemberFaceColumn),
	)
}
