// Code generated by ent, DO NOT EDIT.

package memberdetails

import (
	"kcers/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreatedID, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldMemberID, v))
}

// MoneySum applies equality check predicate on the "money_sum" field. It's identical to MoneySumEQ.
func MoneySum(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldMoneySum, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductID, v))
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductName, v))
}

// EntrySum applies equality check predicate on the "entry_sum" field. It's identical to EntrySumEQ.
func EntrySum(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntrySum, v))
}

// EntryLastAt applies equality check predicate on the "entry_last_at" field. It's identical to EntryLastAtEQ.
func EntryLastAt(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntryLastAt, v))
}

// EntryDeadlineAt applies equality check predicate on the "entry_deadline_at" field. It's identical to EntryDeadlineAtEQ.
func EntryDeadlineAt(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntryDeadlineAt, v))
}

// ClassLastAt applies equality check predicate on the "class_last_at" field. It's identical to ClassLastAtEQ.
func ClassLastAt(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldClassLastAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldCreatedID))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldMemberID))
}

// MoneySumEQ applies the EQ predicate on the "money_sum" field.
func MoneySumEQ(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldMoneySum, v))
}

// MoneySumNEQ applies the NEQ predicate on the "money_sum" field.
func MoneySumNEQ(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldMoneySum, v))
}

// MoneySumIn applies the In predicate on the "money_sum" field.
func MoneySumIn(vs ...float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldMoneySum, vs...))
}

// MoneySumNotIn applies the NotIn predicate on the "money_sum" field.
func MoneySumNotIn(vs ...float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldMoneySum, vs...))
}

// MoneySumGT applies the GT predicate on the "money_sum" field.
func MoneySumGT(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldMoneySum, v))
}

// MoneySumGTE applies the GTE predicate on the "money_sum" field.
func MoneySumGTE(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldMoneySum, v))
}

// MoneySumLT applies the LT predicate on the "money_sum" field.
func MoneySumLT(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldMoneySum, v))
}

// MoneySumLTE applies the LTE predicate on the "money_sum" field.
func MoneySumLTE(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldMoneySum, v))
}

// MoneySumIsNil applies the IsNil predicate on the "money_sum" field.
func MoneySumIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldMoneySum))
}

// MoneySumNotNil applies the NotNil predicate on the "money_sum" field.
func MoneySumNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldMoneySum))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldProductID))
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductName, v))
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldProductName, v))
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldProductName, vs...))
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldProductName, vs...))
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldProductName, v))
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldProductName, v))
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldProductName, v))
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldProductName, v))
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContains(FieldProductName, v))
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasPrefix(FieldProductName, v))
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasSuffix(FieldProductName, v))
}

// ProductNameIsNil applies the IsNil predicate on the "product_name" field.
func ProductNameIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldProductName))
}

// ProductNameNotNil applies the NotNil predicate on the "product_name" field.
func ProductNameNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldProductName))
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEqualFold(FieldProductName, v))
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContainsFold(FieldProductName, v))
}

// EntrySumEQ applies the EQ predicate on the "entry_sum" field.
func EntrySumEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntrySum, v))
}

// EntrySumNEQ applies the NEQ predicate on the "entry_sum" field.
func EntrySumNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldEntrySum, v))
}

// EntrySumIn applies the In predicate on the "entry_sum" field.
func EntrySumIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldEntrySum, vs...))
}

// EntrySumNotIn applies the NotIn predicate on the "entry_sum" field.
func EntrySumNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldEntrySum, vs...))
}

// EntrySumGT applies the GT predicate on the "entry_sum" field.
func EntrySumGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldEntrySum, v))
}

// EntrySumGTE applies the GTE predicate on the "entry_sum" field.
func EntrySumGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldEntrySum, v))
}

// EntrySumLT applies the LT predicate on the "entry_sum" field.
func EntrySumLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldEntrySum, v))
}

// EntrySumLTE applies the LTE predicate on the "entry_sum" field.
func EntrySumLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldEntrySum, v))
}

// EntrySumIsNil applies the IsNil predicate on the "entry_sum" field.
func EntrySumIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldEntrySum))
}

// EntrySumNotNil applies the NotNil predicate on the "entry_sum" field.
func EntrySumNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldEntrySum))
}

// EntryLastAtEQ applies the EQ predicate on the "entry_last_at" field.
func EntryLastAtEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntryLastAt, v))
}

// EntryLastAtNEQ applies the NEQ predicate on the "entry_last_at" field.
func EntryLastAtNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldEntryLastAt, v))
}

// EntryLastAtIn applies the In predicate on the "entry_last_at" field.
func EntryLastAtIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldEntryLastAt, vs...))
}

// EntryLastAtNotIn applies the NotIn predicate on the "entry_last_at" field.
func EntryLastAtNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldEntryLastAt, vs...))
}

// EntryLastAtGT applies the GT predicate on the "entry_last_at" field.
func EntryLastAtGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldEntryLastAt, v))
}

// EntryLastAtGTE applies the GTE predicate on the "entry_last_at" field.
func EntryLastAtGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldEntryLastAt, v))
}

// EntryLastAtLT applies the LT predicate on the "entry_last_at" field.
func EntryLastAtLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldEntryLastAt, v))
}

// EntryLastAtLTE applies the LTE predicate on the "entry_last_at" field.
func EntryLastAtLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldEntryLastAt, v))
}

// EntryLastAtIsNil applies the IsNil predicate on the "entry_last_at" field.
func EntryLastAtIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldEntryLastAt))
}

// EntryLastAtNotNil applies the NotNil predicate on the "entry_last_at" field.
func EntryLastAtNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldEntryLastAt))
}

// EntryDeadlineAtEQ applies the EQ predicate on the "entry_deadline_at" field.
func EntryDeadlineAtEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntryDeadlineAt, v))
}

// EntryDeadlineAtNEQ applies the NEQ predicate on the "entry_deadline_at" field.
func EntryDeadlineAtNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldEntryDeadlineAt, v))
}

// EntryDeadlineAtIn applies the In predicate on the "entry_deadline_at" field.
func EntryDeadlineAtIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldEntryDeadlineAt, vs...))
}

// EntryDeadlineAtNotIn applies the NotIn predicate on the "entry_deadline_at" field.
func EntryDeadlineAtNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldEntryDeadlineAt, vs...))
}

// EntryDeadlineAtGT applies the GT predicate on the "entry_deadline_at" field.
func EntryDeadlineAtGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldEntryDeadlineAt, v))
}

// EntryDeadlineAtGTE applies the GTE predicate on the "entry_deadline_at" field.
func EntryDeadlineAtGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldEntryDeadlineAt, v))
}

// EntryDeadlineAtLT applies the LT predicate on the "entry_deadline_at" field.
func EntryDeadlineAtLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldEntryDeadlineAt, v))
}

// EntryDeadlineAtLTE applies the LTE predicate on the "entry_deadline_at" field.
func EntryDeadlineAtLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldEntryDeadlineAt, v))
}

// EntryDeadlineAtIsNil applies the IsNil predicate on the "entry_deadline_at" field.
func EntryDeadlineAtIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldEntryDeadlineAt))
}

// EntryDeadlineAtNotNil applies the NotNil predicate on the "entry_deadline_at" field.
func EntryDeadlineAtNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldEntryDeadlineAt))
}

// ClassLastAtEQ applies the EQ predicate on the "class_last_at" field.
func ClassLastAtEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldClassLastAt, v))
}

// ClassLastAtNEQ applies the NEQ predicate on the "class_last_at" field.
func ClassLastAtNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldClassLastAt, v))
}

// ClassLastAtIn applies the In predicate on the "class_last_at" field.
func ClassLastAtIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldClassLastAt, vs...))
}

// ClassLastAtNotIn applies the NotIn predicate on the "class_last_at" field.
func ClassLastAtNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldClassLastAt, vs...))
}

// ClassLastAtGT applies the GT predicate on the "class_last_at" field.
func ClassLastAtGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldClassLastAt, v))
}

// ClassLastAtGTE applies the GTE predicate on the "class_last_at" field.
func ClassLastAtGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldClassLastAt, v))
}

// ClassLastAtLT applies the LT predicate on the "class_last_at" field.
func ClassLastAtLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldClassLastAt, v))
}

// ClassLastAtLTE applies the LTE predicate on the "class_last_at" field.
func ClassLastAtLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldClassLastAt, v))
}

// ClassLastAtIsNil applies the IsNil predicate on the "class_last_at" field.
func ClassLastAtIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldClassLastAt))
}

// ClassLastAtNotNil applies the NotNil predicate on the "class_last_at" field.
func ClassLastAtNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldClassLastAt))
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.MemberDetails {
	return predicate.MemberDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.MemberDetails {
	return predicate.MemberDetails(func(s *sql.Selector) {
		step := newMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberDetails) predicate.MemberDetails {
	return predicate.MemberDetails(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberDetails) predicate.MemberDetails {
	return predicate.MemberDetails(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberDetails) predicate.MemberDetails {
	return predicate.MemberDetails(sql.NotPredicates(p))
}
