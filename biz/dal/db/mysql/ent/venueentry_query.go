// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/member"
	"kcers/biz/dal/db/mysql/ent/memberproduct"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"kcers/biz/dal/db/mysql/ent/user"
	"kcers/biz/dal/db/mysql/ent/venue"
	"kcers/biz/dal/db/mysql/ent/venueentry"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueEntryQuery is the builder for querying VenueEntry entities.
type VenueEntryQuery struct {
	config
	ctx                *QueryContext
	order              []venueentry.OrderOption
	inters             []Interceptor
	predicates         []predicate.VenueEntry
	withVenues         *VenueQuery
	withMembers        *MemberQuery
	withUsers          *UserQuery
	withMemberProducts *MemberProductQuery
	modifiers          []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VenueEntryQuery builder.
func (veq *VenueEntryQuery) Where(ps ...predicate.VenueEntry) *VenueEntryQuery {
	veq.predicates = append(veq.predicates, ps...)
	return veq
}

// Limit the number of records to be returned by this query.
func (veq *VenueEntryQuery) Limit(limit int) *VenueEntryQuery {
	veq.ctx.Limit = &limit
	return veq
}

// Offset to start from.
func (veq *VenueEntryQuery) Offset(offset int) *VenueEntryQuery {
	veq.ctx.Offset = &offset
	return veq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (veq *VenueEntryQuery) Unique(unique bool) *VenueEntryQuery {
	veq.ctx.Unique = &unique
	return veq
}

// Order specifies how the records should be ordered.
func (veq *VenueEntryQuery) Order(o ...venueentry.OrderOption) *VenueEntryQuery {
	veq.order = append(veq.order, o...)
	return veq
}

// QueryVenues chains the current query on the "venues" edge.
func (veq *VenueEntryQuery) QueryVenues() *VenueQuery {
	query := (&VenueClient{config: veq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := veq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := veq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venueentry.Table, venueentry.FieldID, selector),
			sqlgraph.To(venue.Table, venue.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, venueentry.VenuesTable, venueentry.VenuesColumn),
		)
		fromU = sqlgraph.SetNeighbors(veq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMembers chains the current query on the "members" edge.
func (veq *VenueEntryQuery) QueryMembers() *MemberQuery {
	query := (&MemberClient{config: veq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := veq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := veq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venueentry.Table, venueentry.FieldID, selector),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, venueentry.MembersTable, venueentry.MembersColumn),
		)
		fromU = sqlgraph.SetNeighbors(veq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (veq *VenueEntryQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: veq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := veq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := veq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venueentry.Table, venueentry.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, venueentry.UsersTable, venueentry.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(veq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMemberProducts chains the current query on the "member_products" edge.
func (veq *VenueEntryQuery) QueryMemberProducts() *MemberProductQuery {
	query := (&MemberProductClient{config: veq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := veq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := veq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venueentry.Table, venueentry.FieldID, selector),
			sqlgraph.To(memberproduct.Table, memberproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, venueentry.MemberProductsTable, venueentry.MemberProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(veq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VenueEntry entity from the query.
// Returns a *NotFoundError when no VenueEntry was found.
func (veq *VenueEntryQuery) First(ctx context.Context) (*VenueEntry, error) {
	nodes, err := veq.Limit(1).All(setContextOp(ctx, veq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{venueentry.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (veq *VenueEntryQuery) FirstX(ctx context.Context) *VenueEntry {
	node, err := veq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VenueEntry ID from the query.
// Returns a *NotFoundError when no VenueEntry ID was found.
func (veq *VenueEntryQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = veq.Limit(1).IDs(setContextOp(ctx, veq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{venueentry.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (veq *VenueEntryQuery) FirstIDX(ctx context.Context) int64 {
	id, err := veq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VenueEntry entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VenueEntry entity is found.
// Returns a *NotFoundError when no VenueEntry entities are found.
func (veq *VenueEntryQuery) Only(ctx context.Context) (*VenueEntry, error) {
	nodes, err := veq.Limit(2).All(setContextOp(ctx, veq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{venueentry.Label}
	default:
		return nil, &NotSingularError{venueentry.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (veq *VenueEntryQuery) OnlyX(ctx context.Context) *VenueEntry {
	node, err := veq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VenueEntry ID in the query.
// Returns a *NotSingularError when more than one VenueEntry ID is found.
// Returns a *NotFoundError when no entities are found.
func (veq *VenueEntryQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = veq.Limit(2).IDs(setContextOp(ctx, veq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{venueentry.Label}
	default:
		err = &NotSingularError{venueentry.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (veq *VenueEntryQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := veq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VenueEntries.
func (veq *VenueEntryQuery) All(ctx context.Context) ([]*VenueEntry, error) {
	ctx = setContextOp(ctx, veq.ctx, ent.OpQueryAll)
	if err := veq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VenueEntry, *VenueEntryQuery]()
	return withInterceptors[[]*VenueEntry](ctx, veq, qr, veq.inters)
}

// AllX is like All, but panics if an error occurs.
func (veq *VenueEntryQuery) AllX(ctx context.Context) []*VenueEntry {
	nodes, err := veq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VenueEntry IDs.
func (veq *VenueEntryQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if veq.ctx.Unique == nil && veq.path != nil {
		veq.Unique(true)
	}
	ctx = setContextOp(ctx, veq.ctx, ent.OpQueryIDs)
	if err = veq.Select(venueentry.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (veq *VenueEntryQuery) IDsX(ctx context.Context) []int64 {
	ids, err := veq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (veq *VenueEntryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, veq.ctx, ent.OpQueryCount)
	if err := veq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, veq, querierCount[*VenueEntryQuery](), veq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (veq *VenueEntryQuery) CountX(ctx context.Context) int {
	count, err := veq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (veq *VenueEntryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, veq.ctx, ent.OpQueryExist)
	switch _, err := veq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (veq *VenueEntryQuery) ExistX(ctx context.Context) bool {
	exist, err := veq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VenueEntryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (veq *VenueEntryQuery) Clone() *VenueEntryQuery {
	if veq == nil {
		return nil
	}
	return &VenueEntryQuery{
		config:             veq.config,
		ctx:                veq.ctx.Clone(),
		order:              append([]venueentry.OrderOption{}, veq.order...),
		inters:             append([]Interceptor{}, veq.inters...),
		predicates:         append([]predicate.VenueEntry{}, veq.predicates...),
		withVenues:         veq.withVenues.Clone(),
		withMembers:        veq.withMembers.Clone(),
		withUsers:          veq.withUsers.Clone(),
		withMemberProducts: veq.withMemberProducts.Clone(),
		// clone intermediate query.
		sql:       veq.sql.Clone(),
		path:      veq.path,
		modifiers: append([]func(*sql.Selector){}, veq.modifiers...),
	}
}

// WithVenues tells the query-builder to eager-load the nodes that are connected to
// the "venues" edge. The optional arguments are used to configure the query builder of the edge.
func (veq *VenueEntryQuery) WithVenues(opts ...func(*VenueQuery)) *VenueEntryQuery {
	query := (&VenueClient{config: veq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	veq.withVenues = query
	return veq
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (veq *VenueEntryQuery) WithMembers(opts ...func(*MemberQuery)) *VenueEntryQuery {
	query := (&MemberClient{config: veq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	veq.withMembers = query
	return veq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (veq *VenueEntryQuery) WithUsers(opts ...func(*UserQuery)) *VenueEntryQuery {
	query := (&UserClient{config: veq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	veq.withUsers = query
	return veq
}

// WithMemberProducts tells the query-builder to eager-load the nodes that are connected to
// the "member_products" edge. The optional arguments are used to configure the query builder of the edge.
func (veq *VenueEntryQuery) WithMemberProducts(opts ...func(*MemberProductQuery)) *VenueEntryQuery {
	query := (&MemberProductClient{config: veq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	veq.withMemberProducts = query
	return veq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VenueEntry.Query().
//		GroupBy(venueentry.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (veq *VenueEntryQuery) GroupBy(field string, fields ...string) *VenueEntryGroupBy {
	veq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VenueEntryGroupBy{build: veq}
	grbuild.flds = &veq.ctx.Fields
	grbuild.label = venueentry.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VenueEntry.Query().
//		Select(venueentry.FieldCreatedAt).
//		Scan(ctx, &v)
func (veq *VenueEntryQuery) Select(fields ...string) *VenueEntrySelect {
	veq.ctx.Fields = append(veq.ctx.Fields, fields...)
	sbuild := &VenueEntrySelect{VenueEntryQuery: veq}
	sbuild.label = venueentry.Label
	sbuild.flds, sbuild.scan = &veq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VenueEntrySelect configured with the given aggregations.
func (veq *VenueEntryQuery) Aggregate(fns ...AggregateFunc) *VenueEntrySelect {
	return veq.Select().Aggregate(fns...)
}

func (veq *VenueEntryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range veq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, veq); err != nil {
				return err
			}
		}
	}
	for _, f := range veq.ctx.Fields {
		if !venueentry.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if veq.path != nil {
		prev, err := veq.path(ctx)
		if err != nil {
			return err
		}
		veq.sql = prev
	}
	return nil
}

func (veq *VenueEntryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VenueEntry, error) {
	var (
		nodes       = []*VenueEntry{}
		_spec       = veq.querySpec()
		loadedTypes = [4]bool{
			veq.withVenues != nil,
			veq.withMembers != nil,
			veq.withUsers != nil,
			veq.withMemberProducts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VenueEntry).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VenueEntry{config: veq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(veq.modifiers) > 0 {
		_spec.Modifiers = veq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, veq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := veq.withVenues; query != nil {
		if err := veq.loadVenues(ctx, query, nodes, nil,
			func(n *VenueEntry, e *Venue) { n.Edges.Venues = e }); err != nil {
			return nil, err
		}
	}
	if query := veq.withMembers; query != nil {
		if err := veq.loadMembers(ctx, query, nodes, nil,
			func(n *VenueEntry, e *Member) { n.Edges.Members = e }); err != nil {
			return nil, err
		}
	}
	if query := veq.withUsers; query != nil {
		if err := veq.loadUsers(ctx, query, nodes, nil,
			func(n *VenueEntry, e *User) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	if query := veq.withMemberProducts; query != nil {
		if err := veq.loadMemberProducts(ctx, query, nodes, nil,
			func(n *VenueEntry, e *MemberProduct) { n.Edges.MemberProducts = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (veq *VenueEntryQuery) loadVenues(ctx context.Context, query *VenueQuery, nodes []*VenueEntry, init func(*VenueEntry), assign func(*VenueEntry, *Venue)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*VenueEntry)
	for i := range nodes {
		fk := nodes[i].VenueID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(venue.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "venue_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (veq *VenueEntryQuery) loadMembers(ctx context.Context, query *MemberQuery, nodes []*VenueEntry, init func(*VenueEntry), assign func(*VenueEntry, *Member)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*VenueEntry)
	for i := range nodes {
		fk := nodes[i].MemberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(member.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "member_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (veq *VenueEntryQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*VenueEntry, init func(*VenueEntry), assign func(*VenueEntry, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*VenueEntry)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (veq *VenueEntryQuery) loadMemberProducts(ctx context.Context, query *MemberProductQuery, nodes []*VenueEntry, init func(*VenueEntry), assign func(*VenueEntry, *MemberProduct)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*VenueEntry)
	for i := range nodes {
		fk := nodes[i].MemberProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(memberproduct.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "member_product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (veq *VenueEntryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := veq.querySpec()
	if len(veq.modifiers) > 0 {
		_spec.Modifiers = veq.modifiers
	}
	_spec.Node.Columns = veq.ctx.Fields
	if len(veq.ctx.Fields) > 0 {
		_spec.Unique = veq.ctx.Unique != nil && *veq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, veq.driver, _spec)
}

func (veq *VenueEntryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(venueentry.Table, venueentry.Columns, sqlgraph.NewFieldSpec(venueentry.FieldID, field.TypeInt64))
	_spec.From = veq.sql
	if unique := veq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if veq.path != nil {
		_spec.Unique = true
	}
	if fields := veq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venueentry.FieldID)
		for i := range fields {
			if fields[i] != venueentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if veq.withVenues != nil {
			_spec.Node.AddColumnOnce(venueentry.FieldVenueID)
		}
		if veq.withMembers != nil {
			_spec.Node.AddColumnOnce(venueentry.FieldMemberID)
		}
		if veq.withUsers != nil {
			_spec.Node.AddColumnOnce(venueentry.FieldUserID)
		}
		if veq.withMemberProducts != nil {
			_spec.Node.AddColumnOnce(venueentry.FieldMemberProductID)
		}
	}
	if ps := veq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := veq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := veq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := veq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (veq *VenueEntryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(veq.driver.Dialect())
	t1 := builder.Table(venueentry.Table)
	columns := veq.ctx.Fields
	if len(columns) == 0 {
		columns = venueentry.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if veq.sql != nil {
		selector = veq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if veq.ctx.Unique != nil && *veq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range veq.modifiers {
		m(selector)
	}
	for _, p := range veq.predicates {
		p(selector)
	}
	for _, p := range veq.order {
		p(selector)
	}
	if offset := veq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := veq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (veq *VenueEntryQuery) Modify(modifiers ...func(s *sql.Selector)) *VenueEntrySelect {
	veq.modifiers = append(veq.modifiers, modifiers...)
	return veq.Select()
}

// VenueEntryGroupBy is the group-by builder for VenueEntry entities.
type VenueEntryGroupBy struct {
	selector
	build *VenueEntryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vegb *VenueEntryGroupBy) Aggregate(fns ...AggregateFunc) *VenueEntryGroupBy {
	vegb.fns = append(vegb.fns, fns...)
	return vegb
}

// Scan applies the selector query and scans the result into the given value.
func (vegb *VenueEntryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vegb.build.ctx, ent.OpQueryGroupBy)
	if err := vegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VenueEntryQuery, *VenueEntryGroupBy](ctx, vegb.build, vegb, vegb.build.inters, v)
}

func (vegb *VenueEntryGroupBy) sqlScan(ctx context.Context, root *VenueEntryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vegb.fns))
	for _, fn := range vegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vegb.flds)+len(vegb.fns))
		for _, f := range *vegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VenueEntrySelect is the builder for selecting fields of VenueEntry entities.
type VenueEntrySelect struct {
	*VenueEntryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ves *VenueEntrySelect) Aggregate(fns ...AggregateFunc) *VenueEntrySelect {
	ves.fns = append(ves.fns, fns...)
	return ves
}

// Scan applies the selector query and scans the result into the given value.
func (ves *VenueEntrySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ves.ctx, ent.OpQuerySelect)
	if err := ves.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VenueEntryQuery, *VenueEntrySelect](ctx, ves.VenueEntryQuery, ves, ves.inters, v)
}

func (ves *VenueEntrySelect) sqlScan(ctx context.Context, root *VenueEntryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ves.fns))
	for _, fn := range ves.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ves.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ves.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ves *VenueEntrySelect) Modify(modifiers ...func(s *sql.Selector)) *VenueEntrySelect {
	ves.modifiers = append(ves.modifiers, modifiers...)
	return ves
}
