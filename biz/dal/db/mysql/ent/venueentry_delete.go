// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"kcers/biz/dal/db/mysql/ent/venueentry"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueEntryDelete is the builder for deleting a VenueEntry entity.
type VenueEntryDelete struct {
	config
	hooks    []Hook
	mutation *VenueEntryMutation
}

// Where appends a list predicates to the VenueEntryDelete builder.
func (ved *VenueEntryDelete) Where(ps ...predicate.VenueEntry) *VenueEntryDelete {
	ved.mutation.Where(ps...)
	return ved
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ved *VenueEntryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ved.sqlExec, ved.mutation, ved.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ved *VenueEntryDelete) ExecX(ctx context.Context) int {
	n, err := ved.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ved *VenueEntryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(venueentry.Table, sqlgraph.NewFieldSpec(venueentry.FieldID, field.TypeInt64))
	if ps := ved.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ved.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ved.mutation.done = true
	return affected, err
}

// VenueEntryDeleteOne is the builder for deleting a single VenueEntry entity.
type VenueEntryDeleteOne struct {
	ved *VenueEntryDelete
}

// Where appends a list predicates to the VenueEntryDelete builder.
func (vedo *VenueEntryDeleteOne) Where(ps ...predicate.VenueEntry) *VenueEntryDeleteOne {
	vedo.ved.mutation.Where(ps...)
	return vedo
}

// Exec executes the deletion query.
func (vedo *VenueEntryDeleteOne) Exec(ctx context.Context) error {
	n, err := vedo.ved.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{venueentry.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vedo *VenueEntryDeleteOne) ExecX(ctx context.Context) {
	if err := vedo.Exec(ctx); err != nil {
		panic(err)
	}
}
