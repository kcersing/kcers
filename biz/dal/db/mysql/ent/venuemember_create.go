// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/member"
	"kcers/biz/dal/db/mysql/ent/venuemember"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueMemberCreate is the builder for creating a VenueMember entity.
type VenueMemberCreate struct {
	config
	mutation *VenueMemberMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vmc *VenueMemberCreate) SetCreatedAt(t time.Time) *VenueMemberCreate {
	vmc.mutation.SetCreatedAt(t)
	return vmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableCreatedAt(t *time.Time) *VenueMemberCreate {
	if t != nil {
		vmc.SetCreatedAt(*t)
	}
	return vmc
}

// SetUpdatedAt sets the "updated_at" field.
func (vmc *VenueMemberCreate) SetUpdatedAt(t time.Time) *VenueMemberCreate {
	vmc.mutation.SetUpdatedAt(t)
	return vmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableUpdatedAt(t *time.Time) *VenueMemberCreate {
	if t != nil {
		vmc.SetUpdatedAt(*t)
	}
	return vmc
}

// SetDelete sets the "delete" field.
func (vmc *VenueMemberCreate) SetDelete(i int64) *VenueMemberCreate {
	vmc.mutation.SetDelete(i)
	return vmc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableDelete(i *int64) *VenueMemberCreate {
	if i != nil {
		vmc.SetDelete(*i)
	}
	return vmc
}

// SetCreatedID sets the "created_id" field.
func (vmc *VenueMemberCreate) SetCreatedID(i int64) *VenueMemberCreate {
	vmc.mutation.SetCreatedID(i)
	return vmc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableCreatedID(i *int64) *VenueMemberCreate {
	if i != nil {
		vmc.SetCreatedID(*i)
	}
	return vmc
}

// SetMemberID sets the "member_id" field.
func (vmc *VenueMemberCreate) SetMemberID(i int64) *VenueMemberCreate {
	vmc.mutation.SetMemberID(i)
	return vmc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableMemberID(i *int64) *VenueMemberCreate {
	if i != nil {
		vmc.SetMemberID(*i)
	}
	return vmc
}

// SetVenueID sets the "venue_id" field.
func (vmc *VenueMemberCreate) SetVenueID(i int64) *VenueMemberCreate {
	vmc.mutation.SetVenueID(i)
	return vmc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableVenueID(i *int64) *VenueMemberCreate {
	if i != nil {
		vmc.SetVenueID(*i)
	}
	return vmc
}

// SetMoneySum sets the "money_sum" field.
func (vmc *VenueMemberCreate) SetMoneySum(f float64) *VenueMemberCreate {
	vmc.mutation.SetMoneySum(f)
	return vmc
}

// SetNillableMoneySum sets the "money_sum" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableMoneySum(f *float64) *VenueMemberCreate {
	if f != nil {
		vmc.SetMoneySum(*f)
	}
	return vmc
}

// SetProductID sets the "product_id" field.
func (vmc *VenueMemberCreate) SetProductID(i int64) *VenueMemberCreate {
	vmc.mutation.SetProductID(i)
	return vmc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableProductID(i *int64) *VenueMemberCreate {
	if i != nil {
		vmc.SetProductID(*i)
	}
	return vmc
}

// SetProductName sets the "product_name" field.
func (vmc *VenueMemberCreate) SetProductName(s string) *VenueMemberCreate {
	vmc.mutation.SetProductName(s)
	return vmc
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableProductName(s *string) *VenueMemberCreate {
	if s != nil {
		vmc.SetProductName(*s)
	}
	return vmc
}

// SetEntrySum sets the "entry_sum" field.
func (vmc *VenueMemberCreate) SetEntrySum(i int64) *VenueMemberCreate {
	vmc.mutation.SetEntrySum(i)
	return vmc
}

// SetNillableEntrySum sets the "entry_sum" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableEntrySum(i *int64) *VenueMemberCreate {
	if i != nil {
		vmc.SetEntrySum(*i)
	}
	return vmc
}

// SetEntryLastAt sets the "entry_last_at" field.
func (vmc *VenueMemberCreate) SetEntryLastAt(t time.Time) *VenueMemberCreate {
	vmc.mutation.SetEntryLastAt(t)
	return vmc
}

// SetNillableEntryLastAt sets the "entry_last_at" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableEntryLastAt(t *time.Time) *VenueMemberCreate {
	if t != nil {
		vmc.SetEntryLastAt(*t)
	}
	return vmc
}

// SetEntryDeadlineAt sets the "entry_deadline_at" field.
func (vmc *VenueMemberCreate) SetEntryDeadlineAt(t time.Time) *VenueMemberCreate {
	vmc.mutation.SetEntryDeadlineAt(t)
	return vmc
}

// SetNillableEntryDeadlineAt sets the "entry_deadline_at" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableEntryDeadlineAt(t *time.Time) *VenueMemberCreate {
	if t != nil {
		vmc.SetEntryDeadlineAt(*t)
	}
	return vmc
}

// SetClassLastAt sets the "class_last_at" field.
func (vmc *VenueMemberCreate) SetClassLastAt(t time.Time) *VenueMemberCreate {
	vmc.mutation.SetClassLastAt(t)
	return vmc
}

// SetNillableClassLastAt sets the "class_last_at" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableClassLastAt(t *time.Time) *VenueMemberCreate {
	if t != nil {
		vmc.SetClassLastAt(*t)
	}
	return vmc
}

// SetRelationUID sets the "relation_uid" field.
func (vmc *VenueMemberCreate) SetRelationUID(i int64) *VenueMemberCreate {
	vmc.mutation.SetRelationUID(i)
	return vmc
}

// SetNillableRelationUID sets the "relation_uid" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableRelationUID(i *int64) *VenueMemberCreate {
	if i != nil {
		vmc.SetRelationUID(*i)
	}
	return vmc
}

// SetRelationUname sets the "relation_uname" field.
func (vmc *VenueMemberCreate) SetRelationUname(s string) *VenueMemberCreate {
	vmc.mutation.SetRelationUname(s)
	return vmc
}

// SetNillableRelationUname sets the "relation_uname" field if the given value is not nil.
func (vmc *VenueMemberCreate) SetNillableRelationUname(s *string) *VenueMemberCreate {
	if s != nil {
		vmc.SetRelationUname(*s)
	}
	return vmc
}

// SetID sets the "id" field.
func (vmc *VenueMemberCreate) SetID(i int64) *VenueMemberCreate {
	vmc.mutation.SetID(i)
	return vmc
}

// SetMember sets the "member" edge to the Member entity.
func (vmc *VenueMemberCreate) SetMember(m *Member) *VenueMemberCreate {
	return vmc.SetMemberID(m.ID)
}

// Mutation returns the VenueMemberMutation object of the builder.
func (vmc *VenueMemberCreate) Mutation() *VenueMemberMutation {
	return vmc.mutation
}

// Save creates the VenueMember in the database.
func (vmc *VenueMemberCreate) Save(ctx context.Context) (*VenueMember, error) {
	vmc.defaults()
	return withHooks(ctx, vmc.sqlSave, vmc.mutation, vmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vmc *VenueMemberCreate) SaveX(ctx context.Context) *VenueMember {
	v, err := vmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmc *VenueMemberCreate) Exec(ctx context.Context) error {
	_, err := vmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmc *VenueMemberCreate) ExecX(ctx context.Context) {
	if err := vmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmc *VenueMemberCreate) defaults() {
	if _, ok := vmc.mutation.CreatedAt(); !ok {
		v := venuemember.DefaultCreatedAt()
		vmc.mutation.SetCreatedAt(v)
	}
	if _, ok := vmc.mutation.UpdatedAt(); !ok {
		v := venuemember.DefaultUpdatedAt()
		vmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vmc.mutation.Delete(); !ok {
		v := venuemember.DefaultDelete
		vmc.mutation.SetDelete(v)
	}
	if _, ok := vmc.mutation.CreatedID(); !ok {
		v := venuemember.DefaultCreatedID
		vmc.mutation.SetCreatedID(v)
	}
	if _, ok := vmc.mutation.MoneySum(); !ok {
		v := venuemember.DefaultMoneySum
		vmc.mutation.SetMoneySum(v)
	}
	if _, ok := vmc.mutation.ProductID(); !ok {
		v := venuemember.DefaultProductID
		vmc.mutation.SetProductID(v)
	}
	if _, ok := vmc.mutation.EntrySum(); !ok {
		v := venuemember.DefaultEntrySum
		vmc.mutation.SetEntrySum(v)
	}
	if _, ok := vmc.mutation.RelationUID(); !ok {
		v := venuemember.DefaultRelationUID
		vmc.mutation.SetRelationUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmc *VenueMemberCreate) check() error {
	return nil
}

func (vmc *VenueMemberCreate) sqlSave(ctx context.Context) (*VenueMember, error) {
	if err := vmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	vmc.mutation.id = &_node.ID
	vmc.mutation.done = true
	return _node, nil
}

func (vmc *VenueMemberCreate) createSpec() (*VenueMember, *sqlgraph.CreateSpec) {
	var (
		_node = &VenueMember{config: vmc.config}
		_spec = sqlgraph.NewCreateSpec(venuemember.Table, sqlgraph.NewFieldSpec(venuemember.FieldID, field.TypeInt64))
	)
	if id, ok := vmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vmc.mutation.CreatedAt(); ok {
		_spec.SetField(venuemember.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vmc.mutation.UpdatedAt(); ok {
		_spec.SetField(venuemember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vmc.mutation.Delete(); ok {
		_spec.SetField(venuemember.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := vmc.mutation.CreatedID(); ok {
		_spec.SetField(venuemember.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := vmc.mutation.VenueID(); ok {
		_spec.SetField(venuemember.FieldVenueID, field.TypeInt64, value)
		_node.VenueID = value
	}
	if value, ok := vmc.mutation.MoneySum(); ok {
		_spec.SetField(venuemember.FieldMoneySum, field.TypeFloat64, value)
		_node.MoneySum = value
	}
	if value, ok := vmc.mutation.ProductID(); ok {
		_spec.SetField(venuemember.FieldProductID, field.TypeInt64, value)
		_node.ProductID = value
	}
	if value, ok := vmc.mutation.ProductName(); ok {
		_spec.SetField(venuemember.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := vmc.mutation.EntrySum(); ok {
		_spec.SetField(venuemember.FieldEntrySum, field.TypeInt64, value)
		_node.EntrySum = value
	}
	if value, ok := vmc.mutation.EntryLastAt(); ok {
		_spec.SetField(venuemember.FieldEntryLastAt, field.TypeTime, value)
		_node.EntryLastAt = value
	}
	if value, ok := vmc.mutation.EntryDeadlineAt(); ok {
		_spec.SetField(venuemember.FieldEntryDeadlineAt, field.TypeTime, value)
		_node.EntryDeadlineAt = value
	}
	if value, ok := vmc.mutation.ClassLastAt(); ok {
		_spec.SetField(venuemember.FieldClassLastAt, field.TypeTime, value)
		_node.ClassLastAt = value
	}
	if value, ok := vmc.mutation.RelationUID(); ok {
		_spec.SetField(venuemember.FieldRelationUID, field.TypeInt64, value)
		_node.RelationUID = value
	}
	if value, ok := vmc.mutation.RelationUname(); ok {
		_spec.SetField(venuemember.FieldRelationUname, field.TypeString, value)
		_node.RelationUname = value
	}
	if nodes := vmc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuemember.MemberTable,
			Columns: []string{venuemember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VenueMemberCreateBulk is the builder for creating many VenueMember entities in bulk.
type VenueMemberCreateBulk struct {
	config
	err      error
	builders []*VenueMemberCreate
}

// Save creates the VenueMember entities in the database.
func (vmcb *VenueMemberCreateBulk) Save(ctx context.Context) ([]*VenueMember, error) {
	if vmcb.err != nil {
		return nil, vmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vmcb.builders))
	nodes := make([]*VenueMember, len(vmcb.builders))
	mutators := make([]Mutator, len(vmcb.builders))
	for i := range vmcb.builders {
		func(i int, root context.Context) {
			builder := vmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VenueMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vmcb *VenueMemberCreateBulk) SaveX(ctx context.Context) []*VenueMember {
	v, err := vmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmcb *VenueMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := vmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmcb *VenueMemberCreateBulk) ExecX(ctx context.Context) {
	if err := vmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
