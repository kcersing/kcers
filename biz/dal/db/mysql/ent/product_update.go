// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"kcers/biz/dal/db/mysql/ent/product"
	"kcers/biz/dal/db/mysql/ent/productproperty"
	"kcers/biz/dal/db/mysql/ent/venue"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *ProductUpdate) ClearUpdatedAt() *ProductUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// SetDelete sets the "delete" field.
func (pu *ProductUpdate) SetDelete(i int64) *ProductUpdate {
	pu.mutation.ResetDelete()
	pu.mutation.SetDelete(i)
	return pu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDelete(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetDelete(*i)
	}
	return pu
}

// AddDelete adds i to the "delete" field.
func (pu *ProductUpdate) AddDelete(i int64) *ProductUpdate {
	pu.mutation.AddDelete(i)
	return pu
}

// ClearDelete clears the value of the "delete" field.
func (pu *ProductUpdate) ClearDelete() *ProductUpdate {
	pu.mutation.ClearDelete()
	return pu
}

// SetCreatedID sets the "created_id" field.
func (pu *ProductUpdate) SetCreatedID(i int64) *ProductUpdate {
	pu.mutation.ResetCreatedID()
	pu.mutation.SetCreatedID(i)
	return pu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedID(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetCreatedID(*i)
	}
	return pu
}

// AddCreatedID adds i to the "created_id" field.
func (pu *ProductUpdate) AddCreatedID(i int64) *ProductUpdate {
	pu.mutation.AddCreatedID(i)
	return pu
}

// ClearCreatedID clears the value of the "created_id" field.
func (pu *ProductUpdate) ClearCreatedID() *ProductUpdate {
	pu.mutation.ClearCreatedID()
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProductUpdate) SetStatus(i int64) *ProductUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStatus(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *ProductUpdate) AddStatus(i int64) *ProductUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// ClearStatus clears the value of the "status" field.
func (pu *ProductUpdate) ClearStatus() *ProductUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *ProductUpdate) ClearName() *ProductUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetPic sets the "pic" field.
func (pu *ProductUpdate) SetPic(s string) *ProductUpdate {
	pu.mutation.SetPic(s)
	return pu
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePic(s *string) *ProductUpdate {
	if s != nil {
		pu.SetPic(*s)
	}
	return pu
}

// ClearPic clears the value of the "pic" field.
func (pu *ProductUpdate) ClearPic() *ProductUpdate {
	pu.mutation.ClearPic()
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDescription(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProductUpdate) ClearDescription() *ProductUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(f float64) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *ProductUpdate) AddPrice(f float64) *ProductUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// ClearPrice clears the value of the "price" field.
func (pu *ProductUpdate) ClearPrice() *ProductUpdate {
	pu.mutation.ClearPrice()
	return pu
}

// SetStock sets the "stock" field.
func (pu *ProductUpdate) SetStock(i int64) *ProductUpdate {
	pu.mutation.ResetStock()
	pu.mutation.SetStock(i)
	return pu
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStock(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetStock(*i)
	}
	return pu
}

// AddStock adds i to the "stock" field.
func (pu *ProductUpdate) AddStock(i int64) *ProductUpdate {
	pu.mutation.AddStock(i)
	return pu
}

// ClearStock clears the value of the "stock" field.
func (pu *ProductUpdate) ClearStock() *ProductUpdate {
	pu.mutation.ClearStock()
	return pu
}

// SetCreateID sets the "create_id" field.
func (pu *ProductUpdate) SetCreateID(i int64) *ProductUpdate {
	pu.mutation.ResetCreateID()
	pu.mutation.SetCreateID(i)
	return pu
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreateID(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetCreateID(*i)
	}
	return pu
}

// AddCreateID adds i to the "create_id" field.
func (pu *ProductUpdate) AddCreateID(i int64) *ProductUpdate {
	pu.mutation.AddCreateID(i)
	return pu
}

// ClearCreateID clears the value of the "create_id" field.
func (pu *ProductUpdate) ClearCreateID() *ProductUpdate {
	pu.mutation.ClearCreateID()
	return pu
}

// SetIsSales sets the "is_sales" field.
func (pu *ProductUpdate) SetIsSales(i []int64) *ProductUpdate {
	pu.mutation.SetIsSales(i)
	return pu
}

// AppendIsSales appends i to the "is_sales" field.
func (pu *ProductUpdate) AppendIsSales(i []int64) *ProductUpdate {
	pu.mutation.AppendIsSales(i)
	return pu
}

// ClearIsSales clears the value of the "is_sales" field.
func (pu *ProductUpdate) ClearIsSales() *ProductUpdate {
	pu.mutation.ClearIsSales()
	return pu
}

// SetSignSalesAt sets the "sign_sales_at" field.
func (pu *ProductUpdate) SetSignSalesAt(t time.Time) *ProductUpdate {
	pu.mutation.SetSignSalesAt(t)
	return pu
}

// SetNillableSignSalesAt sets the "sign_sales_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSignSalesAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetSignSalesAt(*t)
	}
	return pu
}

// ClearSignSalesAt clears the value of the "sign_sales_at" field.
func (pu *ProductUpdate) ClearSignSalesAt() *ProductUpdate {
	pu.mutation.ClearSignSalesAt()
	return pu
}

// SetEndSalesAt sets the "end_sales_at" field.
func (pu *ProductUpdate) SetEndSalesAt(t time.Time) *ProductUpdate {
	pu.mutation.SetEndSalesAt(t)
	return pu
}

// SetNillableEndSalesAt sets the "end_sales_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableEndSalesAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetEndSalesAt(*t)
	}
	return pu
}

// ClearEndSalesAt clears the value of the "end_sales_at" field.
func (pu *ProductUpdate) ClearEndSalesAt() *ProductUpdate {
	pu.mutation.ClearEndSalesAt()
	return pu
}

// AddVenueIDs adds the "venues" edge to the Venue entity by IDs.
func (pu *ProductUpdate) AddVenueIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddVenueIDs(ids...)
	return pu
}

// AddVenues adds the "venues" edges to the Venue entity.
func (pu *ProductUpdate) AddVenues(v ...*Venue) *ProductUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVenueIDs(ids...)
}

// AddPropertyIDs adds the "propertys" edge to the ProductProperty entity by IDs.
func (pu *ProductUpdate) AddPropertyIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddPropertyIDs(ids...)
	return pu
}

// AddPropertys adds the "propertys" edges to the ProductProperty entity.
func (pu *ProductUpdate) AddPropertys(p ...*ProductProperty) *ProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPropertyIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearVenues clears all "venues" edges to the Venue entity.
func (pu *ProductUpdate) ClearVenues() *ProductUpdate {
	pu.mutation.ClearVenues()
	return pu
}

// RemoveVenueIDs removes the "venues" edge to Venue entities by IDs.
func (pu *ProductUpdate) RemoveVenueIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemoveVenueIDs(ids...)
	return pu
}

// RemoveVenues removes "venues" edges to Venue entities.
func (pu *ProductUpdate) RemoveVenues(v ...*Venue) *ProductUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVenueIDs(ids...)
}

// ClearPropertys clears all "propertys" edges to the ProductProperty entity.
func (pu *ProductUpdate) ClearPropertys() *ProductUpdate {
	pu.mutation.ClearPropertys()
	return pu
}

// RemovePropertyIDs removes the "propertys" edge to ProductProperty entities by IDs.
func (pu *ProductUpdate) RemovePropertyIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemovePropertyIDs(ids...)
	return pu
}

// RemovePropertys removes "propertys" edges to ProductProperty entities.
func (pu *ProductUpdate) RemovePropertys(p ...*ProductProperty) *ProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePropertyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok && !pu.mutation.UpdatedAtCleared() {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProductUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(product.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(product.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Delete(); ok {
		_spec.SetField(product.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDelete(); ok {
		_spec.AddField(product.FieldDelete, field.TypeInt64, value)
	}
	if pu.mutation.DeleteCleared() {
		_spec.ClearField(product.FieldDelete, field.TypeInt64)
	}
	if value, ok := pu.mutation.CreatedID(); ok {
		_spec.SetField(product.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCreatedID(); ok {
		_spec.AddField(product.FieldCreatedID, field.TypeInt64, value)
	}
	if pu.mutation.CreatedIDCleared() {
		_spec.ClearField(product.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt64, value)
	}
	if pu.mutation.StatusCleared() {
		_spec.ClearField(product.FieldStatus, field.TypeInt64)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(product.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.Pic(); ok {
		_spec.SetField(product.FieldPic, field.TypeString, value)
	}
	if pu.mutation.PicCleared() {
		_spec.ClearField(product.FieldPic, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(product.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeFloat64, value)
	}
	if pu.mutation.PriceCleared() {
		_spec.ClearField(product.FieldPrice, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedStock(); ok {
		_spec.AddField(product.FieldStock, field.TypeInt64, value)
	}
	if pu.mutation.StockCleared() {
		_spec.ClearField(product.FieldStock, field.TypeInt64)
	}
	if value, ok := pu.mutation.CreateID(); ok {
		_spec.SetField(product.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCreateID(); ok {
		_spec.AddField(product.FieldCreateID, field.TypeInt64, value)
	}
	if pu.mutation.CreateIDCleared() {
		_spec.ClearField(product.FieldCreateID, field.TypeInt64)
	}
	if value, ok := pu.mutation.IsSales(); ok {
		_spec.SetField(product.FieldIsSales, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedIsSales(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, product.FieldIsSales, value)
		})
	}
	if pu.mutation.IsSalesCleared() {
		_spec.ClearField(product.FieldIsSales, field.TypeJSON)
	}
	if value, ok := pu.mutation.SignSalesAt(); ok {
		_spec.SetField(product.FieldSignSalesAt, field.TypeTime, value)
	}
	if pu.mutation.SignSalesAtCleared() {
		_spec.ClearField(product.FieldSignSalesAt, field.TypeTime)
	}
	if value, ok := pu.mutation.EndSalesAt(); ok {
		_spec.SetField(product.FieldEndSalesAt, field.TypeTime, value)
	}
	if pu.mutation.EndSalesAtCleared() {
		_spec.ClearField(product.FieldEndSalesAt, field.TypeTime)
	}
	if pu.mutation.VenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.VenuesTable,
			Columns: product.VenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVenuesIDs(); len(nodes) > 0 && !pu.mutation.VenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.VenuesTable,
			Columns: product.VenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.VenuesTable,
			Columns: product.VenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.PropertysTable,
			Columns: product.PropertysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPropertysIDs(); len(nodes) > 0 && !pu.mutation.PropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.PropertysTable,
			Columns: product.PropertysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PropertysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.PropertysTable,
			Columns: product.PropertysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *ProductUpdateOne) ClearUpdatedAt() *ProductUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// SetDelete sets the "delete" field.
func (puo *ProductUpdateOne) SetDelete(i int64) *ProductUpdateOne {
	puo.mutation.ResetDelete()
	puo.mutation.SetDelete(i)
	return puo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDelete(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetDelete(*i)
	}
	return puo
}

// AddDelete adds i to the "delete" field.
func (puo *ProductUpdateOne) AddDelete(i int64) *ProductUpdateOne {
	puo.mutation.AddDelete(i)
	return puo
}

// ClearDelete clears the value of the "delete" field.
func (puo *ProductUpdateOne) ClearDelete() *ProductUpdateOne {
	puo.mutation.ClearDelete()
	return puo
}

// SetCreatedID sets the "created_id" field.
func (puo *ProductUpdateOne) SetCreatedID(i int64) *ProductUpdateOne {
	puo.mutation.ResetCreatedID()
	puo.mutation.SetCreatedID(i)
	return puo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedID(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetCreatedID(*i)
	}
	return puo
}

// AddCreatedID adds i to the "created_id" field.
func (puo *ProductUpdateOne) AddCreatedID(i int64) *ProductUpdateOne {
	puo.mutation.AddCreatedID(i)
	return puo
}

// ClearCreatedID clears the value of the "created_id" field.
func (puo *ProductUpdateOne) ClearCreatedID() *ProductUpdateOne {
	puo.mutation.ClearCreatedID()
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProductUpdateOne) SetStatus(i int64) *ProductUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStatus(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *ProductUpdateOne) AddStatus(i int64) *ProductUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// ClearStatus clears the value of the "status" field.
func (puo *ProductUpdateOne) ClearStatus() *ProductUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *ProductUpdateOne) ClearName() *ProductUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetPic sets the "pic" field.
func (puo *ProductUpdateOne) SetPic(s string) *ProductUpdateOne {
	puo.mutation.SetPic(s)
	return puo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePic(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetPic(*s)
	}
	return puo
}

// ClearPic clears the value of the "pic" field.
func (puo *ProductUpdateOne) ClearPic() *ProductUpdateOne {
	puo.mutation.ClearPic()
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDescription(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProductUpdateOne) ClearDescription() *ProductUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *ProductUpdateOne) AddPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// ClearPrice clears the value of the "price" field.
func (puo *ProductUpdateOne) ClearPrice() *ProductUpdateOne {
	puo.mutation.ClearPrice()
	return puo
}

// SetStock sets the "stock" field.
func (puo *ProductUpdateOne) SetStock(i int64) *ProductUpdateOne {
	puo.mutation.ResetStock()
	puo.mutation.SetStock(i)
	return puo
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStock(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetStock(*i)
	}
	return puo
}

// AddStock adds i to the "stock" field.
func (puo *ProductUpdateOne) AddStock(i int64) *ProductUpdateOne {
	puo.mutation.AddStock(i)
	return puo
}

// ClearStock clears the value of the "stock" field.
func (puo *ProductUpdateOne) ClearStock() *ProductUpdateOne {
	puo.mutation.ClearStock()
	return puo
}

// SetCreateID sets the "create_id" field.
func (puo *ProductUpdateOne) SetCreateID(i int64) *ProductUpdateOne {
	puo.mutation.ResetCreateID()
	puo.mutation.SetCreateID(i)
	return puo
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreateID(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetCreateID(*i)
	}
	return puo
}

// AddCreateID adds i to the "create_id" field.
func (puo *ProductUpdateOne) AddCreateID(i int64) *ProductUpdateOne {
	puo.mutation.AddCreateID(i)
	return puo
}

// ClearCreateID clears the value of the "create_id" field.
func (puo *ProductUpdateOne) ClearCreateID() *ProductUpdateOne {
	puo.mutation.ClearCreateID()
	return puo
}

// SetIsSales sets the "is_sales" field.
func (puo *ProductUpdateOne) SetIsSales(i []int64) *ProductUpdateOne {
	puo.mutation.SetIsSales(i)
	return puo
}

// AppendIsSales appends i to the "is_sales" field.
func (puo *ProductUpdateOne) AppendIsSales(i []int64) *ProductUpdateOne {
	puo.mutation.AppendIsSales(i)
	return puo
}

// ClearIsSales clears the value of the "is_sales" field.
func (puo *ProductUpdateOne) ClearIsSales() *ProductUpdateOne {
	puo.mutation.ClearIsSales()
	return puo
}

// SetSignSalesAt sets the "sign_sales_at" field.
func (puo *ProductUpdateOne) SetSignSalesAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetSignSalesAt(t)
	return puo
}

// SetNillableSignSalesAt sets the "sign_sales_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSignSalesAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetSignSalesAt(*t)
	}
	return puo
}

// ClearSignSalesAt clears the value of the "sign_sales_at" field.
func (puo *ProductUpdateOne) ClearSignSalesAt() *ProductUpdateOne {
	puo.mutation.ClearSignSalesAt()
	return puo
}

// SetEndSalesAt sets the "end_sales_at" field.
func (puo *ProductUpdateOne) SetEndSalesAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetEndSalesAt(t)
	return puo
}

// SetNillableEndSalesAt sets the "end_sales_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableEndSalesAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetEndSalesAt(*t)
	}
	return puo
}

// ClearEndSalesAt clears the value of the "end_sales_at" field.
func (puo *ProductUpdateOne) ClearEndSalesAt() *ProductUpdateOne {
	puo.mutation.ClearEndSalesAt()
	return puo
}

// AddVenueIDs adds the "venues" edge to the Venue entity by IDs.
func (puo *ProductUpdateOne) AddVenueIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddVenueIDs(ids...)
	return puo
}

// AddVenues adds the "venues" edges to the Venue entity.
func (puo *ProductUpdateOne) AddVenues(v ...*Venue) *ProductUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVenueIDs(ids...)
}

// AddPropertyIDs adds the "propertys" edge to the ProductProperty entity by IDs.
func (puo *ProductUpdateOne) AddPropertyIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddPropertyIDs(ids...)
	return puo
}

// AddPropertys adds the "propertys" edges to the ProductProperty entity.
func (puo *ProductUpdateOne) AddPropertys(p ...*ProductProperty) *ProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPropertyIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearVenues clears all "venues" edges to the Venue entity.
func (puo *ProductUpdateOne) ClearVenues() *ProductUpdateOne {
	puo.mutation.ClearVenues()
	return puo
}

// RemoveVenueIDs removes the "venues" edge to Venue entities by IDs.
func (puo *ProductUpdateOne) RemoveVenueIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemoveVenueIDs(ids...)
	return puo
}

// RemoveVenues removes "venues" edges to Venue entities.
func (puo *ProductUpdateOne) RemoveVenues(v ...*Venue) *ProductUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVenueIDs(ids...)
}

// ClearPropertys clears all "propertys" edges to the ProductProperty entity.
func (puo *ProductUpdateOne) ClearPropertys() *ProductUpdateOne {
	puo.mutation.ClearPropertys()
	return puo
}

// RemovePropertyIDs removes the "propertys" edge to ProductProperty entities by IDs.
func (puo *ProductUpdateOne) RemovePropertyIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemovePropertyIDs(ids...)
	return puo
}

// RemovePropertys removes "propertys" edges to ProductProperty entities.
func (puo *ProductUpdateOne) RemovePropertys(p ...*ProductProperty) *ProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePropertyIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok && !puo.mutation.UpdatedAtCleared() {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProductUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(product.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(product.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Delete(); ok {
		_spec.SetField(product.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDelete(); ok {
		_spec.AddField(product.FieldDelete, field.TypeInt64, value)
	}
	if puo.mutation.DeleteCleared() {
		_spec.ClearField(product.FieldDelete, field.TypeInt64)
	}
	if value, ok := puo.mutation.CreatedID(); ok {
		_spec.SetField(product.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCreatedID(); ok {
		_spec.AddField(product.FieldCreatedID, field.TypeInt64, value)
	}
	if puo.mutation.CreatedIDCleared() {
		_spec.ClearField(product.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt64, value)
	}
	if puo.mutation.StatusCleared() {
		_spec.ClearField(product.FieldStatus, field.TypeInt64)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(product.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.Pic(); ok {
		_spec.SetField(product.FieldPic, field.TypeString, value)
	}
	if puo.mutation.PicCleared() {
		_spec.ClearField(product.FieldPic, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(product.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeFloat64, value)
	}
	if puo.mutation.PriceCleared() {
		_spec.ClearField(product.FieldPrice, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedStock(); ok {
		_spec.AddField(product.FieldStock, field.TypeInt64, value)
	}
	if puo.mutation.StockCleared() {
		_spec.ClearField(product.FieldStock, field.TypeInt64)
	}
	if value, ok := puo.mutation.CreateID(); ok {
		_spec.SetField(product.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCreateID(); ok {
		_spec.AddField(product.FieldCreateID, field.TypeInt64, value)
	}
	if puo.mutation.CreateIDCleared() {
		_spec.ClearField(product.FieldCreateID, field.TypeInt64)
	}
	if value, ok := puo.mutation.IsSales(); ok {
		_spec.SetField(product.FieldIsSales, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedIsSales(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, product.FieldIsSales, value)
		})
	}
	if puo.mutation.IsSalesCleared() {
		_spec.ClearField(product.FieldIsSales, field.TypeJSON)
	}
	if value, ok := puo.mutation.SignSalesAt(); ok {
		_spec.SetField(product.FieldSignSalesAt, field.TypeTime, value)
	}
	if puo.mutation.SignSalesAtCleared() {
		_spec.ClearField(product.FieldSignSalesAt, field.TypeTime)
	}
	if value, ok := puo.mutation.EndSalesAt(); ok {
		_spec.SetField(product.FieldEndSalesAt, field.TypeTime, value)
	}
	if puo.mutation.EndSalesAtCleared() {
		_spec.ClearField(product.FieldEndSalesAt, field.TypeTime)
	}
	if puo.mutation.VenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.VenuesTable,
			Columns: product.VenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVenuesIDs(); len(nodes) > 0 && !puo.mutation.VenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.VenuesTable,
			Columns: product.VenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.VenuesTable,
			Columns: product.VenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.PropertysTable,
			Columns: product.PropertysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPropertysIDs(); len(nodes) > 0 && !puo.mutation.PropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.PropertysTable,
			Columns: product.PropertysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PropertysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.PropertysTable,
			Columns: product.PropertysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
