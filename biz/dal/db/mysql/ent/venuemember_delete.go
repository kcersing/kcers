// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"kcers/biz/dal/db/mysql/ent/venuemember"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueMemberDelete is the builder for deleting a VenueMember entity.
type VenueMemberDelete struct {
	config
	hooks    []Hook
	mutation *VenueMemberMutation
}

// Where appends a list predicates to the VenueMemberDelete builder.
func (vmd *VenueMemberDelete) Where(ps ...predicate.VenueMember) *VenueMemberDelete {
	vmd.mutation.Where(ps...)
	return vmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vmd *VenueMemberDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vmd.sqlExec, vmd.mutation, vmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vmd *VenueMemberDelete) ExecX(ctx context.Context) int {
	n, err := vmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vmd *VenueMemberDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(venuemember.Table, sqlgraph.NewFieldSpec(venuemember.FieldID, field.TypeInt64))
	if ps := vmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vmd.mutation.done = true
	return affected, err
}

// VenueMemberDeleteOne is the builder for deleting a single VenueMember entity.
type VenueMemberDeleteOne struct {
	vmd *VenueMemberDelete
}

// Where appends a list predicates to the VenueMemberDelete builder.
func (vmdo *VenueMemberDeleteOne) Where(ps ...predicate.VenueMember) *VenueMemberDeleteOne {
	vmdo.vmd.mutation.Where(ps...)
	return vmdo
}

// Exec executes the deletion query.
func (vmdo *VenueMemberDeleteOne) Exec(ctx context.Context) error {
	n, err := vmdo.vmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{venuemember.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vmdo *VenueMemberDeleteOne) ExecX(ctx context.Context) {
	if err := vmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
