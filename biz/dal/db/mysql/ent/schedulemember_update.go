// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/predicate"
	"kcers/biz/dal/db/mysql/ent/schedule"
	"kcers/biz/dal/db/mysql/ent/schedulemember"
	"kcers/idl_gen/model/base"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheduleMemberUpdate is the builder for updating ScheduleMember entities.
type ScheduleMemberUpdate struct {
	config
	hooks     []Hook
	mutation  *ScheduleMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScheduleMemberUpdate builder.
func (smu *ScheduleMemberUpdate) Where(ps ...predicate.ScheduleMember) *ScheduleMemberUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *ScheduleMemberUpdate) SetUpdatedAt(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smu *ScheduleMemberUpdate) ClearUpdatedAt() *ScheduleMemberUpdate {
	smu.mutation.ClearUpdatedAt()
	return smu
}

// SetDelete sets the "delete" field.
func (smu *ScheduleMemberUpdate) SetDelete(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetDelete()
	smu.mutation.SetDelete(i)
	return smu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableDelete(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetDelete(*i)
	}
	return smu
}

// AddDelete adds i to the "delete" field.
func (smu *ScheduleMemberUpdate) AddDelete(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddDelete(i)
	return smu
}

// ClearDelete clears the value of the "delete" field.
func (smu *ScheduleMemberUpdate) ClearDelete() *ScheduleMemberUpdate {
	smu.mutation.ClearDelete()
	return smu
}

// SetCreatedID sets the "created_id" field.
func (smu *ScheduleMemberUpdate) SetCreatedID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetCreatedID()
	smu.mutation.SetCreatedID(i)
	return smu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableCreatedID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetCreatedID(*i)
	}
	return smu
}

// AddCreatedID adds i to the "created_id" field.
func (smu *ScheduleMemberUpdate) AddCreatedID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddCreatedID(i)
	return smu
}

// ClearCreatedID clears the value of the "created_id" field.
func (smu *ScheduleMemberUpdate) ClearCreatedID() *ScheduleMemberUpdate {
	smu.mutation.ClearCreatedID()
	return smu
}

// SetStatus sets the "status" field.
func (smu *ScheduleMemberUpdate) SetStatus(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetStatus()
	smu.mutation.SetStatus(i)
	return smu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableStatus(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetStatus(*i)
	}
	return smu
}

// AddStatus adds i to the "status" field.
func (smu *ScheduleMemberUpdate) AddStatus(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddStatus(i)
	return smu
}

// ClearStatus clears the value of the "status" field.
func (smu *ScheduleMemberUpdate) ClearStatus() *ScheduleMemberUpdate {
	smu.mutation.ClearStatus()
	return smu
}

// SetVenueID sets the "venue_id" field.
func (smu *ScheduleMemberUpdate) SetVenueID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetVenueID()
	smu.mutation.SetVenueID(i)
	return smu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableVenueID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetVenueID(*i)
	}
	return smu
}

// AddVenueID adds i to the "venue_id" field.
func (smu *ScheduleMemberUpdate) AddVenueID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddVenueID(i)
	return smu
}

// ClearVenueID clears the value of the "venue_id" field.
func (smu *ScheduleMemberUpdate) ClearVenueID() *ScheduleMemberUpdate {
	smu.mutation.ClearVenueID()
	return smu
}

// SetPlaceID sets the "place_id" field.
func (smu *ScheduleMemberUpdate) SetPlaceID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetPlaceID()
	smu.mutation.SetPlaceID(i)
	return smu
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillablePlaceID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetPlaceID(*i)
	}
	return smu
}

// AddPlaceID adds i to the "place_id" field.
func (smu *ScheduleMemberUpdate) AddPlaceID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddPlaceID(i)
	return smu
}

// ClearPlaceID clears the value of the "place_id" field.
func (smu *ScheduleMemberUpdate) ClearPlaceID() *ScheduleMemberUpdate {
	smu.mutation.ClearPlaceID()
	return smu
}

// SetProductID sets the "product_id" field.
func (smu *ScheduleMemberUpdate) SetProductID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetProductID()
	smu.mutation.SetProductID(i)
	return smu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableProductID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetProductID(*i)
	}
	return smu
}

// AddProductID adds i to the "product_id" field.
func (smu *ScheduleMemberUpdate) AddProductID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddProductID(i)
	return smu
}

// ClearProductID clears the value of the "product_id" field.
func (smu *ScheduleMemberUpdate) ClearProductID() *ScheduleMemberUpdate {
	smu.mutation.ClearProductID()
	return smu
}

// SetScheduleID sets the "schedule_id" field.
func (smu *ScheduleMemberUpdate) SetScheduleID(i int64) *ScheduleMemberUpdate {
	smu.mutation.SetScheduleID(i)
	return smu
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableScheduleID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetScheduleID(*i)
	}
	return smu
}

// ClearScheduleID clears the value of the "schedule_id" field.
func (smu *ScheduleMemberUpdate) ClearScheduleID() *ScheduleMemberUpdate {
	smu.mutation.ClearScheduleID()
	return smu
}

// SetScheduleName sets the "schedule_name" field.
func (smu *ScheduleMemberUpdate) SetScheduleName(s string) *ScheduleMemberUpdate {
	smu.mutation.SetScheduleName(s)
	return smu
}

// SetNillableScheduleName sets the "schedule_name" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableScheduleName(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetScheduleName(*s)
	}
	return smu
}

// ClearScheduleName clears the value of the "schedule_name" field.
func (smu *ScheduleMemberUpdate) ClearScheduleName() *ScheduleMemberUpdate {
	smu.mutation.ClearScheduleName()
	return smu
}

// SetIsDeduct sets the "is_deduct" field.
func (smu *ScheduleMemberUpdate) SetIsDeduct(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetIsDeduct()
	smu.mutation.SetIsDeduct(i)
	return smu
}

// SetNillableIsDeduct sets the "is_deduct" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableIsDeduct(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetIsDeduct(*i)
	}
	return smu
}

// AddIsDeduct adds i to the "is_deduct" field.
func (smu *ScheduleMemberUpdate) AddIsDeduct(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddIsDeduct(i)
	return smu
}

// ClearIsDeduct clears the value of the "is_deduct" field.
func (smu *ScheduleMemberUpdate) ClearIsDeduct() *ScheduleMemberUpdate {
	smu.mutation.ClearIsDeduct()
	return smu
}

// SetMemberID sets the "member_id" field.
func (smu *ScheduleMemberUpdate) SetMemberID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetMemberID()
	smu.mutation.SetMemberID(i)
	return smu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetMemberID(*i)
	}
	return smu
}

// AddMemberID adds i to the "member_id" field.
func (smu *ScheduleMemberUpdate) AddMemberID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddMemberID(i)
	return smu
}

// ClearMemberID clears the value of the "member_id" field.
func (smu *ScheduleMemberUpdate) ClearMemberID() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberID()
	return smu
}

// SetMemberProductID sets the "member_product_id" field.
func (smu *ScheduleMemberUpdate) SetMemberProductID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetMemberProductID()
	smu.mutation.SetMemberProductID(i)
	return smu
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberProductID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetMemberProductID(*i)
	}
	return smu
}

// AddMemberProductID adds i to the "member_product_id" field.
func (smu *ScheduleMemberUpdate) AddMemberProductID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddMemberProductID(i)
	return smu
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (smu *ScheduleMemberUpdate) ClearMemberProductID() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberProductID()
	return smu
}

// SetMemberProductPropertyID sets the "member_product_property_id" field.
func (smu *ScheduleMemberUpdate) SetMemberProductPropertyID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetMemberProductPropertyID()
	smu.mutation.SetMemberProductPropertyID(i)
	return smu
}

// SetNillableMemberProductPropertyID sets the "member_product_property_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberProductPropertyID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetMemberProductPropertyID(*i)
	}
	return smu
}

// AddMemberProductPropertyID adds i to the "member_product_property_id" field.
func (smu *ScheduleMemberUpdate) AddMemberProductPropertyID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddMemberProductPropertyID(i)
	return smu
}

// ClearMemberProductPropertyID clears the value of the "member_product_property_id" field.
func (smu *ScheduleMemberUpdate) ClearMemberProductPropertyID() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberProductPropertyID()
	return smu
}

// SetType sets the "type" field.
func (smu *ScheduleMemberUpdate) SetType(s string) *ScheduleMemberUpdate {
	smu.mutation.SetType(s)
	return smu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableType(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetType(*s)
	}
	return smu
}

// ClearType clears the value of the "type" field.
func (smu *ScheduleMemberUpdate) ClearType() *ScheduleMemberUpdate {
	smu.mutation.ClearType()
	return smu
}

// SetDate sets the "date" field.
func (smu *ScheduleMemberUpdate) SetDate(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetDate(t)
	return smu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableDate(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetDate(*t)
	}
	return smu
}

// ClearDate clears the value of the "date" field.
func (smu *ScheduleMemberUpdate) ClearDate() *ScheduleMemberUpdate {
	smu.mutation.ClearDate()
	return smu
}

// SetStartAt sets the "start_at" field.
func (smu *ScheduleMemberUpdate) SetStartAt(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetStartAt(t)
	return smu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableStartAt(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetStartAt(*t)
	}
	return smu
}

// ClearStartAt clears the value of the "start_at" field.
func (smu *ScheduleMemberUpdate) ClearStartAt() *ScheduleMemberUpdate {
	smu.mutation.ClearStartAt()
	return smu
}

// SetEndAt sets the "end_at" field.
func (smu *ScheduleMemberUpdate) SetEndAt(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetEndAt(t)
	return smu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableEndAt(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetEndAt(*t)
	}
	return smu
}

// ClearEndAt clears the value of the "end_at" field.
func (smu *ScheduleMemberUpdate) ClearEndAt() *ScheduleMemberUpdate {
	smu.mutation.ClearEndAt()
	return smu
}

// SetSignStartAt sets the "sign_start_at" field.
func (smu *ScheduleMemberUpdate) SetSignStartAt(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetSignStartAt(t)
	return smu
}

// SetNillableSignStartAt sets the "sign_start_at" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableSignStartAt(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetSignStartAt(*t)
	}
	return smu
}

// ClearSignStartAt clears the value of the "sign_start_at" field.
func (smu *ScheduleMemberUpdate) ClearSignStartAt() *ScheduleMemberUpdate {
	smu.mutation.ClearSignStartAt()
	return smu
}

// SetSignEndAt sets the "sign_end_at" field.
func (smu *ScheduleMemberUpdate) SetSignEndAt(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetSignEndAt(t)
	return smu
}

// SetNillableSignEndAt sets the "sign_end_at" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableSignEndAt(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetSignEndAt(*t)
	}
	return smu
}

// ClearSignEndAt clears the value of the "sign_end_at" field.
func (smu *ScheduleMemberUpdate) ClearSignEndAt() *ScheduleMemberUpdate {
	smu.mutation.ClearSignEndAt()
	return smu
}

// SetSeat sets the "seat" field.
func (smu *ScheduleMemberUpdate) SetSeat(b base.Seat) *ScheduleMemberUpdate {
	smu.mutation.SetSeat(b)
	return smu
}

// SetNillableSeat sets the "seat" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableSeat(b *base.Seat) *ScheduleMemberUpdate {
	if b != nil {
		smu.SetSeat(*b)
	}
	return smu
}

// ClearSeat clears the value of the "seat" field.
func (smu *ScheduleMemberUpdate) ClearSeat() *ScheduleMemberUpdate {
	smu.mutation.ClearSeat()
	return smu
}

// SetMemberName sets the "member_name" field.
func (smu *ScheduleMemberUpdate) SetMemberName(s string) *ScheduleMemberUpdate {
	smu.mutation.SetMemberName(s)
	return smu
}

// SetNillableMemberName sets the "member_name" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberName(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetMemberName(*s)
	}
	return smu
}

// ClearMemberName clears the value of the "member_name" field.
func (smu *ScheduleMemberUpdate) ClearMemberName() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberName()
	return smu
}

// SetMemberProductName sets the "member_product_name" field.
func (smu *ScheduleMemberUpdate) SetMemberProductName(s string) *ScheduleMemberUpdate {
	smu.mutation.SetMemberProductName(s)
	return smu
}

// SetNillableMemberProductName sets the "member_product_name" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberProductName(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetMemberProductName(*s)
	}
	return smu
}

// ClearMemberProductName clears the value of the "member_product_name" field.
func (smu *ScheduleMemberUpdate) ClearMemberProductName() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberProductName()
	return smu
}

// SetMemberProductPropertyName sets the "member_product_property_name" field.
func (smu *ScheduleMemberUpdate) SetMemberProductPropertyName(s string) *ScheduleMemberUpdate {
	smu.mutation.SetMemberProductPropertyName(s)
	return smu
}

// SetNillableMemberProductPropertyName sets the "member_product_property_name" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberProductPropertyName(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetMemberProductPropertyName(*s)
	}
	return smu
}

// ClearMemberProductPropertyName clears the value of the "member_product_property_name" field.
func (smu *ScheduleMemberUpdate) ClearMemberProductPropertyName() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberProductPropertyName()
	return smu
}

// SetRemark sets the "remark" field.
func (smu *ScheduleMemberUpdate) SetRemark(s string) *ScheduleMemberUpdate {
	smu.mutation.SetRemark(s)
	return smu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableRemark(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetRemark(*s)
	}
	return smu
}

// ClearRemark clears the value of the "remark" field.
func (smu *ScheduleMemberUpdate) ClearRemark() *ScheduleMemberUpdate {
	smu.mutation.ClearRemark()
	return smu
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (smu *ScheduleMemberUpdate) SetSchedule(s *Schedule) *ScheduleMemberUpdate {
	return smu.SetScheduleID(s.ID)
}

// Mutation returns the ScheduleMemberMutation object of the builder.
func (smu *ScheduleMemberUpdate) Mutation() *ScheduleMemberMutation {
	return smu.mutation
}

// ClearSchedule clears the "schedule" edge to the Schedule entity.
func (smu *ScheduleMemberUpdate) ClearSchedule() *ScheduleMemberUpdate {
	smu.mutation.ClearSchedule()
	return smu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *ScheduleMemberUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *ScheduleMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *ScheduleMemberUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *ScheduleMemberUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *ScheduleMemberUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok && !smu.mutation.UpdatedAtCleared() {
		v := schedulemember.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smu *ScheduleMemberUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScheduleMemberUpdate {
	smu.modifiers = append(smu.modifiers, modifiers...)
	return smu
}

func (smu *ScheduleMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedulemember.Table, schedulemember.Columns, sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if smu.mutation.CreatedAtCleared() {
		_spec.ClearField(schedulemember.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(schedulemember.FieldUpdatedAt, field.TypeTime, value)
	}
	if smu.mutation.UpdatedAtCleared() {
		_spec.ClearField(schedulemember.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.Delete(); ok {
		_spec.SetField(schedulemember.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedDelete(); ok {
		_spec.AddField(schedulemember.FieldDelete, field.TypeInt64, value)
	}
	if smu.mutation.DeleteCleared() {
		_spec.ClearField(schedulemember.FieldDelete, field.TypeInt64)
	}
	if value, ok := smu.mutation.CreatedID(); ok {
		_spec.SetField(schedulemember.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedCreatedID(); ok {
		_spec.AddField(schedulemember.FieldCreatedID, field.TypeInt64, value)
	}
	if smu.mutation.CreatedIDCleared() {
		_spec.ClearField(schedulemember.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := smu.mutation.Status(); ok {
		_spec.SetField(schedulemember.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedStatus(); ok {
		_spec.AddField(schedulemember.FieldStatus, field.TypeInt64, value)
	}
	if smu.mutation.StatusCleared() {
		_spec.ClearField(schedulemember.FieldStatus, field.TypeInt64)
	}
	if value, ok := smu.mutation.VenueID(); ok {
		_spec.SetField(schedulemember.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedVenueID(); ok {
		_spec.AddField(schedulemember.FieldVenueID, field.TypeInt64, value)
	}
	if smu.mutation.VenueIDCleared() {
		_spec.ClearField(schedulemember.FieldVenueID, field.TypeInt64)
	}
	if value, ok := smu.mutation.PlaceID(); ok {
		_spec.SetField(schedulemember.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedPlaceID(); ok {
		_spec.AddField(schedulemember.FieldPlaceID, field.TypeInt64, value)
	}
	if smu.mutation.PlaceIDCleared() {
		_spec.ClearField(schedulemember.FieldPlaceID, field.TypeInt64)
	}
	if value, ok := smu.mutation.ProductID(); ok {
		_spec.SetField(schedulemember.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedProductID(); ok {
		_spec.AddField(schedulemember.FieldProductID, field.TypeInt64, value)
	}
	if smu.mutation.ProductIDCleared() {
		_spec.ClearField(schedulemember.FieldProductID, field.TypeInt64)
	}
	if value, ok := smu.mutation.ScheduleName(); ok {
		_spec.SetField(schedulemember.FieldScheduleName, field.TypeString, value)
	}
	if smu.mutation.ScheduleNameCleared() {
		_spec.ClearField(schedulemember.FieldScheduleName, field.TypeString)
	}
	if value, ok := smu.mutation.IsDeduct(); ok {
		_spec.SetField(schedulemember.FieldIsDeduct, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedIsDeduct(); ok {
		_spec.AddField(schedulemember.FieldIsDeduct, field.TypeInt64, value)
	}
	if smu.mutation.IsDeductCleared() {
		_spec.ClearField(schedulemember.FieldIsDeduct, field.TypeInt64)
	}
	if value, ok := smu.mutation.MemberID(); ok {
		_spec.SetField(schedulemember.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedMemberID(); ok {
		_spec.AddField(schedulemember.FieldMemberID, field.TypeInt64, value)
	}
	if smu.mutation.MemberIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberID, field.TypeInt64)
	}
	if value, ok := smu.mutation.MemberProductID(); ok {
		_spec.SetField(schedulemember.FieldMemberProductID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedMemberProductID(); ok {
		_spec.AddField(schedulemember.FieldMemberProductID, field.TypeInt64, value)
	}
	if smu.mutation.MemberProductIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductID, field.TypeInt64)
	}
	if value, ok := smu.mutation.MemberProductPropertyID(); ok {
		_spec.SetField(schedulemember.FieldMemberProductPropertyID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedMemberProductPropertyID(); ok {
		_spec.AddField(schedulemember.FieldMemberProductPropertyID, field.TypeInt64, value)
	}
	if smu.mutation.MemberProductPropertyIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductPropertyID, field.TypeInt64)
	}
	if value, ok := smu.mutation.GetType(); ok {
		_spec.SetField(schedulemember.FieldType, field.TypeString, value)
	}
	if smu.mutation.TypeCleared() {
		_spec.ClearField(schedulemember.FieldType, field.TypeString)
	}
	if value, ok := smu.mutation.Date(); ok {
		_spec.SetField(schedulemember.FieldDate, field.TypeTime, value)
	}
	if smu.mutation.DateCleared() {
		_spec.ClearField(schedulemember.FieldDate, field.TypeTime)
	}
	if value, ok := smu.mutation.StartAt(); ok {
		_spec.SetField(schedulemember.FieldStartAt, field.TypeTime, value)
	}
	if smu.mutation.StartAtCleared() {
		_spec.ClearField(schedulemember.FieldStartAt, field.TypeTime)
	}
	if value, ok := smu.mutation.EndAt(); ok {
		_spec.SetField(schedulemember.FieldEndAt, field.TypeTime, value)
	}
	if smu.mutation.EndAtCleared() {
		_spec.ClearField(schedulemember.FieldEndAt, field.TypeTime)
	}
	if value, ok := smu.mutation.SignStartAt(); ok {
		_spec.SetField(schedulemember.FieldSignStartAt, field.TypeTime, value)
	}
	if smu.mutation.SignStartAtCleared() {
		_spec.ClearField(schedulemember.FieldSignStartAt, field.TypeTime)
	}
	if value, ok := smu.mutation.SignEndAt(); ok {
		_spec.SetField(schedulemember.FieldSignEndAt, field.TypeTime, value)
	}
	if smu.mutation.SignEndAtCleared() {
		_spec.ClearField(schedulemember.FieldSignEndAt, field.TypeTime)
	}
	if value, ok := smu.mutation.Seat(); ok {
		_spec.SetField(schedulemember.FieldSeat, field.TypeJSON, value)
	}
	if smu.mutation.SeatCleared() {
		_spec.ClearField(schedulemember.FieldSeat, field.TypeJSON)
	}
	if value, ok := smu.mutation.MemberName(); ok {
		_spec.SetField(schedulemember.FieldMemberName, field.TypeString, value)
	}
	if smu.mutation.MemberNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberName, field.TypeString)
	}
	if value, ok := smu.mutation.MemberProductName(); ok {
		_spec.SetField(schedulemember.FieldMemberProductName, field.TypeString, value)
	}
	if smu.mutation.MemberProductNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductName, field.TypeString)
	}
	if value, ok := smu.mutation.MemberProductPropertyName(); ok {
		_spec.SetField(schedulemember.FieldMemberProductPropertyName, field.TypeString, value)
	}
	if smu.mutation.MemberProductPropertyNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductPropertyName, field.TypeString)
	}
	if value, ok := smu.mutation.Remark(); ok {
		_spec.SetField(schedulemember.FieldRemark, field.TypeString, value)
	}
	if smu.mutation.RemarkCleared() {
		_spec.ClearField(schedulemember.FieldRemark, field.TypeString)
	}
	if smu.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulemember.ScheduleTable,
			Columns: []string{schedulemember.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulemember.ScheduleTable,
			Columns: []string{schedulemember.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(smu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedulemember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// ScheduleMemberUpdateOne is the builder for updating a single ScheduleMember entity.
type ScheduleMemberUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScheduleMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *ScheduleMemberUpdateOne) SetUpdatedAt(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smuo *ScheduleMemberUpdateOne) ClearUpdatedAt() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearUpdatedAt()
	return smuo
}

// SetDelete sets the "delete" field.
func (smuo *ScheduleMemberUpdateOne) SetDelete(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetDelete()
	smuo.mutation.SetDelete(i)
	return smuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableDelete(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetDelete(*i)
	}
	return smuo
}

// AddDelete adds i to the "delete" field.
func (smuo *ScheduleMemberUpdateOne) AddDelete(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddDelete(i)
	return smuo
}

// ClearDelete clears the value of the "delete" field.
func (smuo *ScheduleMemberUpdateOne) ClearDelete() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearDelete()
	return smuo
}

// SetCreatedID sets the "created_id" field.
func (smuo *ScheduleMemberUpdateOne) SetCreatedID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetCreatedID()
	smuo.mutation.SetCreatedID(i)
	return smuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableCreatedID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetCreatedID(*i)
	}
	return smuo
}

// AddCreatedID adds i to the "created_id" field.
func (smuo *ScheduleMemberUpdateOne) AddCreatedID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddCreatedID(i)
	return smuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearCreatedID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearCreatedID()
	return smuo
}

// SetStatus sets the "status" field.
func (smuo *ScheduleMemberUpdateOne) SetStatus(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetStatus()
	smuo.mutation.SetStatus(i)
	return smuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableStatus(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetStatus(*i)
	}
	return smuo
}

// AddStatus adds i to the "status" field.
func (smuo *ScheduleMemberUpdateOne) AddStatus(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddStatus(i)
	return smuo
}

// ClearStatus clears the value of the "status" field.
func (smuo *ScheduleMemberUpdateOne) ClearStatus() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearStatus()
	return smuo
}

// SetVenueID sets the "venue_id" field.
func (smuo *ScheduleMemberUpdateOne) SetVenueID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetVenueID()
	smuo.mutation.SetVenueID(i)
	return smuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableVenueID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetVenueID(*i)
	}
	return smuo
}

// AddVenueID adds i to the "venue_id" field.
func (smuo *ScheduleMemberUpdateOne) AddVenueID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddVenueID(i)
	return smuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearVenueID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearVenueID()
	return smuo
}

// SetPlaceID sets the "place_id" field.
func (smuo *ScheduleMemberUpdateOne) SetPlaceID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetPlaceID()
	smuo.mutation.SetPlaceID(i)
	return smuo
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillablePlaceID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetPlaceID(*i)
	}
	return smuo
}

// AddPlaceID adds i to the "place_id" field.
func (smuo *ScheduleMemberUpdateOne) AddPlaceID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddPlaceID(i)
	return smuo
}

// ClearPlaceID clears the value of the "place_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearPlaceID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearPlaceID()
	return smuo
}

// SetProductID sets the "product_id" field.
func (smuo *ScheduleMemberUpdateOne) SetProductID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetProductID()
	smuo.mutation.SetProductID(i)
	return smuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableProductID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetProductID(*i)
	}
	return smuo
}

// AddProductID adds i to the "product_id" field.
func (smuo *ScheduleMemberUpdateOne) AddProductID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddProductID(i)
	return smuo
}

// ClearProductID clears the value of the "product_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearProductID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearProductID()
	return smuo
}

// SetScheduleID sets the "schedule_id" field.
func (smuo *ScheduleMemberUpdateOne) SetScheduleID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.SetScheduleID(i)
	return smuo
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableScheduleID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetScheduleID(*i)
	}
	return smuo
}

// ClearScheduleID clears the value of the "schedule_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearScheduleID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearScheduleID()
	return smuo
}

// SetScheduleName sets the "schedule_name" field.
func (smuo *ScheduleMemberUpdateOne) SetScheduleName(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetScheduleName(s)
	return smuo
}

// SetNillableScheduleName sets the "schedule_name" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableScheduleName(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetScheduleName(*s)
	}
	return smuo
}

// ClearScheduleName clears the value of the "schedule_name" field.
func (smuo *ScheduleMemberUpdateOne) ClearScheduleName() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearScheduleName()
	return smuo
}

// SetIsDeduct sets the "is_deduct" field.
func (smuo *ScheduleMemberUpdateOne) SetIsDeduct(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetIsDeduct()
	smuo.mutation.SetIsDeduct(i)
	return smuo
}

// SetNillableIsDeduct sets the "is_deduct" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableIsDeduct(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetIsDeduct(*i)
	}
	return smuo
}

// AddIsDeduct adds i to the "is_deduct" field.
func (smuo *ScheduleMemberUpdateOne) AddIsDeduct(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddIsDeduct(i)
	return smuo
}

// ClearIsDeduct clears the value of the "is_deduct" field.
func (smuo *ScheduleMemberUpdateOne) ClearIsDeduct() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearIsDeduct()
	return smuo
}

// SetMemberID sets the "member_id" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetMemberID()
	smuo.mutation.SetMemberID(i)
	return smuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetMemberID(*i)
	}
	return smuo
}

// AddMemberID adds i to the "member_id" field.
func (smuo *ScheduleMemberUpdateOne) AddMemberID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddMemberID(i)
	return smuo
}

// ClearMemberID clears the value of the "member_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberID()
	return smuo
}

// SetMemberProductID sets the "member_product_id" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberProductID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetMemberProductID()
	smuo.mutation.SetMemberProductID(i)
	return smuo
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberProductID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetMemberProductID(*i)
	}
	return smuo
}

// AddMemberProductID adds i to the "member_product_id" field.
func (smuo *ScheduleMemberUpdateOne) AddMemberProductID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddMemberProductID(i)
	return smuo
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberProductID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberProductID()
	return smuo
}

// SetMemberProductPropertyID sets the "member_product_property_id" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberProductPropertyID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetMemberProductPropertyID()
	smuo.mutation.SetMemberProductPropertyID(i)
	return smuo
}

// SetNillableMemberProductPropertyID sets the "member_product_property_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberProductPropertyID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetMemberProductPropertyID(*i)
	}
	return smuo
}

// AddMemberProductPropertyID adds i to the "member_product_property_id" field.
func (smuo *ScheduleMemberUpdateOne) AddMemberProductPropertyID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddMemberProductPropertyID(i)
	return smuo
}

// ClearMemberProductPropertyID clears the value of the "member_product_property_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberProductPropertyID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberProductPropertyID()
	return smuo
}

// SetType sets the "type" field.
func (smuo *ScheduleMemberUpdateOne) SetType(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetType(s)
	return smuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableType(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetType(*s)
	}
	return smuo
}

// ClearType clears the value of the "type" field.
func (smuo *ScheduleMemberUpdateOne) ClearType() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearType()
	return smuo
}

// SetDate sets the "date" field.
func (smuo *ScheduleMemberUpdateOne) SetDate(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetDate(t)
	return smuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableDate(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetDate(*t)
	}
	return smuo
}

// ClearDate clears the value of the "date" field.
func (smuo *ScheduleMemberUpdateOne) ClearDate() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearDate()
	return smuo
}

// SetStartAt sets the "start_at" field.
func (smuo *ScheduleMemberUpdateOne) SetStartAt(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetStartAt(t)
	return smuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableStartAt(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetStartAt(*t)
	}
	return smuo
}

// ClearStartAt clears the value of the "start_at" field.
func (smuo *ScheduleMemberUpdateOne) ClearStartAt() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearStartAt()
	return smuo
}

// SetEndAt sets the "end_at" field.
func (smuo *ScheduleMemberUpdateOne) SetEndAt(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetEndAt(t)
	return smuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableEndAt(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetEndAt(*t)
	}
	return smuo
}

// ClearEndAt clears the value of the "end_at" field.
func (smuo *ScheduleMemberUpdateOne) ClearEndAt() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearEndAt()
	return smuo
}

// SetSignStartAt sets the "sign_start_at" field.
func (smuo *ScheduleMemberUpdateOne) SetSignStartAt(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetSignStartAt(t)
	return smuo
}

// SetNillableSignStartAt sets the "sign_start_at" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableSignStartAt(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetSignStartAt(*t)
	}
	return smuo
}

// ClearSignStartAt clears the value of the "sign_start_at" field.
func (smuo *ScheduleMemberUpdateOne) ClearSignStartAt() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearSignStartAt()
	return smuo
}

// SetSignEndAt sets the "sign_end_at" field.
func (smuo *ScheduleMemberUpdateOne) SetSignEndAt(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetSignEndAt(t)
	return smuo
}

// SetNillableSignEndAt sets the "sign_end_at" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableSignEndAt(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetSignEndAt(*t)
	}
	return smuo
}

// ClearSignEndAt clears the value of the "sign_end_at" field.
func (smuo *ScheduleMemberUpdateOne) ClearSignEndAt() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearSignEndAt()
	return smuo
}

// SetSeat sets the "seat" field.
func (smuo *ScheduleMemberUpdateOne) SetSeat(b base.Seat) *ScheduleMemberUpdateOne {
	smuo.mutation.SetSeat(b)
	return smuo
}

// SetNillableSeat sets the "seat" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableSeat(b *base.Seat) *ScheduleMemberUpdateOne {
	if b != nil {
		smuo.SetSeat(*b)
	}
	return smuo
}

// ClearSeat clears the value of the "seat" field.
func (smuo *ScheduleMemberUpdateOne) ClearSeat() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearSeat()
	return smuo
}

// SetMemberName sets the "member_name" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberName(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetMemberName(s)
	return smuo
}

// SetNillableMemberName sets the "member_name" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberName(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetMemberName(*s)
	}
	return smuo
}

// ClearMemberName clears the value of the "member_name" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberName() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberName()
	return smuo
}

// SetMemberProductName sets the "member_product_name" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberProductName(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetMemberProductName(s)
	return smuo
}

// SetNillableMemberProductName sets the "member_product_name" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberProductName(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetMemberProductName(*s)
	}
	return smuo
}

// ClearMemberProductName clears the value of the "member_product_name" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberProductName() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberProductName()
	return smuo
}

// SetMemberProductPropertyName sets the "member_product_property_name" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberProductPropertyName(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetMemberProductPropertyName(s)
	return smuo
}

// SetNillableMemberProductPropertyName sets the "member_product_property_name" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberProductPropertyName(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetMemberProductPropertyName(*s)
	}
	return smuo
}

// ClearMemberProductPropertyName clears the value of the "member_product_property_name" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberProductPropertyName() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberProductPropertyName()
	return smuo
}

// SetRemark sets the "remark" field.
func (smuo *ScheduleMemberUpdateOne) SetRemark(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetRemark(s)
	return smuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableRemark(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetRemark(*s)
	}
	return smuo
}

// ClearRemark clears the value of the "remark" field.
func (smuo *ScheduleMemberUpdateOne) ClearRemark() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearRemark()
	return smuo
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (smuo *ScheduleMemberUpdateOne) SetSchedule(s *Schedule) *ScheduleMemberUpdateOne {
	return smuo.SetScheduleID(s.ID)
}

// Mutation returns the ScheduleMemberMutation object of the builder.
func (smuo *ScheduleMemberUpdateOne) Mutation() *ScheduleMemberMutation {
	return smuo.mutation
}

// ClearSchedule clears the "schedule" edge to the Schedule entity.
func (smuo *ScheduleMemberUpdateOne) ClearSchedule() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearSchedule()
	return smuo
}

// Where appends a list predicates to the ScheduleMemberUpdate builder.
func (smuo *ScheduleMemberUpdateOne) Where(ps ...predicate.ScheduleMember) *ScheduleMemberUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *ScheduleMemberUpdateOne) Select(field string, fields ...string) *ScheduleMemberUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated ScheduleMember entity.
func (smuo *ScheduleMemberUpdateOne) Save(ctx context.Context) (*ScheduleMember, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *ScheduleMemberUpdateOne) SaveX(ctx context.Context) *ScheduleMember {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *ScheduleMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *ScheduleMemberUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *ScheduleMemberUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok && !smuo.mutation.UpdatedAtCleared() {
		v := schedulemember.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smuo *ScheduleMemberUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScheduleMemberUpdateOne {
	smuo.modifiers = append(smuo.modifiers, modifiers...)
	return smuo
}

func (smuo *ScheduleMemberUpdateOne) sqlSave(ctx context.Context) (_node *ScheduleMember, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedulemember.Table, schedulemember.Columns, sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheduleMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedulemember.FieldID)
		for _, f := range fields {
			if !schedulemember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schedulemember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if smuo.mutation.CreatedAtCleared() {
		_spec.ClearField(schedulemember.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(schedulemember.FieldUpdatedAt, field.TypeTime, value)
	}
	if smuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(schedulemember.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.Delete(); ok {
		_spec.SetField(schedulemember.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedDelete(); ok {
		_spec.AddField(schedulemember.FieldDelete, field.TypeInt64, value)
	}
	if smuo.mutation.DeleteCleared() {
		_spec.ClearField(schedulemember.FieldDelete, field.TypeInt64)
	}
	if value, ok := smuo.mutation.CreatedID(); ok {
		_spec.SetField(schedulemember.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(schedulemember.FieldCreatedID, field.TypeInt64, value)
	}
	if smuo.mutation.CreatedIDCleared() {
		_spec.ClearField(schedulemember.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.Status(); ok {
		_spec.SetField(schedulemember.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedStatus(); ok {
		_spec.AddField(schedulemember.FieldStatus, field.TypeInt64, value)
	}
	if smuo.mutation.StatusCleared() {
		_spec.ClearField(schedulemember.FieldStatus, field.TypeInt64)
	}
	if value, ok := smuo.mutation.VenueID(); ok {
		_spec.SetField(schedulemember.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedVenueID(); ok {
		_spec.AddField(schedulemember.FieldVenueID, field.TypeInt64, value)
	}
	if smuo.mutation.VenueIDCleared() {
		_spec.ClearField(schedulemember.FieldVenueID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.PlaceID(); ok {
		_spec.SetField(schedulemember.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedPlaceID(); ok {
		_spec.AddField(schedulemember.FieldPlaceID, field.TypeInt64, value)
	}
	if smuo.mutation.PlaceIDCleared() {
		_spec.ClearField(schedulemember.FieldPlaceID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.ProductID(); ok {
		_spec.SetField(schedulemember.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedProductID(); ok {
		_spec.AddField(schedulemember.FieldProductID, field.TypeInt64, value)
	}
	if smuo.mutation.ProductIDCleared() {
		_spec.ClearField(schedulemember.FieldProductID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.ScheduleName(); ok {
		_spec.SetField(schedulemember.FieldScheduleName, field.TypeString, value)
	}
	if smuo.mutation.ScheduleNameCleared() {
		_spec.ClearField(schedulemember.FieldScheduleName, field.TypeString)
	}
	if value, ok := smuo.mutation.IsDeduct(); ok {
		_spec.SetField(schedulemember.FieldIsDeduct, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedIsDeduct(); ok {
		_spec.AddField(schedulemember.FieldIsDeduct, field.TypeInt64, value)
	}
	if smuo.mutation.IsDeductCleared() {
		_spec.ClearField(schedulemember.FieldIsDeduct, field.TypeInt64)
	}
	if value, ok := smuo.mutation.MemberID(); ok {
		_spec.SetField(schedulemember.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedMemberID(); ok {
		_spec.AddField(schedulemember.FieldMemberID, field.TypeInt64, value)
	}
	if smuo.mutation.MemberIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.MemberProductID(); ok {
		_spec.SetField(schedulemember.FieldMemberProductID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedMemberProductID(); ok {
		_spec.AddField(schedulemember.FieldMemberProductID, field.TypeInt64, value)
	}
	if smuo.mutation.MemberProductIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.MemberProductPropertyID(); ok {
		_spec.SetField(schedulemember.FieldMemberProductPropertyID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedMemberProductPropertyID(); ok {
		_spec.AddField(schedulemember.FieldMemberProductPropertyID, field.TypeInt64, value)
	}
	if smuo.mutation.MemberProductPropertyIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductPropertyID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.GetType(); ok {
		_spec.SetField(schedulemember.FieldType, field.TypeString, value)
	}
	if smuo.mutation.TypeCleared() {
		_spec.ClearField(schedulemember.FieldType, field.TypeString)
	}
	if value, ok := smuo.mutation.Date(); ok {
		_spec.SetField(schedulemember.FieldDate, field.TypeTime, value)
	}
	if smuo.mutation.DateCleared() {
		_spec.ClearField(schedulemember.FieldDate, field.TypeTime)
	}
	if value, ok := smuo.mutation.StartAt(); ok {
		_spec.SetField(schedulemember.FieldStartAt, field.TypeTime, value)
	}
	if smuo.mutation.StartAtCleared() {
		_spec.ClearField(schedulemember.FieldStartAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.EndAt(); ok {
		_spec.SetField(schedulemember.FieldEndAt, field.TypeTime, value)
	}
	if smuo.mutation.EndAtCleared() {
		_spec.ClearField(schedulemember.FieldEndAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.SignStartAt(); ok {
		_spec.SetField(schedulemember.FieldSignStartAt, field.TypeTime, value)
	}
	if smuo.mutation.SignStartAtCleared() {
		_spec.ClearField(schedulemember.FieldSignStartAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.SignEndAt(); ok {
		_spec.SetField(schedulemember.FieldSignEndAt, field.TypeTime, value)
	}
	if smuo.mutation.SignEndAtCleared() {
		_spec.ClearField(schedulemember.FieldSignEndAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.Seat(); ok {
		_spec.SetField(schedulemember.FieldSeat, field.TypeJSON, value)
	}
	if smuo.mutation.SeatCleared() {
		_spec.ClearField(schedulemember.FieldSeat, field.TypeJSON)
	}
	if value, ok := smuo.mutation.MemberName(); ok {
		_spec.SetField(schedulemember.FieldMemberName, field.TypeString, value)
	}
	if smuo.mutation.MemberNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberName, field.TypeString)
	}
	if value, ok := smuo.mutation.MemberProductName(); ok {
		_spec.SetField(schedulemember.FieldMemberProductName, field.TypeString, value)
	}
	if smuo.mutation.MemberProductNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductName, field.TypeString)
	}
	if value, ok := smuo.mutation.MemberProductPropertyName(); ok {
		_spec.SetField(schedulemember.FieldMemberProductPropertyName, field.TypeString, value)
	}
	if smuo.mutation.MemberProductPropertyNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductPropertyName, field.TypeString)
	}
	if value, ok := smuo.mutation.Remark(); ok {
		_spec.SetField(schedulemember.FieldRemark, field.TypeString, value)
	}
	if smuo.mutation.RemarkCleared() {
		_spec.ClearField(schedulemember.FieldRemark, field.TypeString)
	}
	if smuo.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulemember.ScheduleTable,
			Columns: []string{schedulemember.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulemember.ScheduleTable,
			Columns: []string{schedulemember.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(smuo.modifiers...)
	_node = &ScheduleMember{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedulemember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
