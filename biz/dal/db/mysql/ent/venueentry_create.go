// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kcers/biz/dal/db/mysql/ent/member"
	"kcers/biz/dal/db/mysql/ent/memberproduct"
	"kcers/biz/dal/db/mysql/ent/user"
	"kcers/biz/dal/db/mysql/ent/venue"
	"kcers/biz/dal/db/mysql/ent/venueentry"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueEntryCreate is the builder for creating a VenueEntry entity.
type VenueEntryCreate struct {
	config
	mutation *VenueEntryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vec *VenueEntryCreate) SetCreatedAt(t time.Time) *VenueEntryCreate {
	vec.mutation.SetCreatedAt(t)
	return vec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableCreatedAt(t *time.Time) *VenueEntryCreate {
	if t != nil {
		vec.SetCreatedAt(*t)
	}
	return vec
}

// SetUpdatedAt sets the "updated_at" field.
func (vec *VenueEntryCreate) SetUpdatedAt(t time.Time) *VenueEntryCreate {
	vec.mutation.SetUpdatedAt(t)
	return vec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableUpdatedAt(t *time.Time) *VenueEntryCreate {
	if t != nil {
		vec.SetUpdatedAt(*t)
	}
	return vec
}

// SetDelete sets the "delete" field.
func (vec *VenueEntryCreate) SetDelete(i int64) *VenueEntryCreate {
	vec.mutation.SetDelete(i)
	return vec
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableDelete(i *int64) *VenueEntryCreate {
	if i != nil {
		vec.SetDelete(*i)
	}
	return vec
}

// SetCreatedID sets the "created_id" field.
func (vec *VenueEntryCreate) SetCreatedID(i int64) *VenueEntryCreate {
	vec.mutation.SetCreatedID(i)
	return vec
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableCreatedID(i *int64) *VenueEntryCreate {
	if i != nil {
		vec.SetCreatedID(*i)
	}
	return vec
}

// SetMemberID sets the "member_id" field.
func (vec *VenueEntryCreate) SetMemberID(i int64) *VenueEntryCreate {
	vec.mutation.SetMemberID(i)
	return vec
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableMemberID(i *int64) *VenueEntryCreate {
	if i != nil {
		vec.SetMemberID(*i)
	}
	return vec
}

// SetUserID sets the "user_id" field.
func (vec *VenueEntryCreate) SetUserID(i int64) *VenueEntryCreate {
	vec.mutation.SetUserID(i)
	return vec
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableUserID(i *int64) *VenueEntryCreate {
	if i != nil {
		vec.SetUserID(*i)
	}
	return vec
}

// SetVenueID sets the "venue_id" field.
func (vec *VenueEntryCreate) SetVenueID(i int64) *VenueEntryCreate {
	vec.mutation.SetVenueID(i)
	return vec
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableVenueID(i *int64) *VenueEntryCreate {
	if i != nil {
		vec.SetVenueID(*i)
	}
	return vec
}

// SetMemberProductID sets the "member_product_id" field.
func (vec *VenueEntryCreate) SetMemberProductID(i int64) *VenueEntryCreate {
	vec.mutation.SetMemberProductID(i)
	return vec
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableMemberProductID(i *int64) *VenueEntryCreate {
	if i != nil {
		vec.SetMemberProductID(*i)
	}
	return vec
}

// SetMemberPropertyID sets the "member_property_id" field.
func (vec *VenueEntryCreate) SetMemberPropertyID(i int64) *VenueEntryCreate {
	vec.mutation.SetMemberPropertyID(i)
	return vec
}

// SetNillableMemberPropertyID sets the "member_property_id" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableMemberPropertyID(i *int64) *VenueEntryCreate {
	if i != nil {
		vec.SetMemberPropertyID(*i)
	}
	return vec
}

// SetEntryAt sets the "entry_at" field.
func (vec *VenueEntryCreate) SetEntryAt(t time.Time) *VenueEntryCreate {
	vec.mutation.SetEntryAt(t)
	return vec
}

// SetNillableEntryAt sets the "entry_at" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableEntryAt(t *time.Time) *VenueEntryCreate {
	if t != nil {
		vec.SetEntryAt(*t)
	}
	return vec
}

// SetLeavingAt sets the "leaving_at" field.
func (vec *VenueEntryCreate) SetLeavingAt(t time.Time) *VenueEntryCreate {
	vec.mutation.SetLeavingAt(t)
	return vec
}

// SetNillableLeavingAt sets the "leaving_at" field if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableLeavingAt(t *time.Time) *VenueEntryCreate {
	if t != nil {
		vec.SetLeavingAt(*t)
	}
	return vec
}

// SetID sets the "id" field.
func (vec *VenueEntryCreate) SetID(i int64) *VenueEntryCreate {
	vec.mutation.SetID(i)
	return vec
}

// SetVenuesID sets the "venues" edge to the Venue entity by ID.
func (vec *VenueEntryCreate) SetVenuesID(id int64) *VenueEntryCreate {
	vec.mutation.SetVenuesID(id)
	return vec
}

// SetNillableVenuesID sets the "venues" edge to the Venue entity by ID if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableVenuesID(id *int64) *VenueEntryCreate {
	if id != nil {
		vec = vec.SetVenuesID(*id)
	}
	return vec
}

// SetVenues sets the "venues" edge to the Venue entity.
func (vec *VenueEntryCreate) SetVenues(v *Venue) *VenueEntryCreate {
	return vec.SetVenuesID(v.ID)
}

// SetMembersID sets the "members" edge to the Member entity by ID.
func (vec *VenueEntryCreate) SetMembersID(id int64) *VenueEntryCreate {
	vec.mutation.SetMembersID(id)
	return vec
}

// SetNillableMembersID sets the "members" edge to the Member entity by ID if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableMembersID(id *int64) *VenueEntryCreate {
	if id != nil {
		vec = vec.SetMembersID(*id)
	}
	return vec
}

// SetMembers sets the "members" edge to the Member entity.
func (vec *VenueEntryCreate) SetMembers(m *Member) *VenueEntryCreate {
	return vec.SetMembersID(m.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (vec *VenueEntryCreate) SetUsersID(id int64) *VenueEntryCreate {
	vec.mutation.SetUsersID(id)
	return vec
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableUsersID(id *int64) *VenueEntryCreate {
	if id != nil {
		vec = vec.SetUsersID(*id)
	}
	return vec
}

// SetUsers sets the "users" edge to the User entity.
func (vec *VenueEntryCreate) SetUsers(u *User) *VenueEntryCreate {
	return vec.SetUsersID(u.ID)
}

// SetMemberProductsID sets the "member_products" edge to the MemberProduct entity by ID.
func (vec *VenueEntryCreate) SetMemberProductsID(id int64) *VenueEntryCreate {
	vec.mutation.SetMemberProductsID(id)
	return vec
}

// SetNillableMemberProductsID sets the "member_products" edge to the MemberProduct entity by ID if the given value is not nil.
func (vec *VenueEntryCreate) SetNillableMemberProductsID(id *int64) *VenueEntryCreate {
	if id != nil {
		vec = vec.SetMemberProductsID(*id)
	}
	return vec
}

// SetMemberProducts sets the "member_products" edge to the MemberProduct entity.
func (vec *VenueEntryCreate) SetMemberProducts(m *MemberProduct) *VenueEntryCreate {
	return vec.SetMemberProductsID(m.ID)
}

// Mutation returns the VenueEntryMutation object of the builder.
func (vec *VenueEntryCreate) Mutation() *VenueEntryMutation {
	return vec.mutation
}

// Save creates the VenueEntry in the database.
func (vec *VenueEntryCreate) Save(ctx context.Context) (*VenueEntry, error) {
	vec.defaults()
	return withHooks(ctx, vec.sqlSave, vec.mutation, vec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vec *VenueEntryCreate) SaveX(ctx context.Context) *VenueEntry {
	v, err := vec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vec *VenueEntryCreate) Exec(ctx context.Context) error {
	_, err := vec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vec *VenueEntryCreate) ExecX(ctx context.Context) {
	if err := vec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vec *VenueEntryCreate) defaults() {
	if _, ok := vec.mutation.CreatedAt(); !ok {
		v := venueentry.DefaultCreatedAt()
		vec.mutation.SetCreatedAt(v)
	}
	if _, ok := vec.mutation.UpdatedAt(); !ok {
		v := venueentry.DefaultUpdatedAt()
		vec.mutation.SetUpdatedAt(v)
	}
	if _, ok := vec.mutation.Delete(); !ok {
		v := venueentry.DefaultDelete
		vec.mutation.SetDelete(v)
	}
	if _, ok := vec.mutation.CreatedID(); !ok {
		v := venueentry.DefaultCreatedID
		vec.mutation.SetCreatedID(v)
	}
	if _, ok := vec.mutation.MemberID(); !ok {
		v := venueentry.DefaultMemberID
		vec.mutation.SetMemberID(v)
	}
	if _, ok := vec.mutation.UserID(); !ok {
		v := venueentry.DefaultUserID
		vec.mutation.SetUserID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vec *VenueEntryCreate) check() error {
	return nil
}

func (vec *VenueEntryCreate) sqlSave(ctx context.Context) (*VenueEntry, error) {
	if err := vec.check(); err != nil {
		return nil, err
	}
	_node, _spec := vec.createSpec()
	if err := sqlgraph.CreateNode(ctx, vec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	vec.mutation.id = &_node.ID
	vec.mutation.done = true
	return _node, nil
}

func (vec *VenueEntryCreate) createSpec() (*VenueEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &VenueEntry{config: vec.config}
		_spec = sqlgraph.NewCreateSpec(venueentry.Table, sqlgraph.NewFieldSpec(venueentry.FieldID, field.TypeInt64))
	)
	if id, ok := vec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vec.mutation.CreatedAt(); ok {
		_spec.SetField(venueentry.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vec.mutation.UpdatedAt(); ok {
		_spec.SetField(venueentry.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vec.mutation.Delete(); ok {
		_spec.SetField(venueentry.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := vec.mutation.CreatedID(); ok {
		_spec.SetField(venueentry.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := vec.mutation.MemberPropertyID(); ok {
		_spec.SetField(venueentry.FieldMemberPropertyID, field.TypeInt64, value)
		_node.MemberPropertyID = value
	}
	if value, ok := vec.mutation.EntryAt(); ok {
		_spec.SetField(venueentry.FieldEntryAt, field.TypeTime, value)
		_node.EntryAt = value
	}
	if value, ok := vec.mutation.LeavingAt(); ok {
		_spec.SetField(venueentry.FieldLeavingAt, field.TypeTime, value)
		_node.LeavingAt = value
	}
	if nodes := vec.mutation.VenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.VenuesTable,
			Columns: []string{venueentry.VenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VenueID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vec.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MembersTable,
			Columns: []string{venueentry.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vec.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.UsersTable,
			Columns: []string{venueentry.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vec.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venueentry.MemberProductsTable,
			Columns: []string{venueentry.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VenueEntryCreateBulk is the builder for creating many VenueEntry entities in bulk.
type VenueEntryCreateBulk struct {
	config
	err      error
	builders []*VenueEntryCreate
}

// Save creates the VenueEntry entities in the database.
func (vecb *VenueEntryCreateBulk) Save(ctx context.Context) ([]*VenueEntry, error) {
	if vecb.err != nil {
		return nil, vecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vecb.builders))
	nodes := make([]*VenueEntry, len(vecb.builders))
	mutators := make([]Mutator, len(vecb.builders))
	for i := range vecb.builders {
		func(i int, root context.Context) {
			builder := vecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VenueEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vecb *VenueEntryCreateBulk) SaveX(ctx context.Context) []*VenueEntry {
	v, err := vecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vecb *VenueEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := vecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vecb *VenueEntryCreateBulk) ExecX(ctx context.Context) {
	if err := vecb.Exec(ctx); err != nil {
		panic(err)
	}
}
