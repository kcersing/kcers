// Code generated by hertz generator.

package product

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "kcers/idl_gen/model/base"
	product "kcers/idl_gen/model/product"
)

// CreateProperty .
// @router /service/property/create [POST]
func CreateProperty(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.CreateOrUpdatePropertyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateProperty .
// @router /service/property/update [POST]
func UpdateProperty(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.CreateOrUpdatePropertyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteProperty .
// @router /service/property/del [POST]
func DeleteProperty(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListProperty .
// @router /service/property/list [POST]
func ListProperty(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.PropertyListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// Create .
// @router /service/product/create [POST]
func Create(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.CreateOrUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// Update .
// @router /service/product/update [POST]
func Update(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.CreateOrUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// Delete .
// @router /service/product/del [POST]
func Delete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// List .
// @router /service/product/list [POST]
func List(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateStatus .
// @router /service/product/status [POST]
func UpdateStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// InfoById .
// @router /service/product/info [POST]
func InfoById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ProductListExport .
// @router /service/product/export [POST]
func ProductListExport(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}
