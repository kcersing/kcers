// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"kcers/app/admin/config"
	"kcers/app/admin/infras"
	"kcers/app/dal/cache"
	"kcers/app/dal/casbin"
	config2 "kcers/app/dal/config"
	"kcers/app/dal/db"
	"kcers/app/dal/logger"
	"kcers/app/pkg/service/admin"
	"kcers/pkg/minio"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/logger/accesslog"
	"github.com/hertz-contrib/reverseproxy"
)

func init() {

	logger.InitLogger()
	config2.InitConfig()
	infras.InitDB()
	casbin.InitCasbin()
	cache.InitCache()
	db.NewInitDatabase().InitDatabaseUser()
	db.NewInitDatabase().InitDatabaseDict()
	db.NewInitDatabase().InsertDatabaseMenuData()
	db.NewInitDatabase().InitDatabaseApi()
	minio.Init()
}
func minioReverseProxy(c context.Context, ctx *app.RequestContext) {
	proxy, _ := reverseproxy.NewSingleHostReverseProxy(config.GlobalServerConfig.Minio.Url)
	ctx.URI().SetPath(ctx.Param("name"))
	hlog.CtxInfof(c, string(ctx.Request.URI().Path()))
	proxy.ServeHTTP(c, ctx)
}

func main() {
	h := server.Default(
		server.WithStreamBody(true),
		server.WithHostPorts(fmt.Sprintf("%s:%d", config.GlobalServerConfig.Host, config.GlobalServerConfig.Port)),
	)

	h.Use(accesslog.New(
		accesslog.WithFormat("[${time}] | ${status} | ${latency} | ${method} | ${path} | ${queryParams}"),
		accesslog.WithTimeFormat(time.DateTime),
	))
	h.NoHijackConnPool = true
	// Set up /src/*name route forwarding to access minio from external network
	h.GET("/src/*name", minioReverseProxy)
	h.GET("/api/ws/face", admin.Faces)
	register(h)
	h.Spin()
}
